<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Android工程师-求职简历]]></title>
      <url>https://github.com/pangrongxian/2017/06/24/Android%E5%B7%A5%E7%A8%8B%E5%B8%88-%E6%B1%82%E8%81%8C%E7%AE%80%E5%8E%86/</url>
      <content type="html"><![CDATA[<h2 id="联系方式"><a href="#联系方式" class="headerlink" title="联系方式"></a>联系方式</h2><ul>
<li><p>手机：13557053106</p>
</li>
<li><p>Email：pangrongxian@gmail.com </p>
</li>
<li><p>QQ ： 859358014</p>
</li>
</ul>
<h2 id="个人信息"><a href="#个人信息" class="headerlink" title="个人信息"></a>个人信息</h2><ul>
<li><p>庞荣先 / 男 / 1993</p>
</li>
<li><p>本科 / 梧州学院 / 电子信息工程系</p>
</li>
<li><p>工作年限：2 年</p>
</li>
<li><p>技术博客：<a href="https://pangrongxian.github.io" target="_blank" rel="external">https://pangrongxian.github.io</a></p>
</li>
<li><p>GitHub：<a href="https://github.com/pangrongxian">https://github.com/pangrongxian</a></p>
</li>
<li><p>期望职位：Android 应用开发工程师</p>
</li>
<li><p>期望薪资：税前月薪 10k~12k，特别喜欢的公司可例外</p>
</li>
<li><p>期望城市：海外（马来西亚、菲律宾）/ 深圳 /广州</p>
</li>
</ul>
<h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><blockquote>
<p>两年 Android 开发实战经验，能够独立完成项目，开发，兼容性测试，修复bug，发布应用市场一条龙独立开发。</p>
<p>1.熟练集成开发即时通讯 IM（融云，环信，容联云，云信）；</p>
<p>2.熟练集成开发地图模块（百度地图）</p>
<p>3.熟练开发商城类App，购物车，下单，支付（支付宝，微信，Ping++）；</p>
<h2 id="职业技能"><a href="#职业技能" class="headerlink" title="职业技能"></a>职业技能</h2></blockquote>
<ul>
<li><p>2 年工作经验, 2 年 Android 开发经验；</p>
</li>
<li><p>具有编写规范，且易于维护代码的能力；</p>
</li>
<li><p>熟悉面向对象，了解封装、继承和接口设计，了解 MVC 与 MVP 架构；</p>
</li>
<li><p>熟悉自定义 View 绘制，以及手势、事件分发；</p>
</li>
<li><p>熟悉代码混淆，资源混淆，反编译安装包，安装包瘦身；</p>
</li>
<li><p>熟悉使用第三方开源组件，Logger，Butterknife，Glide，PhotoView，OkHttp，Gson 等等；</p>
</li>
<li><p>熟悉 JSON 与 XML 数据结构；</p>
</li>
<li><p>能够快速掌握并集成一份第三方 SDK， 支付，推送，地图，社交网络分享，第三方登录；</p>
</li>
<li><p>懂得一些布局优化，滑动流畅度优化；</p>
</li>
<li><p>熟悉 Android 内存优化；</p>
</li>
<li><p>熟悉 Android 缓存机制</p>
</li>
<li><p>熟练掌握Android 三大主流网络框架OkHttp Retrofit和Volley的封装和使用；</p>
</li>
<li><p>熟练掌握 Android 三大图片加载框架Picasso、Glide和Fresco封装和使用；</p>
</li>
<li><p>熟练使用Retrofit + RxJava + OkHttp + MVP主流框架进行快速开发；</p>
</li>
<li><p>熟练掌握第三方分享和登陆；</p>
</li>
<li><p>懂得一些屏幕适配；</p>
</li>
<li><p>熟练掌握第三方支付：支付宝支付，微信支付，Ping++聚合支付；</p>
</li>
<li><p>熟练集成第三方即时通信：环信IM，容联云IM，融云IM；</p>
</li>
</ul>
<h2 id="工作经历"><a href="#工作经历" class="headerlink" title="工作经历"></a>工作经历</h2><h4 id="广东威速科技有限公司-（-2016年12月-至今-）"><a href="#广东威速科技有限公司-（-2016年12月-至今-）" class="headerlink" title="广东威速科技有限公司 （ 2016年12月 ~ 至今 ）"></a>广东威速科技有限公司 （ 2016年12月 ~ 至今 ）</h4><h5 id="《30天商城》-项目"><a href="#《30天商城》-项目" class="headerlink" title="《30天商城》 项目"></a>《30天商城》 项目</h5><p><strong>项目简介</strong>：「30天商城」一款便捷的线上电子商务购物商城，万千商品，提供尊贵服务，30天无理由退换。</p>
<p><strong>项目职责</strong>：</p>
<pre><code>1.独立负责整个项目框架的搭建； 

2.独自完构建整个项目的网络架构；

3.开发用户系统，第三方登录，购物流程，购物车，接入客服系统，物流系统等；
</code></pre><hr>
<h4 id="广州市士加堡网络技术有限公司-（-2016年1月-2016年12月-）"><a href="#广州市士加堡网络技术有限公司-（-2016年1月-2016年12月-）" class="headerlink" title="广州市士加堡网络技术有限公司 （ 2016年1月 ~ 2016年12月 ）"></a>广州市士加堡网络技术有限公司 （ 2016年1月 ~ 2016年12月 ）</h4><h5 id="《士加堡民宿》-项目"><a href="#《士加堡民宿》-项目" class="headerlink" title="《士加堡民宿》 项目"></a>《士加堡民宿》 项目</h5><p><strong>项目简介</strong>：「士加堡民宿」是一款休闲旅游订房平台app，涉及社交、工具、电商等众多模块</p>
<p><strong>项目职责</strong>：</p>
<pre><code>1.我在此项目负责了项目框架的搭建； 

2.独自完成项目中所有地图模块功能的开发;

3.集成融云 IM 即时通讯完成社交功能；
</code></pre><ul>
<li>遇到上传多张图片OOM问题，我采取了压缩Bitmap优化处理，成功解决问题。</li>
<li>地址定位功能技术细节是难点，开始使用的详细地址定位到后来使用经纬度定位，实施前偏差10-50米，实施后精度偏差5-10米，定位功能非常准确。</li>
</ul>
<hr>
<h4 id="广州小不点信息科技有限公司-（-2015年6月-2015年12月-）"><a href="#广州小不点信息科技有限公司-（-2015年6月-2015年12月-）" class="headerlink" title="广州小不点信息科技有限公司 （ 2015年6月 ~ 2015年12月 ）"></a>广州小不点信息科技有限公司 （ 2015年6月 ~ 2015年12月 ）</h4><h5 id="《演艺风》-项目"><a href="#《演艺风》-项目" class="headerlink" title="《演艺风》  项目"></a>《演艺风》  项目</h5><p><strong>项目简介</strong>：「演艺风」专注于打造一个专业的资讯、服务商和供应商为一体的服务平台，服务商提供服务信息，供应商提供演艺相关的产品，音响和灯光等。</p>
<p><strong>项目职责</strong>：</p>
<pre><code>1.主要负责资讯模块和UI界面搭建；

2.百度地图模块的开发及全国城市数据展示模块的设计，编写开发文档。

3.参与视频播放模块的开发
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android View的绘制流程]]></title>
      <url>https://github.com/pangrongxian/2017/06/16/Android%20View%E7%9A%84%E7%BB%98%E5%88%B6%E6%B5%81%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p>View的绘制和事件处理是两个重要的主题，上一篇《图解 Android事件分发机制》已经把事件的分发机制讲得比较详细了，这一篇是针对View的绘制，View的绘制如果你有所了解，基本分为measure、layout、draw 过程，其中比较难理解就是measure过程，所以本篇文章大幅笔地分析measure过程，相对讲得比较详细，文章也比较长，如果你对View的绘制还不是很懂，对measure过程掌握得不是很深刻，那么耐心点，看完这篇文章，相信你会有所收获的。</p>
<p>转自：<a href="http://www.jianshu.com/p/5a71014e7b1b" target="_blank" rel="external">http://www.jianshu.com/p/5a71014e7b1b</a></p>
<pre><code>【转载请明显注明出处，尊重劳动成果】
</code></pre><h1 id="Measure过程"><a href="#Measure过程" class="headerlink" title="Measure过程"></a>Measure过程</h1><p>对于测量我们来说几个知识点,了解这几个知识点，之后的实例分析你才看得懂。</p>
<h3 id="1、MeasureSpec-的理解"><a href="#1、MeasureSpec-的理解" class="headerlink" title="1、MeasureSpec 的理解"></a>1、MeasureSpec 的理解</h3><p>对于View的测量，肯定会和MeasureSpec接触，MeasureSpec是两个单词组成，翻译过来“测量规格”或者“测量参数”，很多博客包括官方文档对他的说明基本都是“一个MeasureSpec封装了从父容器传递给子容器的布局要求”,这个MeasureSpec 封装的是父容器传递给子容器的布局要求，而不是父容器对子容器的布局要求，“传递” 两个字很重要，更精确的说法应该这个MeasureSpec是由父View的MeasureSpec和子View的LayoutParams通过简单的计算得出一个针对子View的测量要求，这个测量要求就是MeasureSpec。</p>
<ul>
<li>大家都知道一个MeasureSpec是一个大小跟模式的组合值,MeasureSpec中的值是一个整型（32位）将size和mode打包成一个Int型，其中高两位是mode，后面30位存的是size，是为了减少对象的分配开支。MeasureSpec 类似于下图，只不过这边用的是十进制的数，而MeasureSpec 是二进制存储的。</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/966283-c330852c971b02a8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/540" alt="图 1."></p>
<h4 id="注：-1-代表的是EXACTLY，-2-是AT-MOST"><a href="#注：-1-代表的是EXACTLY，-2-是AT-MOST" class="headerlink" title="注：-1 代表的是EXACTLY，-2 是AT_MOST"></a>注：-1 代表的是EXACTLY，-2 是AT_MOST</h4><ul>
<li>MeasureSpec一共有三种模式</li>
</ul>
<pre><code>UPSPECIFIED : 父容器对于子容器没有任何限制,子容器想要多大就多大
EXACTLY: 父容器已经为子容器设置了尺寸,子容器应当服从这些边界,不论子容器想要多大的空间。
AT_MOST：子容器可以是声明大小内的任意大小
</code></pre><p>很多文章都会把这三个模式说成这样，当然其实包括官方文档也是这样表达的，但是这样并不好理解。特别是如果把这三种模式又和MATCH_PARENT和WRAP_CONTENT 联系到一起，很多人就懵逼了。如果从代码上来看view.measure(int widthMeasureSpec, int heightMeasureSpec) 的两个MeasureSpec是父类传递过来的，但并不是完全是父View的要求，而是父View的MeasureSpec和子View自己的LayoutParams共同决定的，而子View的LayoutParams其实就是我们在xml写的时候设置的layout_width和layout_height 转化而来的。我们先来看代码会清晰一些：</p>
<hr>
<pre><code>父View的measure的过程会先测量子View，等子View测量结果出来后，再来测量自己，上
面的measureChildWithMargins就是用来测量某个子View的，我们来分析是怎样测量的，
具体看注释：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div></pre></td><td class="code"><pre><div class="line">protected void measureChildWithMargins(View child, int parentWidthMeasureSpec, int widthUsed, int parentHeightMeasureSpec, int heightUsed) &#123; </div><div class="line"></div><div class="line">// 子View的LayoutParams，你在xml的layout_width和layout_height,</div><div class="line">// layout_xxx的值最后都会封装到这个个LayoutParams。</div><div class="line">final MarginLayoutParams lp = (MarginLayoutParams) child.getLayoutParams();   </div><div class="line"></div><div class="line">//根据父View的测量规格和父View自己的Padding，</div><div class="line">//还有子View的Margin和已经用掉的空间大小（widthUsed），就能算出子View的MeasureSpec,具体计算过程看getChildMeasureSpec方法。</div><div class="line">final int childWidthMeasureSpec = getChildMeasureSpec(parentWidthMeasureSpec,            </div><div class="line">mPaddingLeft + mPaddingRight + lp.leftMargin + lp.rightMargin + widthUsed, lp.width);    </div><div class="line"></div><div class="line">final int childHeightMeasureSpec = getChildMeasureSpec(parentHeightMeasureSpec,           </div><div class="line">mPaddingTop + mPaddingBottom + lp.topMargin + lp.bottomMargin  + heightUsed, lp.height);  </div><div class="line"></div><div class="line">//通过父View的MeasureSpec和子View的自己LayoutParams的计算，算出子View的MeasureSpec，然后父容器传递给子容器的</div><div class="line">// 然后让子View用这个MeasureSpec（一个测量要求，比如不能超过多大）去测量自己，如果子View是ViewGroup 那还会递归往下测量。</div><div class="line">child.measure(childWidthMeasureSpec, childHeightMeasureSpec);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">// spec参数   表示父View的MeasureSpec </div><div class="line">// padding参数    父View的Padding+子View的Margin，父View的大小减去这些边距，才能精确算出</div><div class="line">//               子View的MeasureSpec的size</div><div class="line">// childDimension参数  表示该子View内部LayoutParams属性的值（lp.width或者lp.height）</div><div class="line">//                    可以是wrap_content、match_parent、一个精确指(an exactly size),  </div><div class="line">public static int getChildMeasureSpec(int spec, int padding, int childDimension) &#123;  </div><div class="line">    int specMode = MeasureSpec.getMode(spec);  //获得父View的mode  </div><div class="line">    int specSize = MeasureSpec.getSize(spec);  //获得父View的大小  </div><div class="line"></div><div class="line">   //父View的大小-自己的Padding+子View的Margin，得到值才是子View的大小。</div><div class="line">    int size = Math.max(0, specSize - padding);   </div><div class="line"></div><div class="line">    int resultSize = 0;    //初始化值，最后通过这个两个值生成子View的MeasureSpec</div><div class="line">    int resultMode = 0;    //初始化值，最后通过这个两个值生成子View的MeasureSpec</div><div class="line"></div><div class="line">    switch (specMode) &#123;  </div><div class="line">    // Parent has imposed an exact size on us  </div><div class="line">    //1、父View是EXACTLY的 ！  </div><div class="line">    case MeasureSpec.EXACTLY:   </div><div class="line">        //1.1、子View的width或height是个精确值 (an exactly size)  </div><div class="line">        if (childDimension &gt;= 0) &#123;            </div><div class="line">            resultSize = childDimension;         //size为精确值  </div><div class="line">            resultMode = MeasureSpec.EXACTLY;    //mode为 EXACTLY 。  </div><div class="line">        &#125;   </div><div class="line">        //1.2、子View的width或height为 MATCH_PARENT/FILL_PARENT   </div><div class="line">        else if (childDimension == LayoutParams.MATCH_PARENT) &#123;  </div><div class="line">            // Child wants to be our size. So be it.  </div><div class="line">            resultSize = size;                   //size为父视图大小  </div><div class="line">            resultMode = MeasureSpec.EXACTLY;    //mode为 EXACTLY 。  </div><div class="line">        &#125;   </div><div class="line">        //1.3、子View的width或height为 WRAP_CONTENT  </div><div class="line">        else if (childDimension == LayoutParams.WRAP_CONTENT) &#123;  </div><div class="line">            // Child wants to determine its own size. It can&apos;t be  </div><div class="line">            // bigger than us.  </div><div class="line">            resultSize = size;                   //size为父视图大小  </div><div class="line">            resultMode = MeasureSpec.AT_MOST;    //mode为AT_MOST 。  </div><div class="line">        &#125;  </div><div class="line">        break;  </div><div class="line"></div><div class="line">    // Parent has imposed a maximum size on us  </div><div class="line">    //2、父View是AT_MOST的 ！      </div><div class="line">    case MeasureSpec.AT_MOST:  </div><div class="line">        //2.1、子View的width或height是个精确值 (an exactly size)  </div><div class="line">        if (childDimension &gt;= 0) &#123;  </div><div class="line">            // Child wants a specific size... so be it  </div><div class="line">            resultSize = childDimension;        //size为精确值  </div><div class="line">            resultMode = MeasureSpec.EXACTLY;   //mode为 EXACTLY 。  </div><div class="line">        &#125;  </div><div class="line">        //2.2、子View的width或height为 MATCH_PARENT/FILL_PARENT  </div><div class="line">        else if (childDimension == LayoutParams.MATCH_PARENT) &#123;  </div><div class="line">            // Child wants to be our size, but our size is not fixed.  </div><div class="line">            // Constrain child to not be bigger than us.  </div><div class="line">            resultSize = size;                  //size为父视图大小  </div><div class="line">            resultMode = MeasureSpec.AT_MOST;   //mode为AT_MOST  </div><div class="line">        &#125;  </div><div class="line">        //2.3、子View的width或height为 WRAP_CONTENT  </div><div class="line">        else if (childDimension == LayoutParams.WRAP_CONTENT) &#123;  </div><div class="line">            // Child wants to determine its own size. It can&apos;t be  </div><div class="line">            // bigger than us.  </div><div class="line">            resultSize = size;                  //size为父视图大小  </div><div class="line">            resultMode = MeasureSpec.AT_MOST;   //mode为AT_MOST  </div><div class="line">        &#125;  </div><div class="line">        break;  </div><div class="line"></div><div class="line">    // Parent asked to see how big we want to be  </div><div class="line">    //3、父View是UNSPECIFIED的 ！  </div><div class="line">    case MeasureSpec.UNSPECIFIED:  </div><div class="line">        //3.1、子View的width或height是个精确值 (an exactly size)  </div><div class="line">        if (childDimension &gt;= 0) &#123;  </div><div class="line">            // Child wants a specific size... let him have it  </div><div class="line">            resultSize = childDimension;        //size为精确值  </div><div class="line">            resultMode = MeasureSpec.EXACTLY;   //mode为 EXACTLY  </div><div class="line">        &#125;  </div><div class="line">        //3.2、子View的width或height为 MATCH_PARENT/FILL_PARENT  </div><div class="line">        else if (childDimension == LayoutParams.MATCH_PARENT) &#123;  </div><div class="line">            // Child wants to be our size... find out how big it should  </div><div class="line">            // be  </div><div class="line">            resultSize = 0;                        //size为0！ ,其值未定  </div><div class="line">            resultMode = MeasureSpec.UNSPECIFIED;  //mode为 UNSPECIFIED  </div><div class="line">        &#125;   </div><div class="line">        //3.3、子View的width或height为 WRAP_CONTENT  </div><div class="line">        else if (childDimension == LayoutParams.WRAP_CONTENT) &#123;  </div><div class="line">            // Child wants to determine its own size.... find out how  </div><div class="line">            // big it should be  </div><div class="line">            resultSize = 0;                        //size为0! ，其值未定  </div><div class="line">            resultMode = MeasureSpec.UNSPECIFIED;  //mode为 UNSPECIFIED  </div><div class="line">        &#125;  </div><div class="line">        break;  </div><div class="line">    &#125;  </div><div class="line">    //根据上面逻辑条件获取的mode和size构建MeasureSpec对象。  </div><div class="line">    return MeasureSpec.makeMeasureSpec(resultSize, resultMode);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的代码有点多，希望你仔细看一些注释，代码写得很多，其实计算原理很简单：<br>1、如果我们在xml 的layout_width或者layout_height 把值都写死，那么上述的测量完全就不需要了，之所以要上面的这步测量，是因为 match_parent 就是充满父容器，wrap_content 就是自己多大就多大， 我们写代码的时候特别爽，我们编码方便的时候，google就要帮我们计算你match_parent的时候是多大，wrap_content的是多大，这个计算过程，就是计算出来的父View的MeasureSpec不断往子View传递，结合子View的LayoutParams 一起再算出子View的MeasureSpec，然后继续传给子View，不断计算每个View的MeasureSpec，子View有了MeasureSpec才能更测量自己和自己的子View。</p>
<p>2、上述代码如果这么来理解就简单了</p>
<ul>
<li><strong>如果父View的MeasureSpec 是EXACTLY，说明父View的大小是确切的，（确切的意思很好理解，如果一个View的MeasureSpec 是EXACTLY，那么它的size 是多大，最后展示到屏幕就一定是那么大）。</strong></li>
</ul>
<p>1、如果子View 的layout_xxxx是MATCH_PARENT，父View的大小是确切，子View的大小又MATCH_PARENT（充满整个父View），那么子View的大小肯定是确切的，而且大小值就是父View的size。所以子View的size=父View的size，mode=EXACTLY</p>
<p>2、如果子View 的layout_xxxx是WRAP_CONTENT，也就是子View的大小是根据自己的content 来决定的，但是子View的毕竟是子View，大小不能超过父View的大小，但是子View的是WRAP_CONTENT，我们还不知道具体子View的大小是多少，要等到child.measure(childWidthMeasureSpec, childHeightMeasureSpec) 调用的时候才去真正测量子View 自己content的大小（比如TextView wrap_content 的时候你要测量TextView content 的大小，也就是字符占用的大小，这个测量就是在child.measure(childWidthMeasureSpec, childHeightMeasureSpec)的时候，才能测出字符的大小，MeasureSpec 的意思就是假设你字符100px，但是MeasureSpec 要求最大的只能50px，这时候就要截掉了）。通过上述描述，子View MeasureSpec mode的应该是AT_MOST，而size 暂定父View的 size，表示的意思就是子View的大小没有不确切的值，子View的大小最大为父View的大小，不能超过父View的大小（这就是AT_MOST 的意思），然后这个MeasureSpec 做为子View measure方法 的参数，做为子View的大小的约束或者说是要求，有了这个MeasureSpec子View再实现自己的测量。</p>
<p>3、如果如果子View 的layout_xxxx是确定的值（200dp），那么就更简单了，不管你父View的mode和size是什么，我都写死了就是200dp，那么控件最后展示就是就是200dp，不管我的父View有多大，也不管我自己的content 有多大，反正我就是这么大，所以这种情况MeasureSpec 的mode = EXACTLY 大小size=你在layout_xxxx 填的那个值。</p>
<ul>
<li><strong>如果父View的MeasureSpec 是AT_MOST，说明父View的大小是不确定，最大的大小是MeasureSpec 的size值，不能超过这个值。</strong></li>
</ul>
<p>1、如果子View 的layout_xxxx是MATCH_PARENT，父View的大小是不确定（只知道最大只能多大），子View的大小MATCH_PARENT（充满整个父View），那么子View你即使充满父容器，你的大小也是不确定的，父View自己都确定不了自己的大小，你MATCH_PARENT你的大小肯定也不能确定的，所以子View的mode=AT_MOST，size=父View的size，也就是你在布局虽然写的是MATCH_PARENT，但是由于你的父容器自己的大小不确定，导致子View的大小也不确定，只知道最大就是父View的大小。</p>
<p>2、如果子View 的layout_xxxx是WRAP_CONTENT，父View的大小是不确定（只知道最大只能多大），子View又是WRAP_CONTENT，那么在子View的Content没算出大小之前，子View的大小最大就是父View的大小，所以子View MeasureSpec mode的就是AT_MOST，而size 暂定父View的 size。</p>
<p>3、如果如果子View 的layout_xxxx是确定的值（200dp），同上，写多少就是多少，改变不了的。</p>
<ul>
<li><strong>如果父View的MeasureSpec 是UNSPECIFIED(未指定),表示没有任何束缚和约束，不像AT_MOST表示最大只能多大，不也像EXACTLY表示父View确定的大小，子View可以得到任意想要的大小，不受约束</strong></li>
</ul>
<p>1、如果子View 的layout_xxxx是MATCH_PARENT，因为父View的MeasureSpec是UNSPECIFIED，父View自己的大小并没有任何约束和要求，<br>那么对于子View来说无论是WRAP_CONTENT还是MATCH_PARENT，子View也是没有任何束缚的，想多大就多大，没有不能超过多少的要求，一旦没有任何要求和约束，size的值就没有任何意义了，所以一般都直接设置成0</p>
<p>2、同上…</p>
<p>3、如果如果子View 的layout_xxxx是确定的值（200dp），同上，写多少就是多少，改变不了的（记住，只有设置的确切的值，那么无论怎么测量，大小都是不变的，都是你写的那个值）</p>
<p>到此为止，你是否对MeasureSpec 和三种模式、还有WRAP_CONTENT和MATCH_PARENT有一定的了解了，如果还有任何问题，欢迎在我简书（用户名：Kelin）评论里留言。</p>
<h3 id="2、View的测量过程主要是在onMeasure-方法"><a href="#2、View的测量过程主要是在onMeasure-方法" class="headerlink" title="2、View的测量过程主要是在onMeasure()方法"></a>2、View的测量过程主要是在onMeasure()方法</h3><p>打开View的源码，找到measure方法，这个方法代码不少，但是测量工作都是在onMeasure()做的，measure方法是final的所以这个方法也不可重写，如果想自定义View的测量，你应该去重写onMeasure()方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public final void measure(int widthMeasureSpec, int heightMeasureSpec) &#123;</div><div class="line">  ......</div><div class="line">  onMeasure(widthMeasureSpec,heightMeasureSpec);</div><div class="line">  .....</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3、View的onMeasure-的默认实现"><a href="#3、View的onMeasure-的默认实现" class="headerlink" title="3、View的onMeasure 的默认实现"></a>3、View的onMeasure 的默认实现</h3><p>打开View.java 的源码来看下onMeasure的实现</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) &#123;    </div><div class="line">  setMeasuredDimension(</div><div class="line">  getDefaultSize(getSuggestedMinimumWidth(), widthMeasureSpec),            </div><div class="line">  getDefaultSize(getSuggestedMinimumHeight(), heightMeasureSpec));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>View的onMeasure方法默认实现很简单，就是调用setMeasuredDimension()，setMeasuredDimension()可以简单理解就是给mMeasuredWidth和mMeasuredHeight设值，如果这两个值一旦设置了，那么意味着对于这个View的测量结束了，这个View的宽高已经有测量的结果出来了。如果我们想设定某个View的高宽，完全可以直接通过setMeasuredDimension（100，200）来设置死它的高宽（不建议），但是setMeasuredDimension方法必须在onMeasure方法中调用，不然会抛异常。我们来看下对于View来说它的默认高宽是怎么获取的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">//获取的是android:minHeight属性的值或者View背景图片的大小值</div><div class="line">protected int getSuggestedMinimumWidth() &#123; </div><div class="line">   return (mBackground == null) ? mMinWidth : max(mMinWidth, mBackground.getMinimumWidth()); </div><div class="line">&#125; </div><div class="line">//@param size参数一般表示设置了android:minHeight属性或者该View背景图片的大小值  </div><div class="line">public static int getDefaultSize(int size, int measureSpec) &#123;    </div><div class="line">   int result = size;    </div><div class="line">   int specMode = MeasureSpec.getMode(measureSpec);    </div><div class="line">   int specSize = MeasureSpec.getSize(measureSpec);    </div><div class="line">   switch (specMode) &#123;    </div><div class="line">   case MeasureSpec.UNSPECIFIED:        //表示该View的大小父视图未定，设置为默认值 </div><div class="line">     result = size;  </div><div class="line">     break;    </div><div class="line">   case MeasureSpec.AT_MOST:    </div><div class="line">   case MeasureSpec.EXACTLY:        </div><div class="line">     result = specSize;  </div><div class="line">     break;   </div><div class="line"> &#125;    </div><div class="line">return result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>getDefaultSize的第一个参数size等于getSuggestedMinimumXXXX返回的的值（建议的最小宽度和高度），而建议的最小宽度和高度都是由View的Background尺寸与通过设置View的minXXX属性共同决定的，这个size可以理解为View的默认长度，而第二个参数measureSpec，是父View传给自己的MeasureSpec,这个measureSpec是通过测量计算出来的，具体的计算测量过程前面在讲解MeasureSpec已经讲得比较清楚了（是有父View的MeasureSpec和子View自己的LayoutParams 共同决定的）只要这个测试的mode不是UNSPECIFIED（未确定的），那么默认的就会用这个测量的数值当做View的高度。</p>
<p>对于View默认是测量很简单，大部分情况就是拿计算出来的MeasureSpec的size 当做最终测量的大小。而对于其他的一些View的派生类，如TextView、Button、ImageView等，它们的onMeasure方法系统了都做了重写，不会这么简单直接拿 MeasureSpec 的size来当大小，而去会先去测量字符或者图片的高度等，然后拿到View本身content这个高度（字符高度等），如果MeasureSpec是AT_MOST，而且View本身content的高度不超出MeasureSpec的size，那么可以直接用View本身content的高度（字符高度等），而不是像View.java 直接用MeasureSpec的size做为View的大小。</p>
<h3 id="4、ViewGroup的Measure过程"><a href="#4、ViewGroup的Measure过程" class="headerlink" title="4、ViewGroup的Measure过程"></a>4、ViewGroup的Measure过程</h3><p>ViewGroup 类并没有实现onMeasure，我们知道测量过程其实都是在onMeasure方法里面做的，我们来看下FrameLayout 的onMeasure 方法,具体分析看注释哦。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">//FrameLayout 的测量</div><div class="line">protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) &#123;  </div><div class="line">....</div><div class="line">int maxHeight = 0;</div><div class="line">int maxWidth = 0;</div><div class="line">int childState = 0;</div><div class="line">for (int i = 0; i &lt; count; i++) &#123;    </div><div class="line">   final View child = getChildAt(i);    </div><div class="line">   if (mMeasureAllChildren || child.getVisibility() != GONE) &#123;   </div><div class="line">    // 遍历自己的子View，只要不是GONE的都会参与测量，measureChildWithMargins方法在最上面</div><div class="line">    // 的源码已经讲过了，如果忘了回头去看看，基本思想就是父View把自己的MeasureSpec </div><div class="line">    // 传给子View结合子View自己的LayoutParams 算出子View 的MeasureSpec，然后继续往下传，</div><div class="line">    // 传递叶子节点，叶子节点没有子View，根据传下来的这个MeasureSpec测量自己就好了。</div><div class="line">     measureChildWithMargins(child, widthMeasureSpec, 0, heightMeasureSpec, 0);       </div><div class="line">     final LayoutParams lp = (LayoutParams) child.getLayoutParams(); </div><div class="line">     maxWidth = Math.max(maxWidth, child.getMeasuredWidth() +  lp.leftMargin + lp.rightMargin);        </div><div class="line">     maxHeight = Math.max(maxHeight, child.getMeasuredHeight() + lp.topMargin + lp.bottomMargin);  </div><div class="line">     ....</div><div class="line">     ....</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line">.....</div><div class="line">.....</div><div class="line">//所有的孩子测量之后，经过一系类的计算之后通过setMeasuredDimension设置自己的宽高，</div><div class="line">//对于FrameLayout 可能用最大的字View的大小，对于LinearLayout，可能是高度的累加，</div><div class="line">//具体测量的原理去看看源码。总的来说，父View是等所有的子View测量结束之后，再来测量自己。</div><div class="line">setMeasuredDimension(resolveSizeAndState(maxWidth, widthMeasureSpec, childState),        </div><div class="line">resolveSizeAndState(maxHeight, heightMeasureSpec, childState &lt;&lt; MEASURED_HEIGHT_STATE_SHIFT));</div><div class="line">....</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>到目前为止，基本把Measure 主要原理都过了一遍，接下来我们会结合实例来讲解整个match的过程，首先看下面的代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;LinearLayout  xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;    </div><div class="line">   android:id=&quot;@+id/linear&quot;</div><div class="line">   android:layout_width=&quot;match_parent&quot;    </div><div class="line">   android:layout_height=&quot;wrap_content&quot;    </div><div class="line">   android:layout_marginTop=&quot;50dp&quot;    </div><div class="line">   android:background=&quot;@android:color/holo_blue_dark&quot;    </div><div class="line">   android:paddingBottom=&quot;70dp&quot;    </div><div class="line">   android:orientation=&quot;vertical&quot;&gt;    </div><div class="line">   &lt;TextView        </div><div class="line">    android:id=&quot;@+id/text&quot;       </div><div class="line">    android:layout_width=&quot;match_parent&quot;     </div><div class="line">    android:layout_height=&quot;wrap_content&quot;  </div><div class="line">    android:background=&quot;@color/material_blue_grey_800&quot;       </div><div class="line">    android:text=&quot;TextView&quot;        </div><div class="line">    android:textColor=&quot;@android:color/white&quot;        </div><div class="line">    android:textSize=&quot;20sp&quot; /&gt;    </div><div class="line">   &lt;View       </div><div class="line">      android:id=&quot;@+id/view&quot;       </div><div class="line">     android:layout_width=&quot;match_parent&quot; </div><div class="line">     android:layout_height=&quot;150dp&quot;    </div><div class="line">     android:background=&quot;@android:color/holo_green_dark&quot; /&gt;</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure>
<p>上面的代码对于出来的布局是下面的一张图</p>
<p><img src="http://upload-images.jianshu.io/upload_images/966283-4a11f92ac8c5e224.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图 1."></p>
<p>对于上面图可能有些不懂，这边做下说明:</p>
<blockquote>
<p>整个图是一个DecorView,DecorView可以理解成整个页面的根View,DecorView是一个FrameLayout,包含两个子View，一个id=statusBarBackground的View和一个是LineaLayout，id=statusBarBackground的View，我们可以先不管（我也不是特别懂这个View,应该就是statusBar的设置背景的一个控件，方便设置statusBar的背景)，而这个LinearLayout比较重要，它包含一个title和一个content，title很好理解其实就是TitleBar或者ActionBar,content 就更简单了，setContentView()方法你应该用过吧，android.R.id.content 你应该听过吧，没错就是它,content是一个FrameLayout，你写的页面布局通过setContentView加进来就成了content的直接子View。</p>
</blockquote>
<p>整个View的布局图如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/966283-4096801e91e2eccc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图 1."></p>
<p>这张图在下面分析measure，会经常用到，主要用于了解递归的时候view 的measure顺序</p>
<blockquote>
<p>注:<br>1、 header的是个ViewStub,用来惰性加载ActionBar，为了便于分析整个测量过程，我把Theme设成NoActionBar，避免ActionBar 相关的measure干扰整个过程，这样可以忽略掉ActionBar 的测量，在调试代码更清晰。<br>2、包含Header(ActionBar）和id/content 的那个父View，我不知道叫什么名字好，我们姑且叫它ViewRoot（看上图）,它是垂直的LinearLayout，放着整个页面除statusBar 的之外所有的东西，叫它ViewRoot 应该还ok，一个代号而已。</p>
</blockquote>
<p>既然我们知道整个View的Root是DecorView，那么View的绘制是从哪里开始的呢，我们知道每个Activity 均会创建一个 PhoneWindow对象，是Activity和整个View系统交互的接口，每个Window都对应着一个View和一个ViewRootImpl，Window和View通过ViewRootImpl来建立联系,对于Activity来说，ViewRootImpl是连接WindowManager和DecorView的纽带,绘制的入口是由ViewRootImpl的performTraversals方法来发起Measure，Layout，Draw等流程的。</p>
<p>我们来看下ViewRootImpl的performTraversals 方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">private void performTraversals() &#123; </div><div class="line">...... </div><div class="line">int childWidthMeasureSpec = getRootMeasureSpec(mWidth, lp.width); </div><div class="line">int childHeightMeasureSpec = getRootMeasureSpec(mHeight, lp.height); </div><div class="line">...... </div><div class="line">mView.measure(childWidthMeasureSpec, childHeightMeasureSpec); </div><div class="line">......</div><div class="line">mView.layout(0, 0, mView.getMeasuredWidth(), mView.getMeasuredHeight());</div><div class="line">...... </div><div class="line">mView.draw(canvas); </div><div class="line">......</div><div class="line">&#125;</div><div class="line"></div><div class="line">private static int getRootMeasureSpec(int windowSize, int rootDimension) &#123; </div><div class="line">   int measureSpec; </div><div class="line">   switch (rootDimension) &#123; </div><div class="line">   case ViewGroup.LayoutParams.MATCH_PARENT: </div><div class="line">   // Window can&apos;t resize. Force root view to be windowSize.   </div><div class="line">   measureSpec = MeasureSpec.makeMeasureSpec(windowSize,MeasureSpec.EXACTLY);</div><div class="line">   break; </div><div class="line">   ...... </div><div class="line">  &#125; </div><div class="line"> return measureSpec; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>performTraversals 中我们看到的mView其实就是DecorView,View的绘制从DecorView开始， 在mView.measure()的时候调用getRootMeasureSpec获得两个MeasureSpec做为参数，getRootMeasureSpec的两个参数（mWidth, lp.width）mWith和mHeight 是屏幕的宽度和高度， lp是WindowManager.LayoutParams，它的lp.width和lp.height的默认值是MATCH_PARENT,所以通过getRootMeasureSpec 生成的测量规格MeasureSpec 的mode是MATCH_PARENT ，size是屏幕的高宽。<br>因为DecorView 是一个FrameLayout 那么接下来会进入FrameLayout 的measure方法，measure的两个参数就是刚才getRootMeasureSpec的生成的两个MeasureSpec，DecorView的测量开始了。<br>首先是DecorView 的 MeasureSpec ，根据上面的分析DecorView 的 MeasureSpec是Windows传过来的，我们画出DecorView 的MeasureSpec 图：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/966283-c330852c971b02a8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/340" alt="图 1."></p>
<blockquote>
<p>注：<br>1、-1 代表的是EXACTLY，-2 是AT_MOST</p>
<p>2、由于屏幕的像素是1440x2560,所以DecorView 的MeasureSpec的size 对应于这两个值</p>
</blockquote>
<p>那么接下来在FrameLayout 的onMeasure()方法DecorView开始for循环测量自己的子View,测量完所有的子View再来测量自己，由下图可知，接下来要测量ViewRoot的大小</p>
<p><img src="http://upload-images.jianshu.io/upload_images/966283-4096801e91e2eccc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/540" alt="图 1."></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">//FrameLayout 的测量</div><div class="line">protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) &#123;  </div><div class="line">....</div><div class="line">int maxHeight = 0;</div><div class="line">int maxWidth = 0;</div><div class="line">int childState = 0;</div><div class="line">for (int i = 0; i &lt; count; i++) &#123;    </div><div class="line">   final View child = getChildAt(i);    </div><div class="line">   if (mMeasureAllChildren || child.getVisibility() != GONE) &#123;   </div><div class="line">    // 遍历自己的子View，只要不是GONE的都会参与测量，measureChildWithMargins方法在最上面</div><div class="line">    // 的源码已经讲过了，如果忘了回头去看看，基本思想就是父View把自己当MeasureSpec </div><div class="line">    // 传给子View结合子View自己的LayoutParams 算出子View 的MeasureSpec，然后继续往下穿，</div><div class="line">    // 传递叶子节点，叶子节点没有子View，只要负责测量自己就好了。</div><div class="line">     measureChildWithMargins(child, widthMeasureSpec, 0, heightMeasureSpec, 0);      </div><div class="line">     ....</div><div class="line">     ....</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line">....</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>DecorView 测量ViewRoot 的时候把自己的widthMeasureSpec和heightMeasureSpec传进去了，接下来你就要去看measureChildWithMargins的源码了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">protected void measureChildWithMargins(View child, int parentWidthMeasureSpec, int widthUsed, int parentHeightMeasureSpec, int heightUsed) &#123; </div><div class="line"></div><div class="line">final MarginLayoutParams lp = (MarginLayoutParams) child.getLayoutParams();   </div><div class="line"></div><div class="line">final int childWidthMeasureSpec = getChildMeasureSpec(parentWidthMeasureSpec,            </div><div class="line">mPaddingLeft + mPaddingRight + lp.leftMargin + lp.rightMargin + widthUsed, lp.width);    </div><div class="line"></div><div class="line">final int childHeightMeasureSpec = getChildMeasureSpec(parentHeightMeasureSpec,           </div><div class="line">mPaddingTop + mPaddingBottom + lp.topMargin + lp.bottomMargin  + heightUsed, lp.height);  </div><div class="line"></div><div class="line">child.measure(childWidthMeasureSpec, childHeightMeasureSpec);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>ViewRoot 是系统的View，它的LayoutParams默认都是match_parent,根据我们文章最开始MeasureSpec 的计算规则，ViewRoot 的MeasureSpec mode应该等于EXACTLY（DecorView MeasureSpec 的mode是EXACTLY，ViewRoot的layoutparams 是match_parent），size 也等于DecorView的size，所以ViewRoot的MeasureSpec图如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/966283-ed0ffedcca47672a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/540" alt="图 1."></p>
<p>算出ViewRoot的MeasureSpec 之后，开始调用ViewRoot.measure 方法去测量ViewRoot的大小，然而ViewRoot是一个LinearLayout ，ViewRoot.measure最终会执行的LinearLayout 的onMeasure 方法，LinearLayout 的onMeasure 方法又开始逐个测量它的子View，上面的measureChildWithMargins方法又会被调用，那么根据View的层级图，接下来测量的是header（ViewStub）,由于header的Gone，所以直接跳过不做测量工作，所以接下来轮到ViewRoot的第二个child content（android.R.id.content）,我们要算出这个content 的MeasureSpec，所以又要拿ViewRoot 的MeasureSpec 和 android.R.id.content的LayoutParams 做计算了，计算过程就是调用getChildMeasureSpec的方法，</p>
<p><img src="http://upload-images.jianshu.io/upload_images/966283-527eb25fd49d38ef.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图 1."></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">protected void measureChildWithMargins(View child, int parentWidthMeasureSpec, int widthUsed, int parentHeightMeasureSpec, int heightUsed) &#123; </div><div class="line">   .....</div><div class="line">   final int childHeightMeasureSpec = getChildMeasureSpec(parentHeightMeasureSpec,           </div><div class="line">mPaddingTop + mPaddingBottom + lp.topMargin + lp.bottomMargin  + heightUsed, lp.height);  </div><div class="line">   ....</div><div class="line">&#125;</div><div class="line"></div><div class="line">public static int getChildMeasureSpec(int spec, int padding, int childDimension) &#123;  </div><div class="line">    int specMode = MeasureSpec.getMode(spec);  //获得父View的mode  </div><div class="line">    int specSize = MeasureSpec.getSize(spec);  //获得父View的大小  </div><div class="line"></div><div class="line">    int size = Math.max(0, specSize - padding); //父View的大小-自己的Padding+子View的Margin，得到值才是子View可能的最大值。  </div><div class="line">     .....</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>由上面的代码<br><strong>int size = Math.max(0, specSize - padding);<br>而 padding=mPaddingTop + mPaddingBottom + lp.topMargin + lp.bottomMargin + heightUsed</strong></p>
<p>算出android.R.id.content 的MeasureSpec 的size<br>由于ViewRoot 的mPaddingBottom=100px(这个可能和状态栏的高度有关，我们测量的最后会发现id/statusBarBackground的View的高度刚好等于100px，ViewRoot 是系统的View的它的Padding 我们没法改变，所以计算出来Content（android.R.id.content） 的MeasureSpec 的高度少了100px ，它的宽高的mode 根据算出来也是EXACTLY（ViewRoot 是EXACTLY和android.R.id.content 是match_parent）。所以Content（android.R.id.content）的MeasureSpec 如下（高度少了100px）：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/966283-5ce615a3684d7815.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/540" alt="图 1."></p>
<p>Paste_Image.png<br>Content（android.R.id.content） 是FrameLayout，递归调用开始准备计算id/linear的MeasureSpec，我们先给出结果：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/966283-c7e86f4510ddf84a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图 1."></p>
<blockquote>
<p>图中有两个要注意的地方：<br>1、id/linear的heightMeasureSpec 的mode=AT_MOST，因为id/linear 的LayoutParams 的layout_height=”wrap_content”<br>2、id/linear的heightMeasureSpec 的size 少了200px, 由上面的代码<br>padding=mPaddingTop + mPaddingBottom + lp.topMargin + lp.bottomMargin + heightUsed;<br>int size = Math.max(0, specSize - padding);<br>由于id/linear 的 android:layout_marginTop=”50dp” 使得lp.topMargin=200px (本设备的density=4，px=4*pd)，在计算后id/linear的heightMeasureSpec 的size 少了200px。（布局代码前面已给出，可自行查看id/linear 控件xml中设置的属性）</p>
</blockquote>
<p>linear.measure接着往下算linear的子View的的MeasureSpec，看下View 层级图，往下走应该是id/text,接下来是计算id/text的MeasureSpec，直接看图，mode=AT_MOST ,size 少了280，别问我为什么 …specSize - padding.</p>
<p><img src="http://upload-images.jianshu.io/upload_images/966283-058c5a6ce57b3125.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图 1."></p>
<p>算出id/text 的MeasureSpec 后，接下来text.measure(childWidthMeasureSpec, childHeightMeasureSpec);准备测量id/text 的高宽，这时候已经到底了，id/text是TextView，已经没有子类了，这时候跳到TextView的onMeasure方法了。TextView 拿着刚才计算出来的heightMeasureSpec（mode=AT_MOST,size=1980）,这个就是对TextView的高度和宽度的约束，进到TextView 的onMeasure(widthMeasureSpec,heightMeasureSpec) 方法，在onMeasure 方法执行调试过程中，我们发现下面的代码：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/966283-856ea117c2b84148.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图 1."></p>
<p>TextView字符的高度（也就是TextView的content高度[wrap_content]）测出来=107px，107px 并没有超过1980px(允许的最大高度)，所以实际测量出来TextView的高度是107px。<br>最终算出id/text 的mMeasureWidth=1440px,mMeasureHeight=107px。</p>
<p>贴一下布局代码，免得你忘了具体布局。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;LinearLayout  xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;    </div><div class="line">   android:id=&quot;@+id/linear&quot;</div><div class="line">   android:layout_width=&quot;match_parent&quot;    </div><div class="line">   android:layout_height=&quot;wrap_content&quot;    </div><div class="line">   android:layout_marginTop=&quot;50dp&quot;    </div><div class="line">   android:background=&quot;@android:color/holo_blue_dark&quot;    </div><div class="line">   android:paddingBottom=&quot;70dp&quot;    </div><div class="line">   android:orientation=&quot;vertical&quot;&gt;    </div><div class="line">   &lt;TextView        </div><div class="line">    android:id=&quot;@+id/text&quot;       </div><div class="line">    android:layout_width=&quot;match_parent&quot;     </div><div class="line">    android:layout_height=&quot;wrap_content&quot;  </div><div class="line">    android:background=&quot;@color/material_blue_grey_800&quot;       </div><div class="line">    android:text=&quot;TextView&quot;        </div><div class="line">    android:textColor=&quot;@android:color/white&quot;        </div><div class="line">    android:textSize=&quot;20sp&quot; /&gt;    </div><div class="line">   &lt;View       </div><div class="line">      android:id=&quot;@+id/view&quot;       </div><div class="line">     android:layout_width=&quot;match_parent&quot; </div><div class="line">     android:layout_height=&quot;150dp&quot;    </div><div class="line">     android:background=&quot;@android:color/holo_green_dark&quot; /&gt;</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure>
<p>TextView的高度已经测量出来了，接下来测量id/linear的第二个child（id/view），同样的原理测出id/view的MeasureSpec.</p>
<p><img src="http://upload-images.jianshu.io/upload_images/966283-55810a48922ac8fe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图 1."></p>
<p>id/view的MeasureSpec 计算出来后，调用view.measure(childWidthMeasureSpec, childHeightMeasureSpec)的测量id/view的高宽，之前已经说过View measure的默认实现是</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) &#123;    </div><div class="line">  setMeasuredDimension(</div><div class="line">  getDefaultSize(getSuggestedMinimumWidth(), widthMeasureSpec),            </div><div class="line">  getDefaultSize(getSuggestedMinimumHeight(), heightMeasureSpec));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最终算出id/view的mMeasureWidth=1440px,mMeasureHeight=600px。</p>
<p>id/linear 的子View的高度都计算完毕了，接下来id/linear就通过所有子View的测量结果计算自己的高宽，id/linear是LinearLayout，所有它的高度计算简单理解就是子View的高度的累积+自己的Padding.</p>
<p><img src="http://upload-images.jianshu.io/upload_images/966283-b089fd286ca7fc05.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图 1."></p>
<p>最终算出id/linear的mMeasureWidth=1440px,mMeasureHeight=987px。</p>
<p>最终算出id/linear出来后，id/content 就要根据它唯一的子View id/linear 的测量结果和自己的之前算出的MeasureSpec一起来测量自己的结果，具体计算的逻辑去看FrameLayout onMeasure 函数的计算过程。以此类推，接下来测量ViewRoot,然后再测量id/statusBarBackground,虽然不知道id/statusBarBackground 是什么，但是调试的过程中，测出的它的高度=100px, 和 id/content 的paddingTop 刚好相等。在最后测量DecorView 的高宽，最终整个测量过程结束。所有的View的大小测量完毕。所有的getMeasureWidth 和 getMeasureWidth 都已经有值了。Measure 分析到此为止，如有不懂，评论留言（简书：kelin）</p>
<h2 id="layout过程"><a href="#layout过程" class="headerlink" title="layout过程"></a>layout过程</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mView.measure(childWidthMeasureSpec, childHeightMeasureSpec); </div><div class="line">......</div><div class="line">mView.layout(0, 0, mView.getMeasuredWidth(), mView.getMeasuredHeight());</div></pre></td></tr></table></figure>
<p>performTraversals 方法执行完mView.measure 计算出mMeasuredXXX后就开始执行layout 函数来确定View具体放在哪个位置，我们计算出来的View目前只知道view矩阵的大小，具体这个矩阵放在哪里，这就是layout 的工作了。layout的主要作用 ：根据子视图的大小以及布局参数将View树放到合适的位置上。</p>
<p>既然是通过mView.layout(0, 0, mView.getMeasuredWidth(), mView.getMeasuredHeight()); 那我们来看下layout 函数做了什么，mView肯定是个ViewGroup，不会是View,我们直接看下ViewGroup 的layout函数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public final void layout(int l, int t, int r, int b) &#123;    </div><div class="line">   if (!mSuppressLayout &amp;&amp; (mTransition == null || !mTransition.isChangingLayout())) &#123;        </div><div class="line">    if (mTransition != null) &#123;            </div><div class="line">       mTransition.layoutChange(this);        </div><div class="line">    &#125;       </div><div class="line">    super.layout(l, t, r, b);    </div><div class="line">    &#125; else &#123;        </div><div class="line">    // record the fact that we noop&apos;d it; request layout when transition finishes        </div><div class="line">      mLayoutCalledWhileSuppressed = true;    </div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>代码可以看个大概，LayoutTransition是用于处理ViewGroup增加和删除子视图的动画效果，也就是说如果当前ViewGroup未添加LayoutTransition动画，或者LayoutTransition动画此刻并未运行，那么调用super.layout(l, t, r, b)，继而调用到ViewGroup中的onLayout，否则将mLayoutSuppressed设置为true，等待动画完成时再调用requestLayout()。<br>这个函数是final 不能重写，所以ViewGroup的子类都会调用这个函数，layout 的具体实现是在super.layout(l, t, r, b)里面做的，那么我接下来看一下View类的layout函数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public final void layout(int l, int t, int r, int b) &#123;</div><div class="line">       .....</div><div class="line">      //设置View位于父视图的坐标轴</div><div class="line">       boolean changed = setFrame(l, t, r, b); </div><div class="line">       //判断View的位置是否发生过变化，看有必要进行重新layout吗</div><div class="line">       if (changed || (mPrivateFlags &amp; LAYOUT_REQUIRED) == LAYOUT_REQUIRED) &#123;</div><div class="line">           if (ViewDebug.TRACE_HIERARCHY) &#123;</div><div class="line">               ViewDebug.trace(this, ViewDebug.HierarchyTraceType.ON_LAYOUT);</div><div class="line">           &#125;</div><div class="line">           //调用onLayout(changed, l, t, r, b); 函数</div><div class="line">           onLayout(changed, l, t, r, b);</div><div class="line">           mPrivateFlags &amp;= ~LAYOUT_REQUIRED;</div><div class="line">       &#125;</div><div class="line">       mPrivateFlags &amp;= ~FORCE_LAYOUT;</div><div class="line">       .....</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>1、setFrame(l, t, r, b) 可以理解为给mLeft 、mTop、mRight、mBottom赋值，然后基本就能确定View自己在父视图的位置了，这几个值构成的矩形区域就是该View显示的位置，这里的具体位置都是相对与父视图的位置。</p>
<p>2、回调onLayout，对于View来说，onLayout只是一个空实现，一般情况下我们也不需要重载该函数,：</p>
<p>protected void onLayout(boolean changed, int left, int top, int right, int bottom) {  </p>
<pre><code>}
</code></pre><p>对于ViewGroup 来说，唯一的差别就是ViewGroup中多了关键字abstract的修饰，要求其子类必须重载onLayout函数。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@Override  </div><div class="line">protected abstract void onLayout(boolean changed,  </div><div class="line">        int l, int t, int r, int b);</div></pre></td></tr></table></figure>
<p>而重载onLayout的目的就是安排其children在父视图的具体位置，那么如何安排子View的具体位置呢？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">int childCount = getChildCount() ; </div><div class="line">  for(int i=0 ;i&lt;childCount ;i++)&#123;</div><div class="line">       View child = getChildAt(i) ;</div><div class="line">       //整个layout()过程就是个递归过程</div><div class="line">       child.layout(l, t, r, b) ;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>代码很简单，就是遍历自己的孩子，然后调用 child.layout(l, t, r, b) ，给子view 通过setFrame(l, t, r, b) 确定位置，而重点是(l, t, r, b) 怎么计算出来的呢。还记得我们之前测量过程，测量出来的MeasuredWidth和MeasuredHeight吗？还记得你在xml 设置的Gravity吗？还有RelativeLayout 的其他参数吗，没错，就是这些参数和MeasuredHeight、MeasuredWidth 一起来确定子View在父视图的具体位置的。具体的计算过程大家可以看下最简单FrameLayout 的onLayout 函数的源码，每个不同的ViewGroup 的实现都不一样，这边不做具体分析了吧。</p>
<p>3、MeasuredWidth和MeasuredHeight这两个参数为layout过程提供了一个很重要的依据（如果不知道View的大小，你怎么固定四个点的位置呢），但是这两个参数也不是必须的，layout过程中的4个参数l, t, r, b完全可以由我们任意指定，而View的最终的布局位置和大小（mRight - mLeft=实际宽或者mBottom-mTop=实际高）完全由这4个参数决定，measure过程得到的mMeasuredWidth和mMeasuredHeight提供了视图大小测量的值，但我们完全可以不使用这两个值，所以measure过程并不是必须的。如果我们不使用这两个值，那么getMeasuredWidth() 和getWidth() 就很有可能不是同一个值，它们的计算是不一样的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public final int getMeasuredWidth() &#123;  </div><div class="line">        return mMeasuredWidth &amp; MEASURED_SIZE_MASK;  </div><div class="line">    &#125;  </div><div class="line">public final int getWidth() &#123;  </div><div class="line">        return mRight - mLeft;  </div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>layout 过程相对简单些，分析就到此为止。</p>
<h2 id="draw过程"><a href="#draw过程" class="headerlink" title="draw过程"></a>draw过程</h2><p>performTraversals 方法的下一步就是mView.draw(canvas); 因为View的draw 方法一般不去重写，官网文档也建议不要去重写draw 方法，所以下一步执行就是View.java的draw 方法，我们来看下源码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">public void draw(Canvas canvas) &#123;</div><div class="line">    ...</div><div class="line">        /*</div><div class="line">         * Draw traversal performs several drawing steps which must be executed</div><div class="line">         * in the appropriate order:</div><div class="line">         *</div><div class="line">         *      1. Draw the background</div><div class="line">         *      2. If necessary, save the canvas&apos; layers to prepare for fading</div><div class="line">         *      3. Draw view&apos;s content</div><div class="line">         *      4. Draw children</div><div class="line">         *      5. If necessary, draw the fading edges and restore layers</div><div class="line">         *      6. Draw decorations (scrollbars for instance)</div><div class="line">         */</div><div class="line"></div><div class="line">        // Step 1, draw the background, if needed</div><div class="line">    ...</div><div class="line">        background.draw(canvas);</div><div class="line">    ...</div><div class="line">        // skip step 2 &amp; 5 if possible (common case)</div><div class="line">    ...</div><div class="line">        // Step 2, save the canvas&apos; layers</div><div class="line">    ...</div><div class="line">        if (solidColor == 0) &#123;</div><div class="line">            final int flags = Canvas.HAS_ALPHA_LAYER_SAVE_FLAG;</div><div class="line"></div><div class="line">            if (drawTop) &#123;</div><div class="line">                canvas.saveLayer(left, top, right, top + length, null, flags);</div><div class="line">            &#125;</div><div class="line">    ...</div><div class="line">        // Step 3, draw the content</div><div class="line">        if (!dirtyOpaque) onDraw(canvas);</div><div class="line"></div><div class="line">        // Step 4, draw the children</div><div class="line">        dispatchDraw(canvas);</div><div class="line"></div><div class="line">        // Step 5, draw the fade effect and restore layers</div><div class="line"></div><div class="line">        if (drawTop) &#123;</div><div class="line">            matrix.setScale(1, fadeHeight * topFadeStrength);</div><div class="line">            matrix.postTranslate(left, top);</div><div class="line">            fade.setLocalMatrix(matrix);</div><div class="line">            canvas.drawRect(left, top, right, top + length, p);</div><div class="line">        &#125;</div><div class="line">    ...</div><div class="line">        // Step 6, draw decorations (scrollbars)</div><div class="line">        onDrawScrollBars(canvas);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>注释写得比较清楚，一共分成6步，看到注释没有（ // skip step 2 &amp; 5 if possible (common case)）除了2 和 5之外 我们一步一步来看：</p>
<h3 id="1、第一步：背景绘制"><a href="#1、第一步：背景绘制" class="headerlink" title="1、第一步：背景绘制"></a>1、第一步：背景绘制</h3><p>看注释即可，不是重点</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">private void drawBackground(Canvas canvas) &#123; </div><div class="line">     Drawable final Drawable background = mBackground; </div><div class="line">      ...... </div><div class="line">     //mRight - mLeft, mBottom - mTop layout确定的四个点来设置背景的绘制区域 </div><div class="line">     if (mBackgroundSizeChanged) &#123; </div><div class="line">        background.setBounds(0, 0, mRight - mLeft, mBottom - mTop);   </div><div class="line">        mBackgroundSizeChanged = false; rebuildOutline(); </div><div class="line">     &#125; </div><div class="line">     ...... </div><div class="line">     //调用Drawable的draw() 把背景图片画到画布上</div><div class="line">     background.draw(canvas); </div><div class="line">     ...... </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2、第三步，对View的内容进行绘制。"><a href="#2、第三步，对View的内容进行绘制。" class="headerlink" title="2、第三步，对View的内容进行绘制。"></a>2、第三步，对View的内容进行绘制。</h3><p>onDraw(canvas) 方法是view用来draw 自己的，具体如何绘制，颜色线条什么样式就需要子View自己去实现，View.java 的onDraw(canvas) 是空实现，ViewGroup 也没有实现，每个View的内容是各不相同的，所以需要由子类去实现具体逻辑。</p>
<h3 id="3、第4步-对当前View的所有子View进行绘制"><a href="#3、第4步-对当前View的所有子View进行绘制" class="headerlink" title="3、第4步 对当前View的所有子View进行绘制"></a>3、第4步 对当前View的所有子View进行绘制</h3><p>dispatchDraw(canvas) 方法是用来绘制子View的，View.java 的dispatchDraw()方法是一个空方法,因为View没有子View,不需要实现dispatchDraw ()方法，ViewGroup就不一样了，它实现了dispatchDraw ()方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line"> protected void dispatchDraw(Canvas canvas) &#123;</div><div class="line">       ...</div><div class="line">        if ((flags &amp; FLAG_USE_CHILD_DRAWING_ORDER) == 0) &#123;</div><div class="line">            for (int i = 0; i &lt; count; i++) &#123;</div><div class="line">                final View child = children[i];</div><div class="line">                if ((child.mViewFlags &amp; VISIBILITY_MASK) == VISIBLE || child.getAnimation() != null) &#123;</div><div class="line">                    more |= drawChild(canvas, child, drawingTime);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125; else &#123;</div><div class="line">            for (int i = 0; i &lt; count; i++) &#123;</div><div class="line">                final View child = children[getChildDrawingOrder(count, i)];</div><div class="line">                if ((child.mViewFlags &amp; VISIBILITY_MASK) == VISIBLE || child.getAnimation() != null) &#123;</div><div class="line">                    more |= drawChild(canvas, child, drawingTime);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">      ......</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>代码一眼看出，就是遍历子View然后drawChild(),drawChild()方法实际调用的是子View.draw()方法,ViewGroup类已经为我们实现绘制子View的默认过程，这个实现基本能满足大部分需求，所以ViewGroup类的子类（LinearLayout,FrameLayout）也基本没有去重写dispatchDraw方法，我们在实现自定义控件，除非比较特别，不然一般也不需要去重写它， drawChild()的核心过程就是为子视图分配合适的cavas剪切区，剪切区的大小正是由layout过程决定的，而剪切区的位置取决于滚动值以及子视图当前的动画。设置完剪切区后就会调用子视图的draw()函数进行具体的绘制了。</p>
<h3 id="4、第6步-对View的滚动条进行绘制"><a href="#4、第6步-对View的滚动条进行绘制" class="headerlink" title="4、第6步 对View的滚动条进行绘制"></a>4、第6步 对View的滚动条进行绘制</h3><p>不是重点，知道有这东西就行，onDrawScrollBars 的一句注释 ：Request the drawing of the horizontal and the vertical scrollbar. The scrollbars are painted only if they have been awakened first.</p>
<p>一张图看下整个draw的递归流程。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/966283-480bf9def58bed74.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图 1."></p>
<p>到此整个绘制过程基本讲述完毕了。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android 事件分发机制]]></title>
      <url>https://github.com/pangrongxian/2017/06/16/%E5%9B%BE%E8%A7%A3%20Android%20%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%E6%9C%BA%E5%88%B6/</url>
      <content type="html"><![CDATA[<p>转自：<a href="http://www.jianshu.com/p/e99b5e8bd67b" target="_blank" rel="external">http://www.jianshu.com/p/e99b5e8bd67b</a> </p>
<p>为什么转载这篇文章？因为它能让你很容易的把事件分发记在你的脑海，感觉自己写不出比这更好的文章了，推荐！</p>
<pre><code>在 Android 开发中，事件分发机制是一块Android 比较重要的知识体系，了解并熟悉整套的

分发机制有助于更好的分析各种点击滑动失效问题，更好去扩展控件的事件功能和开发自

定义控件，同时事件分发机制也是 Android 面试必问考点之一，如果你能把下面的一些事

件分发图当场画出来肯定加分不少。废话不多说，总结一句:事件分发机制很重要。
</code></pre><h2 id="Android-事件分发流"><a href="#Android-事件分发流" class="headerlink" title="Android 事件分发流"></a>Android 事件分发流</h2><p>关于Android 事件分发机制网上的博文很多，但是很多都是写个Demo然后贴一下输出的Log或者拿源码分析，然后一堆的注释和说明，如果用心的去看肯定是收获不少但是确实很难把整个流程说清和记住。曾经也是拼命想记住整个流程，但是一段时间又忘了，最后觉得分析这种问题和事件流的走向，一张图来解释和说明会清晰很多，下面我根据画的一张事件分发流程图,说明的事件从用户点击之后，在不同函数不同返回值的情况的最终走向。</p>
<p><img src="http://xdeveloper.cn/content/images/2017/04/1.png" alt="图 1."></p>
<ul>
<li>仔细看的话，图分为3层，从上往下依次是Activity、ViewGroup、View</li>
<li>事件从左上角那个白色箭头开始，由Activity的dispatchTouchEvent做分发</li>
<li>箭头的上面字代表方法返回值，（return true、return false、return - - -   super.xxxxx(),super 的意思是调用父类实现。</li>
<li>dispatchTouchEvent和 onTouchEvent的框里有个【true—-&gt;消费】的字，表示的意思是如果方法返回true，那么代表事件就此消费，不会继续往别的地方传了，事件终止。</li>
<li>目前所有的图的事件是针对ACTIONDOWN的，对于ACTIONMOVE和ACTION_UP我们最后做分析。</li>
<li>之前图中的Activity 的dispatchTouchEvent 有误（图已修复），只有return super.dispatchTouchEvent(ev) 才是往下走，返回true 或者 false 事件就被消费了（终止传递）。</li>
</ul>
<p>仔细看整个图，我们得出事件流 走向的几个结论（希望读者专心的看下图 1，多看几遍，脑子有比较清晰的概念。）</p>
<h4 id="1、如果事件不被中断，整个事件流向是一个类U型图，我们来看下这张图，可能更能理解U型图的意思。"><a href="#1、如果事件不被中断，整个事件流向是一个类U型图，我们来看下这张图，可能更能理解U型图的意思。" class="headerlink" title="1、如果事件不被中断，整个事件流向是一个类U型图，我们来看下这张图，可能更能理解U型图的意思。"></a>1、如果事件不被中断，整个事件流向是一个类U型图，我们来看下这张图，可能更能理解U型图的意思。</h4><p><img src="http://xdeveloper.cn/content/images/2017/04/2.png" alt="图 2."></p>
<p>所以如果我们没有对控件里面的方法进行重写或更改返回值，而直接用super调用父类的默认实现，那么整个事件流向应该是从<strong>Activity</strong>—-&gt;<strong>ViewGroup</strong>—&gt;<strong>View</strong> 从上往下调用<strong>dispatchTouchEvent</strong>方法，一直到叶子节点（View）的时候，再由<strong>View</strong>—&gt;<strong>ViewGroup</strong>—&gt;<strong>Activity</strong>从下往上调用<strong>onTouchEvent</strong>方法。</p>
<h4 id="2、dispatchTouchEvent-和-onTouchEvent-一旦return-true-事件就停止传递了（到达终点）（没有谁能再收到这个事件）。看下图中只要return-true事件就没再继续传下去了，对于return-true我们经常说事件被消费了，消费了的意思就是事件走到这里就是终点，不会往下传，没有谁能再收到这个事件了。"><a href="#2、dispatchTouchEvent-和-onTouchEvent-一旦return-true-事件就停止传递了（到达终点）（没有谁能再收到这个事件）。看下图中只要return-true事件就没再继续传下去了，对于return-true我们经常说事件被消费了，消费了的意思就是事件走到这里就是终点，不会往下传，没有谁能再收到这个事件了。" class="headerlink" title="2、dispatchTouchEvent 和 onTouchEvent 一旦return true,事件就停止传递了（到达终点）（没有谁能再收到这个事件）。看下图中只要return true事件就没再继续传下去了，对于return true我们经常说事件被消费了，消费了的意思就是事件走到这里就是终点，不会往下传，没有谁能再收到这个事件了。"></a>2、dispatchTouchEvent 和 onTouchEvent 一旦return true,事件就停止传递了（到达终点）（没有谁能再收到这个事件）。看下图中只要return true事件就没再继续传下去了，对于return true我们经常说事件被消费了，消费了的意思就是事件走到这里就是终点，不会往下传，没有谁能再收到这个事件了。</h4><p><img src="http://xdeveloper.cn/content/images/2017/04/3.png" alt="图 3."></p>
<h4 id="3、dispatchTouchEvent-和-onTouchEvent-return-false的时候事件都回传给父控件的onTouchEvent处理。"><a href="#3、dispatchTouchEvent-和-onTouchEvent-return-false的时候事件都回传给父控件的onTouchEvent处理。" class="headerlink" title="3、dispatchTouchEvent 和 onTouchEvent return false的时候事件都回传给父控件的onTouchEvent处理。"></a>3、dispatchTouchEvent 和 onTouchEvent return false的时候事件都回传给父控件的onTouchEvent处理。</h4><p><img src="http://xdeveloper.cn/content/images/2017/04/4.png" alt="图 4."></p>
<p>看上图深蓝色的线，对于返回false的情况，事件都是传给父控件onTouchEvent处理。</p>
<ul>
<li><p>对于dispatchTouchEvent 返回 false 的含义应该是：事件停止往子View传递和分发同时开始往父控件回溯（父控件的onTouchEvent开始从下往上回传直到某个onTouchEvent return true），事件分发机制就像递归，return false 的意义就是递归停止然后开始回溯。</p>
</li>
<li><p>对于onTouchEvent return false 就比较简单了，它就是不消费事件，并让事件继续往父控件的方向从下往上流动。</p>
</li>
</ul>
<h4 id="4、dispatchTouchEvent、onTouchEvent、onInterceptTouchEvent-ViewGroup-和View的这些方法的默认实现就是会让整个事件安装U型完整走完，所以-return-super-xxxxxx-就会让事件依照U型的方向的完整走完整个事件流动路径），中间不做任何改动，不回溯、不终止，每个环节都走到。"><a href="#4、dispatchTouchEvent、onTouchEvent、onInterceptTouchEvent-ViewGroup-和View的这些方法的默认实现就是会让整个事件安装U型完整走完，所以-return-super-xxxxxx-就会让事件依照U型的方向的完整走完整个事件流动路径），中间不做任何改动，不回溯、不终止，每个环节都走到。" class="headerlink" title="4、dispatchTouchEvent、onTouchEvent、onInterceptTouchEvent ViewGroup 和View的这些方法的默认实现就是会让整个事件安装U型完整走完，所以 return super.xxxxxx() 就会让事件依照U型的方向的完整走完整个事件流动路径），中间不做任何改动，不回溯、不终止，每个环节都走到。"></a>4、dispatchTouchEvent、onTouchEvent、onInterceptTouchEvent ViewGroup 和View的这些方法的默认实现就是会让整个事件安装U型完整走完，所以 return super.xxxxxx() 就会让事件依照U型的方向的完整走完整个事件流动路径），中间不做任何改动，不回溯、不终止，每个环节都走到。</h4><p><img src="http://xdeveloper.cn/content/images/2017/04/5.png" alt="图 5."></p>
<p>所以如果看到方法return super.xxxxx() 那么事件的下一个流向就是走U型下一个目标，稍微记住上面这张图，你就能很快判断出下一个走向是哪个控件的哪个函数。</p>
<h4 id="5、onInterceptTouchEvent-的作用"><a href="#5、onInterceptTouchEvent-的作用" class="headerlink" title="5、onInterceptTouchEvent 的作用"></a>5、onInterceptTouchEvent 的作用</h4><p><img src="http://xdeveloper.cn/content/images/2017/04/6.png" alt="图 6."></p>
<ul>
<li><p>Intercept 的意思就拦截，每个ViewGroup每次在做分发的时候，问一问拦截器要不要拦截（也就是问问自己这个事件要不要自己来处理）如果要自己处理那就在onInterceptTouchEvent方法中 return true就会交给自己的onTouchEvent的处理，如果不拦截就是继续往子控件往下传。</p>
</li>
<li><p>默认是不会去拦截的，因为子View也需要这个事件，所以onInterceptTouchEvent拦截器return super.onInterceptTouchEvent()和return false是一样的，是不会拦截的，事件会继续往子View的dispatchTouchEvent传递。</p>
</li>
</ul>
<h4 id="6、ViewGroup-和View-的dispatchTouchEvent方法返回super-dispatchTouchEvent-的时候事件流走向。"><a href="#6、ViewGroup-和View-的dispatchTouchEvent方法返回super-dispatchTouchEvent-的时候事件流走向。" class="headerlink" title="6、ViewGroup 和View 的dispatchTouchEvent方法返回super.dispatchTouchEvent()的时候事件流走向。"></a>6、ViewGroup 和View 的dispatchTouchEvent方法返回super.dispatchTouchEvent()的时候事件流走向。</h4><p><img src="http://xdeveloper.cn/content/images/2017/04/7.png" alt="图 7."></p>
<ul>
<li><p>首先看下ViewGroup 的dispatchTouchEvent，之前说的return true是终结传递。return false 是回溯到父View的onTouchEvent，然后ViewGroup怎样通过dispatchTouchEvent方法能把事件分发到自己的onTouchEvent处理呢，return true和false 都不行，那么只能通过Interceptor把事件拦截下来给自己的onTouchEvent，所以ViewGroup dispatchTouchEvent方法的super默认实现就是去调用onInterceptTouchEvent，记住这一点。</p>
</li>
<li><p>那么对于View的dispatchTouchEvent return super.dispatchTouchEvent()的时候呢事件会传到哪里呢，很遗憾View没有拦截器。但是同样的道理return true是终结。return false 是回溯会父类的onTouchEvent，怎样把事件分发给自己的onTouchEvent 处理呢，那只能return super.dispatchTouchEvent,View类的dispatchTouchEvent（）方法默认实现就是能帮你调用View自己的onTouchEvent方法的。</p>
</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>说了这么多，不知道有说清楚没有，我这边最后总结一下：</p>
<ul>
<li>对于 dispatchTouchEvent，onTouchEvent，return true是终结事件传递。return false 是回溯到父View的onTouchEvent方法。</li>
<li>ViewGroup 想把自己分发给自己的onTouchEvent，需要拦截器onInterceptTouchEvent方法return true 把事件拦截下来。</li>
<li>ViewGroup 的拦截器onInterceptTouchEvent 默认是不拦截的，所以return super.onInterceptTouchEvent()=return false；</li>
<li>View 没有拦截器，为了让View可以把事件分发给自己的onTouchEvent，View的dispatchTouchEvent默认实现（super）就是把事件分发给自己的onTouchEvent。<br>ViewGroup和View 的dispatchTouchEvent 是做事件分发，那么这个事件可能分发出去的四个目标: <h3 id="注：——-gt-后面代表事件目标需要怎么做。"><a href="#注：——-gt-后面代表事件目标需要怎么做。" class="headerlink" title="注：——&gt; 后面代表事件目标需要怎么做。"></a>注：——&gt; 后面代表事件目标需要怎么做。</h3></li>
</ul>
<ol>
<li>自己消费，终结传递。——-&gt;return true ；</li>
<li>给自己的onTouchEvent处理——-&gt; 调用super.dispatchTouchEvent()系统默认会去调用 onInterceptTouchEvent，在onInterceptTouchEvent return true就会去把事件分给自己的onTouchEvent处理。</li>
<li>传给子View——&gt;调用super.dispatchTouchEvent()默认实现会去调用 onInterceptTouchEvent 在onInterceptTouchEvent return false，就会把事件传给子类。</li>
<li>不传给子View，事件终止往下传递，事件开始回溯，从父View的onTouchEvent开始事件从下到上回归执行每个控件的onTouchEvent——-&gt;return false；</li>
</ol>
<h4 id="注：-由于View没有子View所以不需要onInterceptTouchEvent-来控件是否把事件传递给子View还是拦截，所以View的事件分发调用super-dispatchTouchEvent-的时候默认把事件传给自己的onTouchEvent处理（相当于拦截），对比ViewGroup的dispatchTouchEvent-事件分发，View的事件分发没有上面提到的4个目标的第3点。"><a href="#注：-由于View没有子View所以不需要onInterceptTouchEvent-来控件是否把事件传递给子View还是拦截，所以View的事件分发调用super-dispatchTouchEvent-的时候默认把事件传给自己的onTouchEvent处理（相当于拦截），对比ViewGroup的dispatchTouchEvent-事件分发，View的事件分发没有上面提到的4个目标的第3点。" class="headerlink" title="注： 由于View没有子View所以不需要onInterceptTouchEvent 来控件是否把事件传递给子View还是拦截，所以View的事件分发调用super.dispatchTouchEvent()的时候默认把事件传给自己的onTouchEvent处理（相当于拦截），对比ViewGroup的dispatchTouchEvent 事件分发，View的事件分发没有上面提到的4个目标的第3点。"></a>注： 由于View没有子View所以不需要onInterceptTouchEvent 来控件是否把事件传递给子View还是拦截，所以View的事件分发调用super.dispatchTouchEvent()的时候默认把事件传给自己的onTouchEvent处理（相当于拦截），对比ViewGroup的dispatchTouchEvent 事件分发，View的事件分发没有上面提到的4个目标的第3点。</h4><p>ViewGroup和View的onTouchEvent方法是做事件处理的，那么这个事件只能有两个处理方式： </p>
<ol>
<li>自己消费掉，事件终结，不再传给谁—–&gt;return true; </li>
<li>继续从下往上传，不消费事件，让父View也能收到到这个事件—–&gt;return false;View的默认实现是不消费的。所以superfalse。</li>
</ol>
<p>ViewGroup的onInterceptTouchEvent方法对于事件有两种情况： </p>
<ol>
<li>拦截下来，给自己的onTouchEvent处理—&gt;return true; </li>
<li>不拦截，把事件往下传给子View—-&gt;return false,ViewGroup默认是不拦截的，所以superfalse；</li>
</ol>
<h3 id="关于ACTIONMOVE-和-ACTIONUP"><a href="#关于ACTIONMOVE-和-ACTIONUP" class="headerlink" title="关于ACTIONMOVE 和 ACTIONUP"></a>关于ACTIONMOVE 和 ACTIONUP</h3><p>上面讲解的都是针对ACTIONDOWN的事件传递，ACTIONMOVE和ACTIONUP在传递的过程中并不是和ACTIONDOWN 一样，你在执行ACTIONDOWN的时候返回了false，后面一系列其它的action就不会再得到执行了。简单的说，就是当dispatchTouchEvent在进行事件分发的时候，只有前一个事件（如ACTIONDOWN）返回true，才会收到ACTIONMOVE和ACTIONUP的事件。具体这句话很多博客都说了，但是具体含义是什么呢？我们来看一下下面的具体分析。</p>
<p>上面提到过了，事件如果不被打断的话是会不断往下传到叶子层（View），然后又不断回传到Activity，dispatchTouchEvent 和 onTouchEvent 可以通过return true 消费事件，终结事件传递，而onInterceptTouchEvent 并不能消费事件，它相当于是一个分叉口起到分流导流的作用，ACTIONMOVE和ACTIONUP 会在哪些函数被调用，之前说了并不是哪个函数收到了ACTIONDOWN，就会收到 ACTIONMOVE 等后续的事件的。 下面通过几张图看看不同场景下，ACTIONMOVE事件和ACTIONUP事件的具体走向并总结一下规律。</p>
<h4 id="1、我们在ViewGroup1-的dispatchTouchEvent-方法返回true消费这次事件"><a href="#1、我们在ViewGroup1-的dispatchTouchEvent-方法返回true消费这次事件" class="headerlink" title="1、我们在ViewGroup1 的dispatchTouchEvent 方法返回true消费这次事件"></a>1、我们在ViewGroup1 的dispatchTouchEvent 方法返回true消费这次事件</h4><p>ACTIONDOWN 事件从（Activity的dispatchTouchEvent）——–&gt; （ViewGroup1 的dispatchTouchEvent） 后结束传递，事件被消费（如下图红色的箭头代码ACTIONDOWN 事件的流向）。</p>
<pre><code>//打印日志
Activity | dispatchTouchEvent --&gt; ACTION_DOWN  
ViewGroup1 | dispatchTouchEvent --&gt; ACTION_DOWN  
----&gt;消费
</code></pre><p><img src="http://xdeveloper.cn/content/images/2017/04/8.png" alt="图 8."></p>
<p>在这种场景下ACTIONMOVE和ACTIONUP 将如何呢，看下面的打出来的日志</p>
<pre><code>Activity | dispatchTouchEvent --&gt; ACTION_MOVE  
ViewGroup1 | dispatchTouchEvent --&gt; ACTION_MOVE  
----
TouchEventActivity | dispatchTouchEvent --&gt; ACTION_UP  
ViewGroup1 | dispatchTouchEvent --&gt; ACTION_UP  
</code></pre><p>下图中 红色的箭头代表ACTIONDOWN 事件的流向 蓝色的箭头代表ACTIONMOVE 和 ACTION_UP 事件的流向</p>
<p><img src="http://xdeveloper.cn/content/images/2017/04/9.png" alt="图 9."></p>
<h4 id="2、我们在ViewGroup2-的dispatchTouchEvent-返回true消费这次事件"><a href="#2、我们在ViewGroup2-的dispatchTouchEvent-返回true消费这次事件" class="headerlink" title="2、我们在ViewGroup2 的dispatchTouchEvent 返回true消费这次事件"></a>2、我们在ViewGroup2 的dispatchTouchEvent 返回true消费这次事件</h4><blockquote>
<p>Activity | dispatchTouchEvent –&gt; ACTION_DOWN<br>ViewGroup1 | dispatchTouchEvent –&gt; ACTION_DOWN<br>ViewGroup1 | onInterceptTouchEvent –&gt; ACTION_DOWN<br>ViewGroup2 | dispatchTouchEvent –&gt; ACTION_DOWN<br>—-&gt;消费<br>Activity | dispatchTouchEvent –&gt; ACTION_MOVE<br>ViewGroup1 | dispatchTouchEvent –&gt; ACTION_MOVE<br>ViewGroup1 | onInterceptTouchEvent –&gt; ACTION_MOVE  </p>
<h2 id="ViewGroup2-dispatchTouchEvent-–-gt-ACTION-MOVE"><a href="#ViewGroup2-dispatchTouchEvent-–-gt-ACTION-MOVE" class="headerlink" title="ViewGroup2 | dispatchTouchEvent –&gt; ACTION_MOVE  "></a>ViewGroup2 | dispatchTouchEvent –&gt; ACTION_MOVE  </h2><p>TouchEventActivity | dispatchTouchEvent –&gt; ACTION_UP<br>ViewGroup1 | dispatchTouchEvent –&gt; ACTION_UP<br>ViewGroup1 | onInterceptTouchEvent –&gt; ACTION_UP  </p>
<h2 id="ViewGroup2-dispatchTouchEvent-–-gt-ACTION-UP"><a href="#ViewGroup2-dispatchTouchEvent-–-gt-ACTION-UP" class="headerlink" title="ViewGroup2 | dispatchTouchEvent –&gt; ACTION_UP  "></a>ViewGroup2 | dispatchTouchEvent –&gt; ACTION_UP  </h2></blockquote>
<p>红色的箭头代表ACTIONDOWN 事件的流向<br>蓝色的箭头代表ACTIONMOVE 和 ACTION_UP 事件的流向</p>
<p><img src="http://xdeveloper.cn/content/images/2017/04/10.png" alt="图 10."></p>
<h4 id="3、我们在View-的dispatchTouchEvent-返回true消费这次事件"><a href="#3、我们在View-的dispatchTouchEvent-返回true消费这次事件" class="headerlink" title="3、我们在View 的dispatchTouchEvent 返回true消费这次事件"></a>3、我们在View 的dispatchTouchEvent 返回true消费这次事件</h4><p>这个我不就画图了，效果和在ViewGroup2 的dispatchTouchEvent return true的差不多，同样的收到ACTIONDOWN 的dispatchTouchEvent函数都能收到 ACTIONMOVE和ACTIONUP。 所以我们就基本可以得出结论如果在某个控件的dispatchTouchEvent 返回true消费终结事件，那么收到ACTIONDOWN 的函数也能收到 ACTIONMOVE和ACTIONUP。</p>
<h4 id="4、我们在View-的onTouchEvent-返回true消费这次事件"><a href="#4、我们在View-的onTouchEvent-返回true消费这次事件" class="headerlink" title="4、我们在View 的onTouchEvent 返回true消费这次事件"></a>4、我们在View 的onTouchEvent 返回true消费这次事件</h4><p>红色的箭头代表ACTIONDOWN 事件的流向<br>蓝色的箭头代表ACTIONMOVE 和 ACTION_UP 事件的流向</p>
<p><img src="http://xdeveloper.cn/content/images/2017/04/11.png" alt="图 11."></p>
<h4 id="5、我们在ViewGroup-2-的onTouchEvent-返回true消费这次事件"><a href="#5、我们在ViewGroup-2-的onTouchEvent-返回true消费这次事件" class="headerlink" title="5、我们在ViewGroup 2 的onTouchEvent 返回true消费这次事件"></a>5、我们在ViewGroup 2 的onTouchEvent 返回true消费这次事件</h4><p>红色的箭头代表ACTIONDOWN 事件的流向<br>蓝色的箭头代表ACTIONMOVE 和 ACTION_UP 事件的流向 </p>
<p><img src="http://xdeveloper.cn/content/images/2017/04/12.png" alt="图 12."></p>
<h4 id="6、我们在ViewGroup-1-的onTouchEvent-返回true消费这次事件"><a href="#6、我们在ViewGroup-1-的onTouchEvent-返回true消费这次事件" class="headerlink" title="6、我们在ViewGroup 1 的onTouchEvent 返回true消费这次事件"></a>6、我们在ViewGroup 1 的onTouchEvent 返回true消费这次事件</h4><p>红色的箭头代表ACTIONDOWN 事件的流向<br>蓝色的箭头代表ACTIONMOVE 和 ACTION_UP 事件的流向</p>
<p><img src="http://xdeveloper.cn/content/images/2017/04/13.png" alt="图 13."></p>
<h4 id="7、我们在Activity-的onTouchEvent-返回true消费这次事件"><a href="#7、我们在Activity-的onTouchEvent-返回true消费这次事件" class="headerlink" title="7、我们在Activity 的onTouchEvent 返回true消费这次事件"></a>7、我们在Activity 的onTouchEvent 返回true消费这次事件</h4><p>红色的箭头代表ACTIONDOWN 事件的流向<br>蓝色的箭头代表ACTIONMOVE 和 ACTION_UP 事件的流向</p>
<p><img src="http://xdeveloper.cn/content/images/2017/04/14.png" alt="图 14."></p>
<h4 id="8、我们在View的dispatchTouchEvent-返回false并且Activity-的onTouchEvent-返回true消费这次事件"><a href="#8、我们在View的dispatchTouchEvent-返回false并且Activity-的onTouchEvent-返回true消费这次事件" class="headerlink" title="8、我们在View的dispatchTouchEvent 返回false并且Activity 的onTouchEvent 返回true消费这次事件"></a>8、我们在View的dispatchTouchEvent 返回false并且Activity 的onTouchEvent 返回true消费这次事件</h4><p>红色的箭头代表ACTIONDOWN 事件的流向<br>蓝色的箭头代表ACTIONMOVE 和 ACTION_UP 事件的流向</p>
<p><img src="http://xdeveloper.cn/content/images/2017/04/15.png" alt="图 15."></p>
<h4 id="9、我们在View的dispatchTouchEvent-返回false并且ViewGroup-1-的onTouchEvent-返回true消费这次事件"><a href="#9、我们在View的dispatchTouchEvent-返回false并且ViewGroup-1-的onTouchEvent-返回true消费这次事件" class="headerlink" title="9、我们在View的dispatchTouchEvent 返回false并且ViewGroup 1 的onTouchEvent 返回true消费这次事件"></a>9、我们在View的dispatchTouchEvent 返回false并且ViewGroup 1 的onTouchEvent 返回true消费这次事件</h4><p>红色的箭头代表ACTIONDOWN 事件的流向<br>蓝色的箭头代表ACTIONMOVE 和 ACTION_UP 事件的流向</p>
<p><img src="http://xdeveloper.cn/content/images/2017/04/16.png" alt="图 16."></p>
<h4 id="10、我们在View的dispatchTouchEvent-返回false并且在ViewGroup-2-的onTouchEvent-返回true消费这次事件"><a href="#10、我们在View的dispatchTouchEvent-返回false并且在ViewGroup-2-的onTouchEvent-返回true消费这次事件" class="headerlink" title="10、我们在View的dispatchTouchEvent 返回false并且在ViewGroup 2 的onTouchEvent 返回true消费这次事件"></a>10、我们在View的dispatchTouchEvent 返回false并且在ViewGroup 2 的onTouchEvent 返回true消费这次事件</h4><p>红色的箭头代表ACTIONDOWN 事件的流向<br>蓝色的箭头代表ACTIONMOVE 和 ACTION_UP 事件的流向</p>
<p><img src="http://xdeveloper.cn/content/images/2017/04/17.png" alt="图 17."></p>
<h4 id="11、我们在ViewGroup2的dispatchTouchEvent-返回false并且在ViewGroup1-的onTouchEvent返回true消费这次事件"><a href="#11、我们在ViewGroup2的dispatchTouchEvent-返回false并且在ViewGroup1-的onTouchEvent返回true消费这次事件" class="headerlink" title="11、我们在ViewGroup2的dispatchTouchEvent 返回false并且在ViewGroup1 的onTouchEvent返回true消费这次事件"></a>11、我们在ViewGroup2的dispatchTouchEvent 返回false并且在ViewGroup1 的onTouchEvent返回true消费这次事件</h4><p>红色的箭头代表ACTIONDOWN 事件的流向<br>蓝色的箭头代表ACTIONMOVE 和 ACTION_UP 事件的流向</p>
<p><img src="http://xdeveloper.cn/content/images/2017/04/18.png" alt="图 18."></p>
<h4 id="12、我们在ViewGroup2的onInterceptTouchEvent-返回true拦截此次事件并且在ViewGroup-1-的onTouchEvent返回true消费这次事件。"><a href="#12、我们在ViewGroup2的onInterceptTouchEvent-返回true拦截此次事件并且在ViewGroup-1-的onTouchEvent返回true消费这次事件。" class="headerlink" title="12、我们在ViewGroup2的onInterceptTouchEvent 返回true拦截此次事件并且在ViewGroup 1 的onTouchEvent返回true消费这次事件。"></a>12、我们在ViewGroup2的onInterceptTouchEvent 返回true拦截此次事件并且在ViewGroup 1 的onTouchEvent返回true消费这次事件。</h4><p>红色的箭头代表ACTIONDOWN 事件的流向<br>蓝色的箭头代表ACTIONMOVE 和 ACTION_UP 事件的流向</p>
<p><img src="http://xdeveloper.cn/content/images/2017/04/19.png" alt="图 19."></p>
<p>一下子画了好多图，还有好几种情况就不再画了，相信你也看出规律了，对于在onTouchEvent消费事件的情况：在哪个View的onTouchEvent 返回true，那么ACTIONMOVE和ACTIONUP的事件从上往下传到这个View后就不再往下传递了，而直接传给自己的onTouchEvent 并结束本次事件传递过程。</p>
<p>对于ACTIONMOVE、ACTIONUP总结：ACTIONDOWN事件在哪个控件消费了（return true）， 那么ACTIONMOVE和ACTIONUP就会从上往下（通过dispatchTouchEvent）做事件分发往下传，就只会传到这个控件，不会继续往下传，如果ACTIONDOWN事件是在dispatchTouchEvent消费，那么事件到此为止停止传递，如果ACTIONDOWN事件是在onTouchEvent消费的，那么会把ACTIONMOVE或ACTION_UP事件传给该控件的onTouchEvent处理并结束传递。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android开发神器 ： Android Studio 插件 大集结！]]></title>
      <url>https://github.com/pangrongxian/2016/10/03/as01/</url>
      <content type="html"><![CDATA[<p>标注:本文在Windows环境下进行</p>
<h1 id="GsonFormat"><a href="#GsonFormat" class="headerlink" title="GsonFormat"></a>GsonFormat</h1><h4 id="GitHub：GsonFormat"><a href="#GitHub：GsonFormat" class="headerlink" title="GitHub：GsonFormat"></a><a href="https://github.com/zzz40500/GsonFormat">GitHub：GsonFormat</a></h4><p>GsonFormat 说是开发中最常用的Android Studio插件绝不为过！</p>
<p>绝大多数的服务端都以json数据格式返回，而客户端需要根据api接口生成相应的实体类，这个插件</p>
<p>把这个过程自动化了，省了我们很多功夫不是！</p>
<p>GsonFormat生成实体类 的 快捷键 是： Alt + S 或者 Alt + Insert 也可以。</p>
<ul>
<li>1.首先在浏览器打开一条接口，然后使用 <a href="http://json.cn/" target="_blank" rel="external">json.cn</a> 把接口数据显示出来看看</li>
<li>2.Ctrl + A 全选接口数据，Ctrl + C 复制</li>
<li>3.回到Android Studio，Alt + S 快捷键弹出一个框框，然后 Ctrl + V 把刚刚复制的内容粘贴进去，点击OK即可生成你想要的数据接口的实体，是不是很酷啊！</li>
</ul>
<p><img src="https://github.com/pangrongxian/PhotoResour/blob/master/res/GsonFormat.gif?raw=true.gif" alt=""></p>
<h1 id="android-butterknife-zelezny"><a href="#android-butterknife-zelezny" class="headerlink" title="android-butterknife-zelezny"></a>android-butterknife-zelezny</h1><h4 id="GitHub-ButterKnife"><a href="#GitHub-ButterKnife" class="headerlink" title="GitHub-ButterKnife"></a><a href="https://github.com/JakeWharton/butterknife">GitHub-ButterKnife</a></h4><ul>
<li>android-butterknife-zelezny是根据butterknife定制的一款插件，能够方便快速初始化布局控件，再也不用手动 findViewById 了。</li>
</ul>
<h5 id="安装"><a href="#安装" class="headerlink" title="安装 :"></a>安装 :</h5><ul>
<li><p>如何安装Android Studio的插件：<br>以下以安装 android-butterknife-zelezny 为例子，其他的插件也是一样的安装步骤。</p>
</li>
<li><p><strong>File Setting —&gt; Plugins  —&gt; Browse repositories</strong> ,然后在输入框输入要安装的插件名称，点击Install即可安装，<br>安装完之后按照提示重启AS便可使用。</p>
</li>
</ul>
<p><img src="https://github.com/pangrongxian/PhotoResour/blob/master/res/butterknife.png?raw=true.png" alt=""></p>
<p><img src="https://github.com/pangrongxian/PhotoResour/blob/master/res/butterknife.gif?raw=true.gif" alt=""></p>
<h5 id="使用"><a href="#使用" class="headerlink" title="使用 :"></a>使用 :</h5><p><img src="https://github.com/pangrongxian/PhotoResour/blob/master/res/butterknife02.gif?raw=true" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[世界，你好！]]></title>
      <url>https://github.com/pangrongxian/2016/08/16/hi/</url>
      <content type="html"><![CDATA[<h2 id="世界，你好"><a href="#世界，你好" class="headerlink" title="世界，你好~"></a>世界，你好~</h2><p><strong>小先的杂货店</strong>   在思域车上等到天亮 , 只为去远方见你一面 （点击右上角 Follower Me）</p>
<h3 id="This-is-my-first-blog"><a href="#This-is-my-first-blog" class="headerlink" title="This is my first blog"></a>This is my first blog</h3><a id="more"></a>
<p><img src="http://pic.baike.soso.com/p/20131122/20131122195404-381445545.jpg" alt=""></p>
<ul>
<li>大都会に　仆はもう一人で</li>
<li>投げ舍てられた　空カンのようだ</li>
<li>互いのすべてを　知りつくすまでが</li>
<li>爱ならば　いっそ　永久に眠ろうか</li>
<li>世界が终るまでは　离れる事もない</li>
<li>そう愿っていた　几千の夜と</li>
<li>戾らない时だけが　何故辉いては</li>
<li>やつれ切った　心までも　坏す</li>
<li>はかなき思い　このTragedy Night</li>
<li>そして人は　答えを求めて</li>
<li>かけがえのない　何かを失う</li>
<li>欲望だらけの　街じゃ　夜空の</li>
<li>星屑も　仆らを　灯せない</li>
<li>世界が终る前に　闻かせておくれよ</li>
<li>满开の花が　似合いのCatastrophe</li>
<li>谁もが望みながら　永远を信じない</li>
<li>なのに　きっと　明日を梦见てる</li>
<li>はかなき日々と　このTragedy Night</li>
<li>世界が终るまでは　离れる事もない</li>
<li>そう愿っていた　几千の夜と</li>
<li>戾らない时だけが　何故辉いては</li>
<li>やつれ切った　心までも　坏す</li>
<li>はかなき思い　このTragedy Night*</li>
</ul>
<h3 id="中文翻译"><a href="#中文翻译" class="headerlink" title="中文翻译"></a>中文翻译</h3><ul>
<li>孤身一人 彷徨在大都市</li>
<li>就像被人丢弃的空啤酒罐</li>
<li>如果非要探究彼此的一切</li>
<li>才叫爱的话 还不如永久长眠</li>
<li>直到世界的尽头 也不愿与你分离</li>
<li>曾在千万个夜晚许下心愿</li>
<li>一去不回的时光 为何却如此耀眼</li>
<li>对憔悴不堪的心落井下石</li>
<li>渺茫的思念 在这个悲剧的夜</li>
<li>而人们总是追求表面答案</li>
<li>结果错失无可取代的宝物</li>
<li>在这充斥着欲望的街头</li>
<li>就连夜空繁星也难以照亮我们</li>
<li>在世界结束之前 谁愿给我讲一个</li>
<li>与繁花盛开最贴切的不幸</li>
<li>谁都满怀着期望 却又不相信永远</li>
<li>…可是也一定梦想着明天</li>
<li>短暂的时光 在这悲剧的夜晚</li>
<li>直到世界的尽头 也不愿与你分离</li>
<li>曾在千万个夜晚许下心愿</li>
<li>一去不回的时光 为何却如此耀眼</li>
<li>对憔悴不堪的心落井下石</li>
<li>渺茫的思念 在这悲剧的夜晚</li>
<li>这悲剧的夜晚</li>
</ul>
<h3 id="See-you-again"><a href="#See-you-again" class="headerlink" title="See you again"></a>See you again</h3><p><em>《直到世界终结》是一首触动人心的背景音乐，<br>是为《灌篮高手》之中人物三井寿所创作的歌曲。在翔阳的比赛中，三井在应对长谷川一志时体力近乎崩溃。但他想起国中的那场决赛，想到安西教练的那番话：“你现在放弃就等于比赛提前结束。”想到他也是坚持到最后才取得了胜利。此时，他又重燃斗志。<br>他看着身边的队友，回忆起就在不久前，沉沦的他带着不良伙伴闯入球馆对他们所做的一幕幕，后悔不已—–“我是一无是处的笨蛋”。此时又响起了《直到世界终结》，这幕回忆整整持续了5分钟——也就是整首歌唱全的时间。虽说动画片里这种回忆有时候会让人觉得很冗长，不过这里的回忆真的很感人。当《直到世界终结》第一个音节响起的时候，回忆之窗就打开了，在很多场比赛，三井都有过疯狂的连投三分球成功的光辉历史。安西教练曾对他说过“有你在真好”。《灌篮高手》成功不仅仅是剧情和人物性格的光辉所致，也少不了《直到世界终结》这样优秀BGM的完美衬托。</em></p>
<h3 id="Music"><a href="#Music" class="headerlink" title="Music"></a>Music</h3><p>[音乐]<a href="http://bd.kuwo.cn/yinyue/5075468?from=baidu" target="_blank" rel="external">http://bd.kuwo.cn/yinyue/5075468?from=baidu</a></p>
]]></content>
    </entry>
    
  
  
</search>
