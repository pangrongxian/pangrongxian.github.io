<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Android 进阶到高级 - 突破篇]]></title>
      <url>https://github.com/pangrongxian/2017/07/17/Android%20%E8%BF%9B%E9%98%B6%E5%88%B0%E9%AB%98%E7%BA%A7%20-%20%E7%AA%81%E7%A0%B4%E7%AF%87/</url>
      <content type="html"><![CDATA[<h1 id="Android-进阶（中级）篇"><a href="#Android-进阶（中级）篇" class="headerlink" title="Android 进阶（中级）篇"></a>Android 进阶（中级）篇</h1><h2 id="Android-自定义View"><a href="#Android-自定义View" class="headerlink" title="Android 自定义View"></a>Android 自定义View</h2><p><a href="http://hencoder.com/ui-1-1/" target="_blank" rel="external">HenCoder Android 开发进阶: 自定义 View 1-1 绘制基础</a></p>
<p><a href="http://blog.csdn.net/u011733020/article/details/50849475" target="_blank" rel="external">View的简介</a></p>
<p><a href="http://blog.csdn.net/mr_immortalz/article/details/51168278" target="_blank" rel="external">那些你应该知道却不一定知道的——View坐标分析汇总</a></p>
<p><a href="http://blog.csdn.net/yanbober/article/details/50419117" target="_blank" rel="external">Android应用坐标系统全面详解</a></p>
<p><a href="http://blog.csdn.net/guolin_blog/article/details/12921889" target="_blank" rel="external">Android LayoutInflater原理分析，带你一步步深入了解View(一)</a></p>
<p><a href="http://blog.csdn.net/guolin_blog/article/details/16330267" target="_blank" rel="external">Android视图绘制流程完全解析，带你一步步深入了解View(二)</a></p>
<p><a href="http://blog.csdn.net/yanbober/article/details/45970721" target="_blank" rel="external">Android应用setContentView与LayoutInflater加载解析机制源码分析</a></p>
<p><a href="http://www.jianshu.com/p/8a7d059da746" target="_blank" rel="external">Android中RelativeLayout和LinearLayout性能分析</a></p>
<p><a href="http://blog.csdn.net/lmj623565791/article/details/41894125" target="_blank" rel="external">Android 源码解析 之 setContentView</a></p>
<p><a href="http://blog.csdn.net/yanbober/article/details/46128379" target="_blank" rel="external">Android应用层View绘制流程与源码分析</a></p>
<h2 id="Android-事件分发机制"><a href="#Android-事件分发机制" class="headerlink" title="Android 事件分发机制"></a>Android 事件分发机制</h2><p><a href="https://pangrongxian.github.io/2016/08/15/Android%20%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%E6%9C%BA%E5%88%B6/" target="_blank" rel="external">图解 Android 事件分发机制</a></p>
<h3 id="郭神的两篇："><a href="#郭神的两篇：" class="headerlink" title="郭神的两篇："></a>郭神的两篇：</h3><p><a href="">Android事件分发机制完全解析，带你从源码的角度彻底理解(上)</a></p>
<p><a href="">Android事件分发机制完全解析，带你从源码的角度彻底理解(下)</a></p>
<h3 id="鸿神的两篇："><a href="#鸿神的两篇：" class="headerlink" title="鸿神的两篇："></a>鸿神的两篇：</h3><p><a href="">Android View 事件分发机制 源码解析 （上）</a></p>
<p><a href="">Android ViewGroup事件分发机制</a></p>
<p><a href="">可能是讲解Android事件分发最好的文章</a></p>
<p><a href="http://blog.csdn.net/yanbober/article/details/45887547" target="_blank" rel="external"> Android触摸屏事件派发机制详解与源码分析一(View篇)</a></p>
<p><a href="http://blog.csdn.net/yanbober/article/details/45912661" target="_blank" rel="external">Android触摸屏事件派发机制详解与源码分析二(ViewGroup篇)</a></p>
<p><a href="http://blog.csdn.net/yanbober/article/details/45932123" target="_blank" rel="external">Android触摸屏事件派发机制详解与源码分析三(Activity篇)</a></p>
<h3 id="Handler-消息处理机制"><a href="#Handler-消息处理机制" class="headerlink" title="Handler 消息处理机制"></a>Handler 消息处理机制</h3><p><a href="http://www.jianshu.com/p/02962454adf7" target="_blank" rel="external">Android 消息处理机制（Looper、Handler、MessageQueue,Message）</a></p>
<p><a href="http://blog.csdn.net/lmj623565791/article/details/38377229" target="_blank" rel="external">Android 异步消息处理机制 让你深入理解 Looper、Handler、Message三者关系</a></p>
<p><a href="http://www.jianshu.com/p/e04698eaba88" target="_blank" rel="external">Handler 和他的小伙伴们（上）</a></p>
<p><a href="http://www.jianshu.com/p/1d03fe0b285c" target="_blank" rel="external">Handler 和他的小伙伴们（中）</a></p>
<p><a href="http://www.jianshu.com/p/d282c8ddd855" target="_blank" rel="external">Handler 和他的小伙伴们（下）</a></p>
<h3 id="Android-Material-Design"><a href="#Android-Material-Design" class="headerlink" title="Android Material Design"></a>Android Material Design</h3><p><a href="http://www.materialdoc.cn/#content" target="_blank" rel="external">Material Design 开发者参考文档</a></p>
<p><a href="https://pangrongxian.github.io/2017/01/08/%E6%9C%80%E5%85%A8%E9%9D%A2%E7%9A%84%20Material%20Design%20%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/" target="_blank" rel="external">最全面的 Material Design 学习资料</a></p>
<h3 id="Android-内存泄漏"><a href="#Android-内存泄漏" class="headerlink" title="Android 内存泄漏"></a>Android 内存泄漏</h3><p><a href="https://pangrongxian.github.io/2016/01/11/LeakCanary%E8%AE%A9%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E6%97%A0%E6%89%80%E9%81%81%E5%BD%A2/" target="_blank" rel="external">LeakCanary让内存泄露无所遁形</a></p>
<p><a href="https://pangrongxian.github.io/2016/01/15/LeakCanary%20%E4%B8%AD%E6%96%87%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/" target="_blank" rel="external">LeakCanary 中文使用说明</a></p>
<p><a href="https://pangrongxian.github.io/2016/01/18/Android%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%B9%8B%E5%88%A9%E7%94%A8LeakCanary%E6%A3%80%E6%B5%8B%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E5%8F%8A%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/" target="_blank" rel="external">Android性能优化之利用LeakCanary检测内存泄漏及解决办法</a></p>
<h3 id="Android-App界面卡顿原因"><a href="#Android-App界面卡顿原因" class="headerlink" title="Android App界面卡顿原因"></a>Android App界面卡顿原因</h3><p><a href="https://github.com/markzhai/AndroidPerformanceMonitor"> BlockCanary</a></p>
<p><a href="https://github.com/seiginonakama/BlockCanaryEx">BlockCanaryEx</a></p>
<p><a href="http://blog.csdn.net/imuhao/article/details/51702243" target="_blank" rel="external">找出造成Android App界面卡顿的原因- BlockCanary</a></p>
<p><a href="http://www.jianshu.com/p/1fb065c806e6" target="_blank" rel="external">Android App优化之消除卡顿</a></p>
<h3 id="Android-Service-工作过程"><a href="#Android-Service-工作过程" class="headerlink" title="Android Service 工作过程"></a>Android Service 工作过程</h3><p><a href="https://juejin.im/post/5914431944d904006c3fae59" target="_blank" rel="external">Android Service和IntentService知识点详细总结</a></p>
<p><a href="http://blog.csdn.net/guolin_blog/article/details/11952435" target="_blank" rel="external"> Android Service完全解析，关于服务你所需知道的一切(上)</a></p>
<h3 id="Android-数据存储的五种方式"><a href="#Android-数据存储的五种方式" class="headerlink" title="Android 数据存储的五种方式"></a>Android 数据存储的五种方式</h3><p><a href="http://www.jianshu.com/p/536ca489a7f4" target="_blank" rel="external">Android五种数据存储方式</a></p>
<h3 id="Android-SQLite-使用-（主流Android数据库框架）"><a href="#Android-SQLite-使用-（主流Android数据库框架）" class="headerlink" title="Android SQLite 使用 （主流Android数据库框架）"></a>Android SQLite 使用 （主流Android数据库框架）</h3><p><a href="http://www.jianshu.com/p/774b8df5a2fc" target="_blank" rel="external">【Android】数据存储（三） 数据库（SQLite）</a></p>
<p><a href="https://juejin.im/post/58e0d781a0bb9f0069ec08d3" target="_blank" rel="external">在 Android Studio 上调试数据库 ( SQLite )</a></p>
<p><a href="https://juejin.im/post/5958fe70f265da6c49777c94" target="_blank" rel="external">Android目前流行三方数据库ORM分析及对比</a></p>
<p><a href="http://blog.csdn.net/column/details/android-database-pro.html" target="_blank" rel="external">Android数据库高手秘籍 - 郭霖</a></p>
<p><a href="http://www.jianshu.com/p/5449656d56d2" target="_blank" rel="external">GreenDao3.0入门</a></p>
<p><a href="https://juejin.im/post/5959b5bcf265da6c4d1bb245" target="_blank" rel="external">Android ORM 框架：GreenDao 使用详解（基础篇）</a></p>
<p><a href="http://www.jianshu.com/p/28912c2f31db" target="_blank" rel="external">Realm for Android详细教程</a></p>
<hr>
<h1 id="Android-高级篇"><a href="#Android-高级篇" class="headerlink" title="Android 高级篇"></a>Android 高级篇</h1><h3 id="IPC-机制"><a href="#IPC-机制" class="headerlink" title="IPC 机制"></a>IPC 机制</h3><p><a href="https://www.zhihu.com/question/41003297/answer/89328987?from=profile_answer_card" target="_blank" rel="external">Android源码的Binder权限是如何控制？</a></p>
<p><a href="http://gityuan.com/2015/10/31/binder-prepare/" target="_blank" rel="external">Binder系列—开篇</a></p>
<h3 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h3><ul>
<li><p><a href="https://mp.weixin.qq.com/s/2MsEAR9pQfMr1Sfs7cPdWQ" target="_blank" rel="external">Android 内存优化总结&amp;实践</a></p>
</li>
<li><p><a href="https://juejin.im/post/5874bff0128fe1006b443fa0" target="_blank" rel="external">Android性能优化（一）之启动加速35%</a></p>
</li>
<li><p><a href="https://www.bignerdranch.com/blog/splash-screens-the-right-way/" target="_blank" rel="external">闪屏页正确使用方式 (英文)</a></p>
</li>
</ul>
<ul>
<li><p><a href="https://juejin.im/user/5852a52d8d6d81006593c533" target="_blank" rel="external">Android 性能优化系列 (1-12)</a></p>
</li>
<li><p><a href="http://hukai.me/android-performance-patterns-season-6/" target="_blank" rel="external">Android性能优化典范 (胡凯)</a></p>
</li>
<li><p><a href="https://www.youtube.com/playlist?list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE" target="_blank" rel="external">Android Performance Patterns- (官方出品视频)</a></p>
</li>
</ul>
<h3 id="Android-APK-瘦身"><a href="#Android-APK-瘦身" class="headerlink" title="Android APK 瘦身"></a>Android APK 瘦身</h3><ul>
<li><p><a href="http://www.jianshu.com/p/6be4f98162d7" target="_blank" rel="external">APK瘦身看这一篇文章就够了</a></p>
</li>
<li><p><a href="https://zhuanlan.zhihu.com/p/25465537" target="_blank" rel="external">Android应用瘦身，从18MB到12.5MB</a></p>
</li>
</ul>
<h3 id="Android开发方法数超过64k"><a href="#Android开发方法数超过64k" class="headerlink" title="Android开发方法数超过64k"></a>Android开发方法数超过64k</h3><ul>
<li><p><a href="http://www.jianshu.com/p/271668909cc6" target="_blank" rel="external">Android开发方法数超过64k（65k）解决办法</a></p>
</li>
<li><p><a href="https://developer.android.com/studio/build/multidex.html#about" target="_blank" rel="external">配置方法数超过 64K 的应用 (官方文档)</a></p>
</li>
<li><p><a href="https://github.com/casidiablo/multidex">multidex 库 - 使用简单、有效</a></p>
</li>
</ul>
<h3 id="Android-插件补丁（热修复）"><a href="#Android-插件补丁（热修复）" class="headerlink" title="Android 插件补丁（热修复）"></a>Android 插件补丁（热修复）</h3><p><a href="http://dev.qq.com/topic/58cd3fa02b5a75cd7d3f6e86" target="_blank" rel="external">Bugly Android热更新接入教程</a></p>
<p><a href="https://buglydevteam.github.io/2017/05/27/summary-of-bugly-android-hotfix/" target="_blank" rel="external">Bugly Android热更新总结篇</a></p>
<p><a href="https://github.com/DiyCodes/code_news/blob/master/dialy_news/2016/06/%E7%AC%AC34%E6%9C%9F%EF%BC%9AAndroid%E7%83%AD%E4%BF%AE%E5%A4%8D%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98%EF%BC%9A%E6%9D%A5%E8%87%AA%E5%BE%AE%E4%BF%A1%E3%80%81%E6%B7%98%E5%AE%9D%E3%80%81%E6%94%AF%E4%BB%98%E5%AE%9D%E3%80%81QQ%E7%A9%BA%E9%97%B4%E7%9A%84%E7%83%AD%E4%BF%AE%E5%A4%8D%E6%96%B9%E6%A1%88.md">Android热修复技术专题：来自微信、淘宝、支付宝、QQ空间的热修复方案</a></p>
<h3 id="进程保活"><a href="#进程保活" class="headerlink" title="进程保活"></a>进程保活</h3><p><a href="http://dev.qq.com/topic/57ac4a0ea374c75371c08ce8" target="_blank" rel="external">Android进程保活招式大全</a></p>
<p><a href="http://www.infoq.com/cn/articles/wechat-android-background-keep-alive" target="_blank" rel="external">微信Android客户端后台保活经验分享</a></p>
<p><a href="http://www.jianshu.com/p/63aafe3c12af#" target="_blank" rel="external">关于 Android 进程保活，你所需要知道的一切</a></p>
<p><a href="http://www.jianshu.com/p/1da4541b70ad" target="_blank" rel="external">Android进程保活的一般套路</a></p>
<p><a href="https://juejin.im/post/58cf80abb123db3f6b45525d" target="_blank" rel="external">Android进程保活-自“裁”或者耍流氓</a></p>
<p><a href="http://blog.csdn.net/cxmscb/article/details/52402813" target="_blank" rel="external">安卓开发之使用双进程守护和进程提权来实现服务进程保活</a></p>
<h3 id="缓存机制"><a href="#缓存机制" class="headerlink" title="缓存机制"></a>缓存机制</h3><p><a href="http://www.jianshu.com/p/2cd59a79ed4a" target="_blank" rel="external">Android中图片的三级缓存</a></p>
<p><a href="http://www.trinea.cn/android/android-image-cache-compare/" target="_blank" rel="external">Android 三大图片缓存原理、特性对比</a></p>
<p><a href="https://muzhi1991.gitbooks.io/android-glide-wiki/content/chapter1.html" target="_blank" rel="external">Android图片库Glide - Glide3.x 官方wiki文档</a></p>
<h3 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h3><p><a href="https://dreamerhome.github.io/2016/08/02/annotaion/" target="_blank" rel="external">一分钟秒懂注解</a></p>
<p><a href="http://www.cnblogs.com/absfree/p/5295861.html" target="_blank" rel="external">Java核心技术点之注解</a></p>
<p><a href="http://www.jianshu.com/p/a13c6326671d" target="_blank" rel="external">Android进阶之自定义注解</a></p>
<h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><p><a href="http://www.jianshu.com/p/b8197dd2934c" target="_blank" rel="external">线程、多线程与线程池总结</a></p>
<h3 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h3><p><a href="https://juejin.im/post/5787a4e7d342d300589f46a5" target="_blank" rel="external">Android 极简反射教程及应用示例</a></p>
<p><a href="http://blog.csdn.net/tiefeng0606/article/details/51700866" target="_blank" rel="external"> 反射技术在android中的应用</a></p>
<p><a href="http://www.jianshu.com/p/d4978bbce12a" target="_blank" rel="external">理解Android中的注解与反射</a></p>
<p><a href="http://droidyue.com/blog/2017/01/09/joor-examples/" target="_blank" rel="external">一个事半功倍的Java反射库</a></p>
<h3 id="MVP-架构"><a href="#MVP-架构" class="headerlink" title="MVP 架构"></a>MVP 架构</h3><p><a href="http://dev.qq.com/topic/57bfef673c1174283d60bac0" target="_blank" rel="external">基于RxJava的一种MVP实现</a></p>
<p><a href="http://dev.qq.com/topic/5799d7844bef22a823b3ad44" target="_blank" rel="external">一步一步实现Android的MVP框架</a></p>
<p><a href="http://kaedea.com/2015/10/11/android-mvp-pattern/" target="_blank" rel="external">Android MVP模式 简单易懂的介绍方式</a></p>
<h3 id="RxJava"><a href="#RxJava" class="headerlink" title="RxJava"></a>RxJava</h3><p><a href="http://gank.io/post/560e15be2dca930e00da1083" target="_blank" rel="external">给 Android 开发者的 RxJava 详解 - 扔物线</a></p>
<p><a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0305/2545.html" target="_blank" rel="external">深入浅出RxJava（一：基础篇）</a></p>
<p><a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0309/2571.html" target="_blank" rel="external">深入浅出RxJava(二：操作符)</a></p>
<p><a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0409/2703.html" target="_blank" rel="external">深入浅出RxJava三–响应式的好处</a></p>
<p><a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0426/2787.html" target="_blank" rel="external">深入浅出RxJava四-在Android中使用响应式编程</a></p>
<p><a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0601/2963.html" target="_blank" rel="external">当复仇者联盟遇上Dagger2、RxJava和Retrofit的巧妙结合</a></p>
<h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p><a href="http://www.jianshu.com/p/e6ad4423efcd" target="_blank" rel="external">8大排序算法图文讲解</a></p>
<p><a href="http://www.cnblogs.com/liuling/p/2013-7-24-01.html" target="_blank" rel="external">各种排序算法的分析及java实现</a></p>
<blockquote>
<p>热门流行库 ： RxJava 、 RxAndroid 、 Retrofit 、 Dagger2 、Realm  </p>
<p>React Native 开发</p>
</blockquote>
<h3 id="React-Native"><a href="#React-Native" class="headerlink" title="React Native"></a>React Native</h3><p><a href="http://dev.qq.com/topic/577e16a7640ad7b4682c64a7" target="_blank" rel="external">React Native 项目实战总结</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android 开发程序员必备网站]]></title>
      <url>https://github.com/pangrongxian/2017/07/16/Android%20%E5%BC%80%E5%8F%91%E7%A8%8B%E5%BA%8F%E5%91%98%E5%BF%85%E5%A4%87%E7%BD%91%E7%AB%99/</url>
      <content type="html"><![CDATA[<pre><code>转载请标注 原文：http://www.jianshu.com/p/9ad855577d1c
</code></pre><h2 id="Android-开发必备网站："><a href="#Android-开发必备网站：" class="headerlink" title="Android 开发必备网站："></a>Android 开发必备网站：</h2><ul>
<li><h4 id="Android-开发各种工具下载"><a href="#Android-开发各种工具下载" class="headerlink" title="Android 开发各种工具下载"></a><a href="http://www.androiddevtools.cn/" target="_blank" rel="external">Android 开发各种工具下载</a></h4></li>
<li><h4 id="Android-开发国内大牛集合"><a href="#Android-开发国内大牛集合" class="headerlink" title="Android 开发国内大牛集合"></a><a href="https://github.com/android-cn/android-dev-cn">Android 开发国内大牛集合</a></h4></li>
<li><h4 id="Android-开发技术博客周刊"><a href="#Android-开发技术博客周刊" class="headerlink" title="Android 开发技术博客周刊"></a><a href="http://www.androidblog.cn/" target="_blank" rel="external">Android 开发技术博客周刊</a></h4></li>
<li><h4 id="Android-开发技术周报中文版"><a href="#Android-开发技术周报中文版" class="headerlink" title="Android 开发技术周报中文版"></a><a href="http://www.androidweekly.cn/" target="_blank" rel="external">Android 开发技术周报中文版</a></h4></li>
<li><h4 id="Android-优秀开源项目集合以及源码分析"><a href="#Android-优秀开源项目集合以及源码分析" class="headerlink" title="Android 优秀开源项目集合以及源码分析"></a><a href="http://p.codekk.com/" target="_blank" rel="external">Android 优秀开源项目集合以及源码分析</a></h4></li>
<li><h4 id="Android-万能的技术交流社区"><a href="#Android-万能的技术交流社区" class="headerlink" title="Android 万能的技术交流社区"></a><a href="https://stackoverflow.com/" target="_blank" rel="external">Android 万能的技术交流社区</a></h4></li>
<li><h4 id="Android-开发遇到过相见恨晚的工具或网站"><a href="#Android-开发遇到过相见恨晚的工具或网站" class="headerlink" title="Android 开发遇到过相见恨晚的工具或网站"></a><a href="https://www.zhihu.com/question/27140400" target="_blank" rel="external">Android 开发遇到过相见恨晚的工具或网站</a></h4></li>
<li><h4 id="Android-开发实战技巧合集篇"><a href="#Android-开发实战技巧合集篇" class="headerlink" title="Android 开发实战技巧合集篇"></a><a href="http://blog.csdn.net/column/details/android-tip.html?&amp;page=1" target="_blank" rel="external">Android 开发实战技巧合集篇</a></h4></li>
<li><h4 id="Android-直播视频技术探究系列"><a href="#Android-直播视频技术探究系列" class="headerlink" title="Android 直播视频技术探究系列"></a><a href="http://blog.csdn.net/jiangwei0910410003/article/details/51871358" target="_blank" rel="external">Android 直播视频技术探究系列</a></h4></li>
<li><h4 id="Android-开发有哪些新技术出现"><a href="#Android-开发有哪些新技术出现" class="headerlink" title="Android 开发有哪些新技术出现"></a><a href="https://www.zhihu.com/question/32037895" target="_blank" rel="external">Android 开发有哪些新技术出现</a></h4></li>
<li><h4 id="Android-你想要练手的API这里都有"><a href="#Android-你想要练手的API这里都有" class="headerlink" title="Android 你想要练手的API这里都有"></a><a href="https://www.zhihu.com/question/39479153" target="_blank" rel="external">Android 你想要练手的API这里都有</a></h4></li>
<li><h4 id="Android-开发中需要注意的一些坑"><a href="#Android-开发中需要注意的一些坑" class="headerlink" title="Android 开发中需要注意的一些坑"></a><a href="https://www.zhihu.com/question/27818921" target="_blank" rel="external">Android 开发中需要注意的一些坑</a></h4></li>
<li><h4 id="干货集中营"><a href="#干货集中营" class="headerlink" title="干货集中营"></a><a href="http://gank.io/" target="_blank" rel="external">干货集中营</a></h4></li>
<li><h4 id="在线开发一些小工具集合"><a href="#在线开发一些小工具集合" class="headerlink" title="在线开发一些小工具集合"></a><a href="http://www.bejson.com/" target="_blank" rel="external">在线开发一些小工具集合</a></h4></li>
<li><h4 id="为程序员每天推荐各大知名社区的优质内容"><a href="#为程序员每天推荐各大知名社区的优质内容" class="headerlink" title="为程序员每天推荐各大知名社区的优质内容"></a><a href="http://e.xitu.io/" target="_blank" rel="external">为程序员每天推荐各大知名社区的优质内容</a></h4></li>
</ul>
<h2 id="关于GitHub你必须要知道的："><a href="#关于GitHub你必须要知道的：" class="headerlink" title="关于GitHub你必须要知道的："></a>关于GitHub你必须要知道的：</h2><ul>
<li><h4 id="GitHub-安卓最火开源项目每周排行版"><a href="#GitHub-安卓最火开源项目每周排行版" class="headerlink" title="GitHub 安卓最火开源项目每周排行版"></a><a href="https://github.com/trending/java?since=weekly">GitHub 安卓最火开源项目每周排行版</a></h4></li>
<li><h4 id="GitHub-安卓最火开源项目综合排行版"><a href="#GitHub-安卓最火开源项目综合排行版" class="headerlink" title="GitHub 安卓最火开源项目综合排行版"></a><a href="https://github.com/search?l=Java&amp;o=desc&amp;q=stars:%3E1&amp;ref=searchresults&amp;s=stars&amp;type=Repositories&amp;utf8=%E2%9C%93">GitHub 安卓最火开源项目综合排行版</a></h4></li>
<li><h4 id="GitHub-上排名前100的Android开源库介绍"><a href="#GitHub-上排名前100的Android开源库介绍" class="headerlink" title="GitHub 上排名前100的Android开源库介绍"></a><a href="http://www.jianshu.com/p/b4cb6f6f7acb" target="_blank" rel="external">GitHub 上排名前100的Android开源库介绍</a></h4></li>
<li><h4 id="GitHub-中国区前100名到底是什么样的人"><a href="#GitHub-中国区前100名到底是什么样的人" class="headerlink" title="GitHub 中国区前100名到底是什么样的人"></a><a href="http://www.jianshu.com/p/d29cba7934c9" target="_blank" rel="external">GitHub 中国区前100名到底是什么样的人</a></h4></li>
<li><h4 id="GitHub-上各大语言的一些牛人"><a href="#GitHub-上各大语言的一些牛人" class="headerlink" title="GitHub 上各大语言的一些牛人"></a><a href="https://githuber.cn/rank" target="_blank" rel="external">GitHub 上各大语言的一些牛人</a></h4></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[私人珍藏的CHROME插件，吐血推荐]]></title>
      <url>https://github.com/pangrongxian/2017/07/13/%E7%A7%81%E4%BA%BA%E7%8F%8D%E8%97%8F%E7%9A%84CHROME%E6%8F%92%E4%BB%B6%EF%BC%8C%E5%90%90%E8%A1%80%E6%8E%A8%E8%8D%90/</url>
      <content type="html"><![CDATA[<pre><code>原文： http://stormzhang.com/devtools/2016/01/15/google-chrome-extension/
作者：stormzhang
</code></pre><h1 id="吐血推荐珍藏的-Chrome-插件二"><a href="#吐血推荐珍藏的-Chrome-插件二" class="headerlink" title="吐血推荐珍藏的 Chrome 插件二"></a>吐血推荐珍藏的 Chrome 插件二</h1><p>了解我的人知道，我一直是 Chrome 的死忠粉，Chrome 那丰富的插件可能是我这么钟爱 Chrome 的原因之一，我在去年的时候写过一篇文章，推荐了一些我常用的 Chrome 插件给大家，很多读者是因为那篇文章从此也爱上了 Chrome，那么时隔一年多的时间，今天再给大家更新一些很棒的 Chrome 插件。</p>
<h3 id="1-Listen-1"><a href="#1-Listen-1" class="headerlink" title="1. Listen 1"></a><a href="">1. Listen 1</a></h3><p>这个插件是我在知乎上看到一个问题「最良心的软件可以良心到什么程度？」，也是就随手把 Listen 1 推荐给大家，没想到瞬间被很多人点赞，现在已经破万赞了，看来我一直在使用的这个插件真的需求很大啊，它的使用场景是这样的：</p>
<p>我想大部分人对听音乐是强需求吧？如果没有音乐，那么你的生活里将不在有色彩。有人喜欢用网易云音乐、有人喜欢用虾米、QQ 音乐等，但是想大家不可能同时装这么多客户端吧？因为版权的原因，每个在线音乐网站都没有做到完全的曲库，你又不可能把每个音乐网站都买上会员，所以有时候你需要去不同的网站搜索音乐，这个时候请使用 Listen 1，简直不要太良心。它长这样：</p>
<p><img src="http://mmbiz.qpic.cn/mmbiz_jpg/159icnNTXChOic6XicWcMR3rq7ic17aoYr4HQ6w6dYQBjdMFNxbaNVJyPyAGmQSaFSxicGSHibacoJKGmMGlibibBufr1Q/0.jpeg?tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt=""></p>
<p>界面也有点极客范，堪称程序员专属听歌工具。但是，Listen 1 并没有在 Chrome 应用商店上架，而是以开源的方式放在了 GitHub，只需要下载并让 Chrome 以开发者模式加载即可，安装方式见 GitHub 项目描述。</p>
<p>GitHub 地址：<br><a href="https://github.com/listen1/listen1">https://github.com/listen1/listen1</a></p>
<h3 id="2-The-Great-Suspender"><a href="#2-The-Great-Suspender" class="headerlink" title="2. The Great Suspender"></a><a href="https://chrome.google.com/webstore/detail/the-great-suspender/klbibkeccnjlkjkiokjodocebajanakg?utm_source=chrome-ntp-icon" target="_blank" rel="external">2. The Great Suspender</a></h3><p>很多人其实都知道，Chrome 有个通病，就是当你打开多个标签页的时候，比较占用内存资源，难道就没有办法解决了么？当然不是，这个插件就派上用场了，安装这个插件之后，你设置一定的时间，比如半小时之后，其他标签页如果没有操作，就会被自动回收，节省内存，而当你再切换回之前标签页的时候，会是一片空白，只需要鼠标点击下自动重新加载，这个插件我非常喜欢用，也强烈推荐给大家。</p>
<p><img src="http://mmbiz.qpic.cn/mmbiz_jpg/159icnNTXChOic6XicWcMR3rq7ic17aoYr4HdD4cHOu3bsMPXJHTbxgX5sCq9XlnRycIC6nkVoIRDOxHt6newicZknA/0.jpeg?tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt=""></p>
<h3 id="3-Similar-Web"><a href="#3-Similar-Web" class="headerlink" title="3. Similar Web"></a><a href="https://chrome.google.com/webstore/detail/similarweb-site-traffic-s/hoklmmgfnpapgjgcpechhaamimifchmp?utm_source=chrome-ntp-icon" target="_blank" rel="external">3. Similar Web</a></h3><p>当你打开一个网站，想知道这个网站的流量、来源、排名、竞品等信息怎么办？那么一定要安装这个插件，Similar Web 可以直接很方便的统统告诉你，使用起来非常直观、简单。</p>
<p><img src="http://mmbiz.qpic.cn/mmbiz_jpg/159icnNTXChOic6XicWcMR3rq7ic17aoYr4HT7WayLRHrLic2icq182BgrMUaZwwssX312tibeJ6nUqpCMIlAJiaZ7ozHw/0.jpeg?tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt=""></p>
<h3 id="4-Advertising-Terminator"><a href="#4-Advertising-Terminator" class="headerlink" title="4. Advertising Terminator"></a><a href="https://chrome.google.com/webstore/detail/%E5%B9%BF%E5%91%8A%E7%BB%88%E7%BB%93%E8%80%85/fpdnjdlbdmifoocedhkighhlbchbiikl?utm_source=chrome-ntp-icon" target="_blank" rel="external">4. Advertising Terminator</a></h3><p>现在网站上广告再常见不过了，一些网站挂广告我倒还可以接受，但是有些网站挂的广告多的简直令人发指，所以后面我就去寻找了下，发现了这个插件，从此你的浏览器彻底干净了，自动帮你屏蔽各种广告，仿佛整个世界清静了，实打实的广告终结者！</p>
<p><img src="http://mmbiz.qpic.cn/mmbiz_jpg/159icnNTXChOic6XicWcMR3rq7ic17aoYr4HNiazcY0dz6GGZria39GrRGibXUo197xoRn2ZIqib46SFBzKPRoDltQPl1A/0.jpeg?tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt=""></p>
<h3 id="5-Tampermonkey"><a href="#5-Tampermonkey" class="headerlink" title="5. Tampermonkey"></a><a href="https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo?utm_source=chrome-ntp-icon" target="_blank" rel="external">5. Tampermonkey</a></h3><p>它的中文名叫做「油猴脚本」，简单直接点告诉大家，它是一个神器，强烈推荐大家安装，你可以在上面搜索一些黑科技脚本，例如去视频广告、下载视频，甚至免费看一些视频网站的会员电影等等，有点敏感，不多说了，大家可以自行去 Google 搜索使用用法。</p>
<p><img src="http://mmbiz.qpic.cn/mmbiz_jpg/159icnNTXChOic6XicWcMR3rq7ic17aoYr4HwjeLQa6j9DTEe4oiaoswWxIDibNqXkrFPbic9ibxajtSxDLeibibTdJvRqiaQ/0.jpeg?tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt=""></p>
<h3 id="6-Grammarly"><a href="#6-Grammarly" class="headerlink" title="6. Grammarly"></a><a href="https://chrome.google.com/webstore/detail/grammarly-for-chrome/kbfnbcaeplbcioakkpcpgfkobkghlhen?utm_source=chrome-ntp-icon" target="_blank" rel="external">6. Grammarly</a></h3><p>我最近不是在学英语么，然后偶然间发现了这么一个插件，这个插件可以帮助你的英语写作，它可以自动检查你的一些英语单词拼写与语法，并且直接推荐你正确的单词或句子，对于一些经常英语写作的同学来说，这款插件堪称神器。</p>
<p><img src="http://mmbiz.qpic.cn/mmbiz_jpg/159icnNTXChOic6XicWcMR3rq7ic17aoYr4H3vxeY426QobDicAia3wGAjwwIf2a3e6JDMhhBJUDqSzrOaWgajLDJFNw/0.jpeg?tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt=""></p>
<h3 id="7-Stylish"><a href="#7-Stylish" class="headerlink" title="7. Stylish"></a><a href="https://chrome.google.com/webstore/detail/stylish-custom-themes-for/fjnbnpbmkenffdnngjfgmeleoegfcffe?utm_source=chrome-ntp-icon" target="_blank" rel="external">7. Stylish</a></h3><p>是不是厌倦了一些网站上千篇一律的主题？如果想要更有个性，当然是希望自己所用网站的主题跟其他人不一样啊，这款插件就能帮助你了，你可以用它来来给你所使用的网站定制主题，而且它上面还可以直接使用别人做好的一些酷炫主题。</p>
<p><img src="http://mmbiz.qpic.cn/mmbiz_jpg/159icnNTXChOic6XicWcMR3rq7ic17aoYr4HYAnAJRDgUoj2TsxXNQicYTgvUrXlOscNH6h6mfPOianshtReL6KajqdQ/0.jpeg?tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt=""></p>
<p>用过它之后，给你们看下我现在的 Google 主页，是不是比较炫酷？</p>
<p><img src="http://mmbiz.qpic.cn/mmbiz_jpg/159icnNTXChOic6XicWcMR3rq7ic17aoYr4HIfamQbAMGBC6QpPqxoQqxzjsb359lXg7Iy0E8dp5O9xnxib1e5lPATw/0.jpeg?tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt=""></p>
<h3 id="8-Anything-to-QRCode"><a href="#8-Anything-to-QRCode" class="headerlink" title="8. Anything to QRCode"></a><a href="https://chrome.google.com/webstore/detail/anything-to-qrcode/calkaljlpglgogjfcidhlmmlgjnpmnmf?utm_source=chrome-ntp-icon" target="_blank" rel="external">8. Anything to QRCode</a></h3><p>我们经常遇到这么一个场景？比如需要把一个链接搞成二维码，因为微信内部不支持外链，公众号运营这种需求还是蛮常见的，甚至于把文字、图片生成二维码，那么这个插件就很方便了，安装之后，链接、图片、文字都可以直接生成二维码，简直不要太方便。</p>
<p><img src="http://mmbiz.qpic.cn/mmbiz_jpg/159icnNTXChOic6XicWcMR3rq7ic17aoYr4H0ARAUICNJZkTauOg6OQ0WXRct7Ric3zKqDTBvrKvLxSiclyiaRIwbtvDA/0.jpeg?tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt=""></p>
<h3 id="9-Awesome-Screenshot"><a href="#9-Awesome-Screenshot" class="headerlink" title="9. Awesome Screenshot"></a><a href="https://chrome.google.com/webstore/detail/awesome-screenshot-screen/nlipoenfbbikpbjkfpfillcgkoblgpmj?utm_source=chrome-ntp-icon" target="_blank" rel="external">9. Awesome Screenshot</a></h3><p>像我这种经常写作的人，对截图来说也是强需求，但是自从安装了这个插件，一切都变得简单了。这个插件支持截取部分、截取整个窗口、截取整个页面等，而且截图成功之后自动开一个编辑窗口，直接进行简单的 PS 了，PS 结束之后直接下载到本地，可谓截图一步到位，非常好用。</p>
<p><img src="http://mmbiz.qpic.cn/mmbiz_jpg/159icnNTXChOic6XicWcMR3rq7ic17aoYr4Hh9X3RUgf72tmT0ITHq3gv8ZMupialw6HAja6jY1zjD6J6SHbTlTIlSg/0.jpeg?tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt=""></p>
<h3 id="10-Click-amp-Clean"><a href="#10-Click-amp-Clean" class="headerlink" title="10. Click&amp;Clean"></a><a href="https://chrome.google.com/webstore/detail/clickclean/ghgabhipcejejjmhhchfonmamedcbeod?utm_source=chrome-ntp-icon" target="_blank" rel="external">10. Click&amp;Clean</a></h3><p>我们在使用浏览器的时候，其实会产生一堆数据，如浏览记录、缓存、私有数据、cookie 等等，当然，浏览器设置页面一般都可以手动设置与清理的，但是有点麻烦，每次都要一步步点进去，寻找对应的设置，而且对于普通用户更难找到，那么安装这个插件之后，则什么都搞定了，直接一个页面，点击下就可以清理对应的数据，非常方便，从此迈上使用 Chrome 的人工智能模式。</p>
<p><img src="http://mmbiz.qpic.cn/mmbiz_jpg/159icnNTXChOic6XicWcMR3rq7ic17aoYr4HZmjeTV2M76FCSeQZByLzGIBJOqH3D60Gl4o66A9J9uYV7Q0KsD42wg/0.jpeg?tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt=""></p>
<p>以上，希望大家喜欢我的推荐!</p>
<hr>
<h1 id="吐血推荐珍藏的-Chrome-插件一"><a href="#吐血推荐珍藏的-Chrome-插件一" class="headerlink" title="吐血推荐珍藏的 Chrome 插件一"></a>吐血推荐珍藏的 Chrome 插件一</h1><p>一直都对Chrome情有独钟，第一次接触她只因她的icon就喜欢上她了，后来便一发不可自拔，现在几乎成为程序员最喜欢用的浏览器，至于优点很明显：强大的Developer Tools，响应快速，支持各种插件。当然也有些劣势，比如稍微占点内存，但是在如今这个硬件这么便宜的时代，这点几乎可以忽略，今天我就来给大家推荐下我自己常用的一些Chrome插件，你在别处可看不到，可以这么说，熟练使用这些插件，会对你的开发效率大大提高，逼格瞬间上升一个档次。</p>
<p>在Chrome Store直接搜索即可添加（要会科学上网哦）</p>
<h3 id="1、Momentum"><a href="#1、Momentum" class="headerlink" title="1、Momentum"></a>1、<a href="https://chrome.google.com/webstore/detail/momentum/laookkfknpbbblfpciffpaejjkokdgca" target="_blank" rel="external">Momentum</a></h3><p>装逼利器，教你如何优雅的使用Chrome，新打开一个Tab的时候再也不是一片空白，每天一副精美图片，给你们看下我今天的桌面感受下。</p>
<p><img src="http://mmbiz.qpic.cn/mmbiz/159icnNTXChMfLdQnMGk6zBYblwnSZoNWibFk09x6Z9th6PLfV6MEuWlczlFLvY7uwaBdaLMJUjfejSwVW6z337Q/640?wx_fmt=jpeg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt=""></p>
<h3 id="2、OneTab"><a href="#2、OneTab" class="headerlink" title="2、OneTab"></a>2、<a href="https://chrome.google.com/webstore/detail/onetab/chphlpgkkbolifaimnlloiipkdnihall" target="_blank" rel="external">OneTab</a></h3><p>强烈推荐，使用场景是这样的，我们使用Chrome经常会一次打开好多tab，很多是会用到的，又不舍得关，内存又耗着，这个时候点击下OneTab，直接把所有tab回收，然后每天的历史都给你记录着，接着你可以一键还原某一天的tab，真乃为Chrome而生。</p>
<p><img src="http://mmbiz.qpic.cn/mmbiz/159icnNTXChMfLdQnMGk6zBYblwnSZoNWabwqaCVe7qxnhxt7O4R6IgPgQ9a3X4iaOOfOB6xBa11bQR7RbHoWfIQ/640?wx_fmt=jpeg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt=""></p>
<h3 id="3、Save-to-Pocket"><a href="#3、Save-to-Pocket" class="headerlink" title="3、Save to Pocket"></a>3、<a href="https://chrome.google.com/webstore/detail/save-to-pocket/niloccemoadcdkdjlinkgdfekeahmflj" target="_blank" rel="external">Save to Pocket</a></h3><p>相信很多人都用过Pocket，这也是我一直学习必备的App，比如你经常看博客，看到好的文章，然后装个这个插件就可以直接保存到Pocket，这个时候你手机上的Pocket客户端同步过来，不管你在做地铁，还是在上厕所都可以利用这些碎片时间消化保存的知识，比利用这些时间刷知乎好多了，强烈推荐大学生或者工作经验没多久迫切需要学习的人。</p>
<p><img src="http://mmbiz.qpic.cn/mmbiz/159icnNTXChMfLdQnMGk6zBYblwnSZoNWsQXNHX0ExqLyia9HFia8hpENjVOVdvHDMKjComib7fK7SJRZ0FBnw0TWA/640?wx_fmt=jpeg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt=""></p>
<h3 id="4、Page-Ruler"><a href="#4、Page-Ruler" class="headerlink" title="4、Page Ruler"></a>4、<a href="https://chrome.google.com/webstore/detail/page-ruler/jlpkojjdgbllmedoapgfodplfhcbnbpn" target="_blank" rel="external">Page Ruler</a></h3><p>这个工具设计师必备，可以直接查看网页一些图片的详细像素大小、具体位置等，非常实用。</p>
<p><img src="http://mmbiz.qpic.cn/mmbiz/159icnNTXChMfLdQnMGk6zBYblwnSZoNWrgFy4ozDic4iaXVIibYrdG5sjvibkKRxCWlVJKMkicpblu5zViaIp2Fy8Ssg/640?wx_fmt=jpeg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt=""></p>
<h3 id="5、Alexa-Traffic-Rank-Alexa"><a href="#5、Alexa-Traffic-Rank-Alexa" class="headerlink" title="5、Alexa Traffic Rank Alexa"></a>5、<a href="http://www.alexa.com/" target="_blank" rel="external">Alexa Traffic Rank Alexa</a></h3><p>Alexa排名是指网站的世界排名，非常有权威。直接主流网站或博客绝对是有Alexa排名的，我们在浏览博客或者网站的时候就可以通过Alexa排名知晓该网站的流行程度，适用于经常看博客的人，装了这个插件一键查看网站排名，截个我个人博客stormzhang博客精华的排名给大家感受下。</p>
<p><img src="http://mmbiz.qpic.cn/mmbiz/159icnNTXChMfLdQnMGk6zBYblwnSZoNWjVib5EkHXTIjjrJ23AfzPaD5Rob0N1ANYtdPTlYNcLhM1KFKchjIpmQ/640?wx_fmt=jpeg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt=""></p>
<p>上面只是热身，下面都是跟我们开发密切相关的，注意前方高能：</p>
<p>GitHub俗称为“全球最大的程序员同性社交社区”，足以见他在程序员心中的地位，几乎每个程序员都必须要有一个GitHub账号，那么就来推荐下GitHub三件套。</p>
<h3 id="6、Isometric-Contributions"><a href="#6、Isometric-Contributions" class="headerlink" title="6、Isometric Contributions"></a>6、<a href="https://chrome.google.com/webstore/detail/isometric-contributions/mjoedlfflcchnleknnceiplgaeoegien" target="_blank" rel="external">Isometric Contributions</a></h3><p>一个小玩意，可以让你在GitHub上的commit像盖楼一样的展示，很有趣，展示下Android大神Jake Wharton的commit情况。</p>
<p><img src="http://mmbiz.qpic.cn/mmbiz/159icnNTXChMfLdQnMGk6zBYblwnSZoNW4VmryXGjeNddEIqo8iby87FwGNO2qmiaOPCxkbVh3zib9qHXsrz3fxPBg/640?wx_fmt=jpeg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt=""></p>
<h3 id="7、Avatars-for-Github"><a href="#7、Avatars-for-Github" class="headerlink" title="7、Avatars for Github"></a>7、<a href="https://github.com/anasnakawa/chrome-github-avatars">Avatars for Github</a></h3><p>顾名思义，默认我们在GitHub主页动态只能看到id的，而安装了这个插件就可以看到GitHub头像了，让你一眼就能知道是谁，给你们看下我的GitHub主页动态。</p>
<p><img src="http://mmbiz.qpic.cn/mmbiz/159icnNTXChMfLdQnMGk6zBYblwnSZoNWhBYVBWe8y9FGhxiaUYIQ0vaIGqyZSjBRj5X5JV0nojtXEg04xRa5HGw/640?wx_fmt=jpeg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt=""></p>
<h3 id="8、Octotree"><a href="#8、Octotree" class="headerlink" title="8、Octotree"></a>8、<a href="https://github.com/buunguyen/octotree">Octotree</a></h3><p>这个可就屌了，当我们在浏览别人的开源代码时，还要clone下来一个文件查看，而有了这个插件，你可以直接在Chrome侧边栏向打开文件夹一样的查看别人的项目，简直了。给大家看下查看我的开源项目的正确方式。</p>
<p><img src="http://mmbiz.qpic.cn/mmbiz/159icnNTXChMfLdQnMGk6zBYblwnSZoNW3Xo3c71kGZAtFznZlU3bN0jqLhSIE9tBGavf9ufriaZtK9JZvETSxIw/640?wx_fmt=jpeg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt=""></p>
<p>接下来是Android开发必备插件了，效率提升百倍！</p>
<h3 id="9、JSONView"><a href="#9、JSONView" class="headerlink" title="9、JSONView"></a>9、<a href="https://chrome.google.com/webstore/detail/jsonview/chklaanhfefbnpoihckbnefhakgolnmc" target="_blank" rel="external">JSONView</a></h3><p>一般我们在对接api接口的时候，一般都是默认返回json格式，想要查看具体返回哪些内容的时候通过Chrome查看全乱的，而且中文编码也不对，而有了这个插件就不一样了，自动跟你排列出Json数据，不管返回数据有多复杂，你都可以很直观的了解他的数据格式，简直开发者必备。</p>
<p><img src="http://mmbiz.qpic.cn/mmbiz/159icnNTXChMfLdQnMGk6zBYblwnSZoNW9xebiahM1gHpWRg6AaKxVWgFNYZaLFsAMpQQuu7ibNibgsqKHKQT10wqg/640?wx_fmt=jpeg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt=""></p>
<h3 id="10、Postman"><a href="#10、Postman" class="headerlink" title="10、Postman"></a>10、<a href="https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop" target="_blank" rel="external">Postman</a></h3><p>开发者在调试网络时候，Linux平台一般常用curl这种命令行工具，而如果你不会使用或者不习惯命令行，那Postman是你的不二人选，可以直接发送一个请求，自定义params、header，查看response状态等。</p>
<p><img src="http://mmbiz.qpic.cn/mmbiz/159icnNTXChMfLdQnMGk6zBYblwnSZoNW1aoH8pk35HAYspibibglLpuDukhByZujlX1UGQichuNNAZEdMKe0kuhWA/640?wx_fmt=jpeg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt=""></p>
<h3 id="11、ChromeADB"><a href="#11、ChromeADB" class="headerlink" title="11、ChromeADB"></a>11、<a href="https://chrome.google.com/webstore/detail/chromeadb/fhdoijgfljahinnpbolfdimpcfoicmnm" target="_blank" rel="external">ChromeADB</a></h3><p>这个可以说是Android开发者才用得上，这个插件的具体作用就是可以控制你的手机，当然前提必须是你的adb已经连接上了，不管是通过USB也好还是通过Wifi也好（不知道怎么通过Wifi连接的可以去我博客找），然后可以查看你的内存、硬盘使用情况，还自带一个Controller，可以远程控制你的手机，比如我曾经就在手机wifi连接到adb的情况下，在我媳妇把玩我手机情况下突然放了首她爱听的音乐，当时的惊喜你们脑补下。</p>
<p><img src="http://mmbiz.qpic.cn/mmbiz/159icnNTXChMfLdQnMGk6zBYblwnSZoNWK2XPsTA2ciabdTosFtiblJkWQQBy27vCgzo8ByuCYlCoIphOq7sozTPg/640?wx_fmt=jpeg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt=""></p>
<h3 id="12、Vysor"><a href="#12、Vysor" class="headerlink" title="12、Vysor"></a>12、<a href="https://chrome.google.com/webstore/detail/vysor/gidgenkbbabolejbgbpnhbimgjbffefm" target="_blank" rel="external">Vysor</a></h3><p>这个插件的使用场景是这样的，假如你在做一个Android App的演讲，但是手机屏幕太小，这个时候安装了这个插件就可以让手机画面投影到电脑上来（在iOS系统实现这个很方便），而且延时几乎很小，这个插件一般用不到就把他禁用，一旦用到的时候会非常有用。</p>
<p><img src="http://mmbiz.qpic.cn/mmbiz/159icnNTXChMfLdQnMGk6zBYblwnSZoNWqWAuiar2nZBLCibB9naaRjtlpv3W0XgDZHrH15qibW0ekMACpQBlDnImA/640?wx_fmt=jpeg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt=""></p>
<h3 id="13、Dribbble-New-Tab"><a href="#13、Dribbble-New-Tab" class="headerlink" title="13、Dribbble New Tab"></a>13、<a href="https://chrome.google.com/webstore/detail/dribbble-new-tab/hmhjbefkpednjogghoibpejdmemkinbn" target="_blank" rel="external">Dribbble New Tab</a></h3><p>大名鼎鼎的Dribble，堪称设计师必备，而装了这个插件，可以让你打开空白tab的时间第一时间把每日精选作品展现出来，视觉的享受，强烈推荐给设计师们，装了这个插件我的桌面是这样的。（这个插件跟Momentum同时只能使用一个）</p>
<p><img src="http://ww1.sinaimg.cn/large/006rIajegy1fhgt02b3bmj30xf0k545t.jpg" alt=""></p>
<p>点击Clearly插件的时候阅读体验变成这样：</p>
<h3 id="14、LastPass"><a href="#14、LastPass" class="headerlink" title="14、LastPass"></a>14、<a href="https://chrome.google.com/webstore/detail/lastpass-free-password-ma/hdokiejnpimakedhajhdlcegeplioahd" target="_blank" rel="external">LastPass</a></h3><p>是不是平时上网很多网站各种密码记不住？都用一个密码又怕一个网站的密码泄露全军覆没，有了这个就不用怕了，用官方原话解释就是：Free Password Manager，你值得拥有。</p>
<p><img src="http://ww1.sinaimg.cn/large/006rIajegy1fhgt03wm1nj30xa0keq95.jpg" alt=""></p>
<h3 id="15、掘金"><a href="#15、掘金" class="headerlink" title="15、掘金"></a>15、<a href="https://chrome.google.com/webstore/detail/%E6%8E%98%E9%87%91/lecdifefmmfjnjjinhaennhdlmcaeeeb/related" target="_blank" rel="external">掘金</a></h3><p>掘金，一款高质量的技术分享社区。</p>
<p>使用效果：新点击打开每一个Tab，都是展示掘金的一整版专业文章。</p>
<p><img src="http://ww1.sinaimg.cn/large/006rIajegy1fhgt01gjpgj31320ky0w5.jpg" alt=""></p>
<p>以上，希望大家喜欢我的推荐!</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[最全面的 Material Design 学习资料]]></title>
      <url>https://github.com/pangrongxian/2017/01/08/%E6%9C%80%E5%85%A8%E9%9D%A2%E7%9A%84%20Material%20Design%20%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/</url>
      <content type="html"><![CDATA[<h2 id="Material-Design-使用教程"><a href="#Material-Design-使用教程" class="headerlink" title="Material Design 使用教程"></a>Material Design 使用教程</h2><pre><code>原文：https://github.com/Luosunce/material-design-data
作者：Luosunce
</code></pre><ul>
<li><a href="https://material.google.com/" target="_blank" rel="external">Material Design 官网</a></li>
<li><a href="http://wiki.jikexueyuan.com/project/material-design/" target="_blank" rel="external">Material Design 中文版(极客学院)</a></li>
<li><a href="https://github.com/zdhxiong/Material-Design-Chinese">Material Design 最新中文版</a></li>
<li><a href="https://developer.android.com/training/material/index.html" target="_blank" rel="external">Android 5.0 文档</a></li>
<li><a href="https://bboyfeiyu.gitbooks.io/android-tech-frontier/content/issue-8/%E5%BC%80%E5%A7%8B%E5%AD%A6%E4%B9%A0Material%20Design.html" target="_blank" rel="external">开始学习 Materila Design</a></li>
<li><a href="http://blog.csdn.net/growth58/article/details/47972467" target="_blank" rel="external">Android Design Support Library 概览</a> 一系列教程对 Material Design 的常用控件都做了很详细的讲解</li>
<li><a href="http://www.jianshu.com/p/107a2529a56f" target="_blank" rel="external">Android Material Design 简单使用</a></li>
<li><a href="http://www.jianshu.com/p/40efd44802ef" target="_blank" rel="external">Material Design Library 使用汇总</a></li>
<li><a href="http://www.jianshu.com/p/1078568e859f" target="_blank" rel="external">Android Design Support Library 的 代码实验</a></li>
<li><a href="http://www.jianshu.com/p/378ea4ee5a54" target="_blank" rel="external">Material Design 资料收集</a> 这个不得不推荐，向前辈致敬</li>
<li><a href="http://blog.csdn.net/qibin0506/article/details/49069089" target="_blank" rel="external">Android Material Design 动画</a></li>
<li><a href="http://blog.csdn.net/a396901990/article/details/40187203" target="_blank" rel="external">Material Design 详解（动画篇)</a></li>
</ul>
<h2 id="Awesome-系列"><a href="#Awesome-系列" class="headerlink" title="Awesome 系列"></a>Awesome 系列</h2><ul>
<li><a href="https://github.com/lightSky/Awesome-MaterialDesign">Awesome-MaterialDesign</a></li>
<li><a href="https://github.com/sachin1092/awesome-material">awesome-material</a></li>
<li><a href="https://github.com/wasabeef/awesome-android-ui">awesome-android-ui</a></li>
</ul>
<h2 id="开源库"><a href="#开源库" class="headerlink" title="开源库"></a>开源库</h2><ul>
<li><a href="https://github.com/soyoungboy/android-material-design-Open-source-projects">android-material-design-Open-source-projects</a> Material Design 开源库集合</li>
<li><a href="https://github.com/navasmdc/MaterialDesignLibrary">MaterialDesignLibrary</a> Material Design 风格的各种控件</li>
<li><a href="https://github.com/rey5137/material">Material</a> 同上面那个库差不多，也是各种控件</li>
<li><a href="https://github.com/DenisMondon/material-design-library">Material Design Library</a> 第三方的 Material Design</li>
<li><a href="https://github.com/florent37/MaterialViewPager">MaterialViewPager</a> Material Design 风格的 ViewPager</li>
<li><a href="https://github.com/prolificinteractive/material-calendarview">material-calendarview</a> Material Design 风格的日历</li>
<li><a href="https://github.com/jpardogo/PagerSlidingTabStrip">PagerSlidingTabStrip</a> Material Design 风格的 TabLayout</li>
<li><a href="https://github.com/rengwuxian/MaterialEditText">MaterialEditText</a> Material Design 风格的输入框</li>
<li><a href="https://github.com/MiguelCatalan/MaterialSearchView">MaterialSearchView</a> Material Design 风格的搜索框</li>
<li><a href="https://github.com/lsjwzh/MaterialLoadingProgressBar">MaterialLoadingProgressBar</a> Material Design 风格的进度指示器</li>
<li><a href="https://github.com/oli107/material-range-bar">material-range-bar</a> Material Design 风格的 RangeBar</li>
<li><a href="https://github.com/afollestad/material-camera">material-camera</a> Material Design 风格的 Camera</li>
<li><a href="https://github.com/lgvalle/Material-Animations">Material-Animations</a> Material Design 动画效果</li>
<li><a href="https://github.com/afollestad/material-dialogs">material-dialogs</a> MD 风格的弹框</li>
<li><a href="https://github.com/balysv/material-ripple">material-ripple</a> 支持 api 14 以上的水波纹效果</li>
<li><a href="https://github.com/deano2390/MaterialShowcaseView">MaterialShowcaseView</a> MD 风格的透明指示层</li>
<li><a href="https://github.com/iammert/MaterialIntroView">MaterialIntroView</a> 类似 <a href="http://www.thefabulous.co/" target="_blank" rel="external">Fabulous App</a> MD 风格的功能引导库</li>
<li><a href="https://github.com/material-components/material-components-android">material-components-android</a> MD 风格的组件集合</li>
</ul>
<h2 id="开源项目"><a href="#开源项目" class="headerlink" title="开源项目"></a>开源项目</h2><ul>
<li><a href="http://weibo.com/ttarticle/p/show?id=2309404021772117763644" target="_blank" rel="external">十款 Material Design 风格的 Android 开源项目</a></li>
<li><a href="https://github.com/googlesamples/android-UniversalMusicPlayer#universal-android-music-player-sample">Universal Android Music Player</a> 谷歌的一款 Material Design 风格的音乐播放器播放器，非常的漂亮</li>
<li><a href="https://github.com/nickbutcher/plaid">plaid</a> 非常给力的一个项目，有着很酷炫的动画效果</li>
<li><a href="https://github.com/saulmm/Material-Movies">Material-Movies</a> Material Design 风格的视频播放器</li>
<li><a href="https://github.com/chentao0707/SimplifyReader">Simplifyreader</a></li>
<li><a href="https://github.com/xcc3641/">SeeWeather</a></li>
<li><a href="https://github.com/Qixingchen/MD-BiliBili">MD-BiliBili</a> 基于 Material Design 的 BiliBili 第三方 Android 客户端</li>
<li><a href="https://github.com/drakeet/meizhi">meizhi</a> 妹纸，满满的福利</li>
<li><a href="https://github.com/Freelander/Elephant">Elephant</a> PHPHub 第三方客户端</li>
<li><a href="https://github.com/chenyangcun/MaterialDesignExample">MaterialDesignExample</a> 最早出现的 Material Design 风格的app之一，用来演示 Material Design 控件的使用</li>
<li><a href="https://github.com/hymanme/MaterialHome">MaterialHome</a> 一款图书展示类 app</li>
<li><a href="https://github.com/hefuyicoder/ListenerMusicPlayer">ListenerMusicPlayer</a> 一款优雅的遵循 Material Design 的开源音乐播放器</li>
<li><a href="https://github.com/frogermcs/InstaMaterial">InstaMaterial</a> Material Design 设计风格的 Instagram</li>
<li><a href="https://github.com/harjot-oberai/MusicDNA">MusicDNA</a> 这款播放器真是炫瞎眼了</li>
</ul>
<h2 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h2><ul>
<li><a href="http://www.jikexueyuan.com/course/124.html?Hmsr=p_w" target="_blank" rel="external">谷歌 Material Design 设计语言详解</a> 极客学院的 Material Design 视频教程</li>
<li><a href="http://www.imooc.com/learn/215" target="_blank" rel="external">Android 5.0新特性-Material Design</a> 慕课网上的视频教程</li>
<li><a href="https://www.youtube.com/watch?v=fuSx8J6xLho&amp;list=PLshdtb5UWjSoLy2LPP1FsHi1hwoAS4SBi" target="_blank" rel="external">Android Material Design Tutorial</a> YouTobe 上的视频教程</li>
</ul>
<h2 id="图标"><a href="#图标" class="headerlink" title="图标"></a>图标</h2><ul>
<li><a href="https://www.materialui.co/icons" target="_blank" rel="external">Material UI Icons</a></li>
<li><a href="https://material.io/icons/" target="_blank" rel="external">Material icons</a></li>
<li><a href="https://github.com/google/material-design-icons">material-design-icons</a></li>
<li><a href="http://jaqen.me/mdpub/" target="_blank" rel="external">Android Material 材料风格图标LOGO生成器</a></li>
<li><a href="https://github.com/LPZilva/Google-Material-Icons-for-Sketch">Google-Material-Icons-for-Sketch</a></li>
</ul>
<h2 id="网站"><a href="#网站" class="headerlink" title="网站"></a>网站</h2><ul>
<li><a href="https://www.materialpalette.com/" target="_blank" rel="external">material palette</a> Material Design 调色板</li>
<li><a href="https://material.uplabs.com/" target="_blank" rel="external">MaterialUp</a> 如果你不知道怎样设计一款漂亮的 Material Design 风格的 APP，那你可以参考它，上面有很多漂亮的模板 </li>
<li><a href="http://next.36kr.com/posts/collections/200" target="_blank" rel="external">优秀的 Material Design 产品</a> 收集的都是 Material Desing 风格的应用</li>
</ul>
<h2 id="知乎讨论"><a href="#知乎讨论" class="headerlink" title="知乎讨论"></a>知乎讨论</h2><ul>
<li><a href="https://www.zhihu.com/question/24276657" target="_blank" rel="external">如何理解 Google 的 Material Design 设计语言?</a></li>
<li><a href="https://www.zhihu.com/question/37376355" target="_blank" rel="external">哪些因素阻碍国内 BAT 的移动应用采用 Material Design?</a></li>
<li><a href="https://www.zhihu.com/question/36992060" target="_blank" rel="external">Material Design 设计规范是否不太适合像淘宝这样大而全的厚重的应用程序？</a></li>
<li><a href="https://www.zhihu.com/question/24431206" target="_blank" rel="external">Material Design 有什么缺点？</a></li>
</ul>
<p>感谢上面分享资料的各位大神！最后，如果你们觉得这份资料对你们能起到一点帮助，请给个 star ,谢谢！</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android开发人员不得不收集的代码]]></title>
      <url>https://github.com/pangrongxian/2016/10/22/Android%E5%BC%80%E5%8F%91%E4%BA%BA%E5%91%98%E4%B8%8D%E5%BE%97%E4%B8%8D%E6%94%B6%E9%9B%86%E7%9A%84%E4%BB%A3%E7%A0%81/</url>
      <content type="html"><![CDATA[<p>本文原作者“Blankj”，通过维权骑士授权品牌馆授权转载。</p>
<p><a href="https://github.com/Blankj/AndroidUtilCode/blob/master/README-CN.md">GitHub</a></p>
<p><a href="https://github.com/Blankj/AndroidUtilCode">README of English</a></p>
<p><a href="https://github.com/Blankj/AndroidUtilCode/tree/master/utilcode/src/main/java/com/blankj/utilcode/util">源码</a></p>
<h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><ul>
<li><h2 id="Activity相关→ActivityUtils-java→Demo"><a href="#Activity相关→ActivityUtils-java→Demo" class="headerlink" title="Activity相关→ActivityUtils.java→Demo"></a>Activity相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/util/ActivityUtils.java">ActivityUtils.java</a>→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/app/src/main/java/com/blankj/androidutilcode/activity/ActivityActivity.java">Demo</a></h2></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">isActivityExists   : 判断是否存在Activity</div><div class="line">startActivity      : 打开Activity</div><div class="line">getLauncherActivity: 获取入口activity</div><div class="line">getTopActivity     : 获取栈顶Activity</div></pre></td></tr></table></figure>
<ul>
<li><h2 id="App相关→AppUtils-java→Demo"><a href="#App相关→AppUtils-java→Demo" class="headerlink" title="App相关→AppUtils.java→Demo"></a>App相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/util/AppUtils.java">AppUtils.java</a>→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/app/src/main/java/com/blankj/androidutilcode/activity/AppActivity.java">Demo</a></h2></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">isInstallApp         : 判断App是否安装</div><div class="line">installApp           : 安装App（支持7.0）</div><div class="line">installAppSilent     : 静默安装App</div><div class="line">uninstallApp         : 卸载App</div><div class="line">uninstallAppSilent   : 静默卸载App</div><div class="line">isAppRoot            : 判断App是否有root权限</div><div class="line">launchApp            : 打开App</div><div class="line">getAppPackageName    : 获取App包名</div><div class="line">getAppDetailsSettings: 获取App具体设置</div><div class="line">getAppName           : 获取App名称</div><div class="line">getAppIcon           : 获取App图标</div><div class="line">getAppPath           : 获取App路径</div><div class="line">getAppVersionName    : 获取App版本号</div><div class="line">getAppVersionCode    : 获取App版本码</div><div class="line">isSystemApp          : 判断App是否是系统应用</div><div class="line">isAppDebug           : 判断App是否是Debug版本</div><div class="line">getAppSignature      : 获取App签名</div><div class="line">getAppSignatureSHA1  : 获取应用签名的的SHA1值</div><div class="line">isAppForeground      : 判断App是否处于前台</div><div class="line">getForegroundApp     : 获取前台应用包名</div><div class="line">getAppInfo           : 获取App信息</div><div class="line">getAppsInfo          : 获取所有已安装App信息</div><div class="line">cleanAppData         : 清除App所有数据</div></pre></td></tr></table></figure>
<ul>
<li><h2 id="栏相关→BarUtils-java"><a href="#栏相关→BarUtils-java" class="headerlink" title="栏相关→BarUtils.java"></a>栏相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/util/BarUtils.java">BarUtils.java</a></h2></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">setTransparentStatusBar: 设置透明状态栏（api大于19方可使用）</div><div class="line">hideStatusBar          : 隐藏状态栏</div><div class="line">getStatusBarHeight     : 获取状态栏高度</div><div class="line">isStatusBarExists      : 判断状态栏是否存在</div><div class="line">getActionBarHeight     : 获取ActionBar高度</div><div class="line">showNotificationBar    : 显示通知栏</div><div class="line">hideNotificationBar    : 隐藏通知栏</div></pre></td></tr></table></figure>
<ul>
<li><h2 id="缓存相关→CacheUtils-java→Test"><a href="#缓存相关→CacheUtils-java→Test" class="headerlink" title="缓存相关→CacheUtils.java→Test"></a>缓存相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/util/BarUtils.java">CacheUtils.java</a>→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/test/java/com/blankj/utilcode/util/CacheUtilsTest.java">Test</a></h2></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">getInstance    : 获取缓存实例</div><div class="line">put            : 缓存中写入数据</div><div class="line">getBytes       : 缓存中读取字节数组</div><div class="line">getString      : 缓存中读取String</div><div class="line">getJSONObject  : 缓存中读取JSONObject</div><div class="line">getJSONArray   : 缓存中读取JSONArray</div><div class="line">getBitmap      : 缓存中读取Bitmap</div><div class="line">getDrawable    : 缓存中读取Drawable</div><div class="line">getParcelable  : 缓存中读取Parcelable</div><div class="line">getSerializable: 缓存中读取Serializable</div><div class="line">getCacheSize   : 获取缓存大小</div><div class="line">getCacheCount  : 获取缓存个数</div><div class="line">remove         : 根据键值移除缓存</div><div class="line">clear          : 清除所有缓存</div></pre></td></tr></table></figure>
<ul>
<li><h2 id="清除相关→CleanUtils-java→Demo"><a href="#清除相关→CleanUtils-java→Demo" class="headerlink" title="清除相关→CleanUtils.java→Demo"></a>清除相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/util/CleanUtils.java">CleanUtils.java</a>→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/app/src/main/java/com/blankj/androidutilcode/activity/CleanActivity.java">Demo</a></h2></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">cleanInternalCache   : 清除内部缓存</div><div class="line">cleanInternalFiles   : 清除内部文件</div><div class="line">cleanInternalDbs     : 清除内部数据库</div><div class="line">cleanInternalDbByName: 根据名称清除数据库</div><div class="line">cleanInternalSP      : 清除内部SP</div><div class="line">cleanExternalCache   : 清除外部缓存</div><div class="line">cleanCustomCache     : 清除自定义目录下的文件</div></pre></td></tr></table></figure>
<ul>
<li><h2 id="剪贴板相关→ClipboardUtils-java"><a href="#剪贴板相关→ClipboardUtils-java" class="headerlink" title="剪贴板相关→ClipboardUtils.java"></a>剪贴板相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/util/ClipboardUtils.java">ClipboardUtils.java</a></h2></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">copyText  : 复制文本到剪贴板</div><div class="line">getText   : 获取剪贴板的文本</div><div class="line">copyUri   : 复制uri到剪贴板</div><div class="line">getUri    : 获取剪贴板的uri</div><div class="line">copyIntent: 复制意图到剪贴板</div><div class="line">getIntent : 获取剪贴板的意图</div></pre></td></tr></table></figure>
<ul>
<li><h2 id="关闭相关→CloseUtils-java"><a href="#关闭相关→CloseUtils-java" class="headerlink" title="关闭相关→CloseUtils.java"></a>关闭相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/util/CloseUtils.java">CloseUtils.java</a></h2></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">closeIO       : 关闭IO</div><div class="line">closeIOQuietly: 安静关闭IO</div></pre></td></tr></table></figure>
<ul>
<li><h2 id="转换相关→ConvertUtils-java→Test"><a href="#转换相关→ConvertUtils-java→Test" class="headerlink" title="转换相关→ConvertUtils.java→Test"></a>转换相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/util/ConvertUtils.java">ConvertUtils.java</a>→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/test/java/com/blankj/utilcode/util/ConvertUtilsTest.java">Test</a></h2></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">bytes2HexString, hexString2Bytes        : byteArr 与 hexString 互转</div><div class="line">chars2Bytes, bytes2Chars                : charArr 与 byteArr 互转</div><div class="line">memorySize2Byte, byte2MemorySize        : 以unit为单位的内存大小与字节数互转</div><div class="line">byte2FitMemorySize                      : 字节数转合适内存大小</div><div class="line">timeSpan2Millis, millis2TimeSpan        : 以unit为单位的时间长度与毫秒时间戳互转</div><div class="line">millis2FitTimeSpan                      : 毫秒时间戳转合适时间长度</div><div class="line">bytes2Bits, bits2Bytes                  : bytes 与 bits 互转</div><div class="line">input2OutputStream, output2InputStream  : inputStream 与 outputStream 互转</div><div class="line">inputStream2Bytes, bytes2InputStream    : inputStream 与 byteArr 互转</div><div class="line">outputStream2Bytes, bytes2OutputStream  : outputStream 与 byteArr 互转</div><div class="line">inputStream2String, string2InputStream  : inputStream 与 string 按编码互转</div><div class="line">outputStream2String, string2OutputStream: outputStream 与 string 按编码互转</div><div class="line">bitmap2Bytes, bytes2Bitmap              : bitmap 与 byteArr 互转</div><div class="line">drawable2Bitmap, bitmap2Drawable        : drawable 与 bitmap 互转</div><div class="line">drawable2Bytes, bytes2Drawable          : drawable 与 byteArr 互转</div><div class="line">view2Bitmap                             : view 转 Bitmap</div><div class="line">dp2px, px2dp                            : dp 与 px 互转</div><div class="line">sp2px, px2sp                            : sp 与 px 互转</div></pre></td></tr></table></figure>
<ul>
<li><h2 id="崩溃相关→CrashUtils-java"><a href="#崩溃相关→CrashUtils-java" class="headerlink" title="崩溃相关→CrashUtils.java"></a>崩溃相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/util/CrashUtils.java">CrashUtils.java</a></h2></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">getInstance: 获取单例</div><div class="line">init       : 初始化</div></pre></td></tr></table></figure>
<ul>
<li><h2 id="设备相关→DeviceUtils-java→Demo"><a href="#设备相关→DeviceUtils-java→Demo" class="headerlink" title="设备相关→DeviceUtils.java→Demo"></a>设备相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/util/DeviceUtils.java">DeviceUtils.java</a>→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/app/src/main/java/com/blankj/androidutilcode/activity/DeviceActivity.java">Demo</a></h2></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">isDeviceRooted   : 判断设备是否rooted</div><div class="line">getSDKVersion    : 获取设备系统版本号</div><div class="line">getAndroidID     : 获取设备AndroidID</div><div class="line">getMacAddress    : 获取设备MAC地址</div><div class="line">getManufacturer  : 获取设备厂商</div><div class="line">getModel         : 获取设备型号</div><div class="line">shutdown         : 关机</div><div class="line">reboot           : 重启</div><div class="line">reboot2Recovery  : 重启到recovery</div><div class="line">reboot2Bootloader: 重启到bootloader</div></pre></td></tr></table></figure>
<ul>
<li><h2 id="判空相关→EmptyUtils-java→Test"><a href="#判空相关→EmptyUtils-java→Test" class="headerlink" title="判空相关→EmptyUtils.java→Test"></a>判空相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/util/EmptyUtils.java">EmptyUtils.java</a>→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/test/java/com/blankj/utilcode/util/EmptyUtilsTest.java">Test</a></h2></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">isEmpty   : 判断对象是否为空</div><div class="line">isNotEmpty: 判断对象是否非空</div></pre></td></tr></table></figure>
<ul>
<li><h2 id="编码解码相关→EncodeUtils-java→Test"><a href="#编码解码相关→EncodeUtils-java→Test" class="headerlink" title="编码解码相关→EncodeUtils.java→Test"></a>编码解码相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/util/EncodeUtils.java">EncodeUtils.java</a>→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/test/java/com/blankj/utilcode/util/EncodeUtilsTest.java">Test</a></h2></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">urlEncode          : URL 编码</div><div class="line">urlDecode          : URL 解码</div><div class="line">base64Encode       : Base64 编码</div><div class="line">base64Encode2String: Base64 编码</div><div class="line">base64Decode       : Base64 解码</div><div class="line">base64UrlSafeEncode: Base64URL 安全编码</div><div class="line">htmlEncode         : Html 编码</div><div class="line">htmlDecode         : Html 解码</div></pre></td></tr></table></figure>
<ul>
<li><h2 id="加密解密相关→EncryptUtils-java→Test"><a href="#加密解密相关→EncryptUtils-java→Test" class="headerlink" title="加密解密相关→EncryptUtils.java→Test"></a>加密解密相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/util/EncryptUtils.java">EncryptUtils.java</a>→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/test/java/com/blankj/utilcode/util/EncryptUtilsTest.java">Test</a></h2></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">encryptMD2, encryptMD2ToString                        : MD2加密</div><div class="line">encryptMD5, encryptMD5ToString                        : MD5加密</div><div class="line">encryptMD5File, encryptMD5File2String                 : MD5加密文件</div><div class="line">encryptSHA1, encryptSHA1ToString                      : SHA1加密</div><div class="line">encryptSHA224, encryptSHA224ToString                  : SHA224加密</div><div class="line">encryptSHA256, encryptSHA256ToString                  : SHA256加密</div><div class="line">encryptSHA384, encryptSHA384ToString                  : SHA384加密</div><div class="line">encryptSHA512, encryptSHA512ToString                  : SHA512加密</div><div class="line">encryptHmacMD5, encryptHmacMD5ToString                : HmacMD5加密</div><div class="line">encryptHmacSHA1, encryptHmacSHA1ToString              : HmacSHA1加密</div><div class="line">encryptHmacSHA224, encryptHmacSHA224ToString          : HmacSHA224加密</div><div class="line">encryptHmacSHA256, encryptHmacSHA256ToString          : HmacSHA256加密</div><div class="line">encryptHmacSHA384, encryptHmacSHA384ToString          : HmacSHA384加密</div><div class="line">encryptHmacSHA512, encryptHmacSHA512ToString          : HmacSHA512加密</div><div class="line">encryptDES, encryptDES2HexString, encryptDES2Base64   : DES加密</div><div class="line">decryptDES, decryptHexStringDES, decryptBase64DES     : DES解密</div><div class="line">encrypt3DES, encrypt3DES2HexString, encrypt3DES2Base64: 3DES加密</div><div class="line">decrypt3DES, decryptHexString3DES, decryptBase64_3DES : 3DES解密</div><div class="line">encryptAES, encryptAES2HexString, encryptAES2Base64   : AES加密</div><div class="line">decryptAES, decryptHexStringAES, decryptBase64AES     : AES解密</div></pre></td></tr></table></figure>
<ul>
<li><h2 id="文件相关→FileIOUtils-java→Test"><a href="#文件相关→FileIOUtils-java→Test" class="headerlink" title="文件相关→FileIOUtils.java→Test"></a>文件相关→<a href="">FileIOUtils.java</a>→<a href="">Test</a></h2></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">writeFileFromIS            : 将输入流写入文件</div><div class="line">writeFileFromBytesByStream : 将字节数组写入文件</div><div class="line">writeFileFromBytesByChannel: 将字节数组写入文件</div><div class="line">writeFileFromBytesByMap    : 将字节数组写入文件</div><div class="line">writeFileFromString        : 将字符串写入文件</div><div class="line">readFile2List              : 读取文件到字符串链表中</div><div class="line">readFile2String            : 读取文件到字符串中</div><div class="line">readFile2BytesByStream     : 读取文件到字节数组中</div><div class="line">readFile2BytesByChannel    : 读取文件到字节数组中</div><div class="line">readFile2BytesByMap        : 读取文件到字节数组中</div></pre></td></tr></table></figure>
<ul>
<li><h2 id="文件相关→FileUtils-java→Test"><a href="#文件相关→FileUtils-java→Test" class="headerlink" title="文件相关→FileUtils.java→Test"></a>文件相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/util/FileIOUtils.java">FileUtils.java</a>→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/test/java/com/blankj/utilcode/util/FileUtilsTest.java">Test</a></h2></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">getFileByPath            : 根据文件路径获取文件</div><div class="line">isFileExists             : 判断文件是否存在</div><div class="line">rename                   : 重命名文件</div><div class="line">isDir                    : 判断是否是目录</div><div class="line">isFile                   : 判断是否是文件</div><div class="line">createOrExistsDir        : 判断目录是否存在，不存在则判断是否创建成功</div><div class="line">createOrExistsFile       : 判断文件是否存在，不存在则判断是否创建成功</div><div class="line">createFileByDeleteOldFile: 判断文件是否存在，存在则在创建之前删除</div><div class="line">copyDir                  : 复制目录</div><div class="line">copyFile                 : 复制文件</div><div class="line">moveDir                  : 移动目录</div><div class="line">moveFile                 : 移动文件</div><div class="line">deleteDir                : 删除目录</div><div class="line">deleteFile               : 删除文件</div><div class="line">listFilesInDir           : 获取目录下所有文件</div><div class="line">listFilesInDir           : 获取目录下所有文件包括子目录</div><div class="line">listFilesInDirWithFilter : 获取目录下所有后缀名为suffix的文件</div><div class="line">listFilesInDirWithFilter : 获取目录下所有后缀名为suffix的文件包括子目录</div><div class="line">listFilesInDirWithFilter : 获取目录下所有符合filter的文件</div><div class="line">listFilesInDirWithFilter : 获取目录下所有符合filter的文件包括子目录</div><div class="line">searchFileInDir          : 获取目录下指定文件名的文件包括子目录</div><div class="line">getFileLastModified      : 获取文件最后修改的毫秒时间戳</div><div class="line">getFileCharsetSimple     : 简单获取文件编码格式</div><div class="line">getFileLines             : 获取文件行数</div><div class="line">getDirSize               : 获取目录大小</div><div class="line">getFileSize              : 获取文件大小</div><div class="line">getDirLength             : 获取目录长度</div><div class="line">getFileLength            : 获取文件长度</div><div class="line">getFileMD5               : 获取文件的MD5校验码</div><div class="line">getFileMD5ToString       : 获取文件的MD5校验码</div><div class="line">getDirName               : 根据全路径获取最长目录</div><div class="line">getFileName              : 根据全路径获取文件名</div><div class="line">getFileNameNoExtension   : 根据全路径获取文件名不带拓展名</div><div class="line">getFileExtension         : 根据全路径获取文件拓展名</div></pre></td></tr></table></figure>
<ul>
<li><h2 id="Fragment相关→FragmentUtils-java→Demo"><a href="#Fragment相关→FragmentUtils-java→Demo" class="headerlink" title="Fragment相关→FragmentUtils.java→Demo"></a>Fragment相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/util/FragmentUtils.java">FragmentUtils.java</a>→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/app/src/main/java/com/blankj/androidutilcode/activity/FragmentActivity.java">Demo</a></h2></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">addFragment              : 新增fragment</div><div class="line">hideAddFragment          : 先隐藏后新增fragment</div><div class="line">addFragments             : 新增多个fragment</div><div class="line">removeFragment           : 移除fragment</div><div class="line">removeToFragment         : 移除到指定fragment</div><div class="line">removeFragments          : 移除同级别fragment</div><div class="line">removeAllFragments       : 移除所有fragment</div><div class="line">replaceFragment          : 替换fragment</div><div class="line">popFragment              : 出栈fragment</div><div class="line">popToFragment            : 出栈到指定fragment</div><div class="line">popFragments             : 出栈同级别fragment</div><div class="line">popAllFragments          : 出栈所有fragment</div><div class="line">popAddFragment           : 先出栈后新增fragment</div><div class="line">hideFragment             : 隐藏fragment</div><div class="line">hideFragments            : 隐藏同级别fragment</div><div class="line">showFragment             : 显示fragment</div><div class="line">hideShowFragment         : 先隐藏后显示fragment</div><div class="line">getLastAddFragment       : 获取同级别最后加入的fragment</div><div class="line">getLastAddFragmentInStack: 获取栈中同级别最后加入的fragment</div><div class="line">getTopShowFragment       : 获取顶层可见fragment</div><div class="line">getTopShowFragmentInStack: 获取栈中顶层可见fragment</div><div class="line">getFragments             : 获取同级别fragment</div><div class="line">getFragmentsInStack      : 获取栈中同级别fragment</div><div class="line">getAllFragments          : 获取所有fragment</div><div class="line">getAllFragmentsInStack   : 获取栈中所有fragment</div><div class="line">getPreFragment           : 获取目标fragment的前一个fragment</div><div class="line">findFragment             : 查找fragment</div><div class="line">dispatchBackPress        : 处理fragment回退键</div><div class="line">setBackgroundColor       : 设置背景色</div><div class="line">setBackgroundResource    : 设置背景资源</div><div class="line">setBackground            : 设置背景</div></pre></td></tr></table></figure>
<ul>
<li><h2 id="图片相关→ImageUtils-java→Demo"><a href="#图片相关→ImageUtils-java→Demo" class="headerlink" title="图片相关→ImageUtils.java→Demo"></a>图片相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/util/ImageUtils.java">ImageUtils.java</a>→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/app/src/main/java/com/blankj/androidutilcode/activity/ImageActivity.java">Demo</a></h2></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">bitmap2Bytes, bytes2Bitmap      : bitmap与byteArr互转</div><div class="line">drawable2Bitmap, bitmap2Drawable: drawable与bitmap互转</div><div class="line">drawable2Bytes, bytes2Drawable  : drawable与byteArr互转</div><div class="line">getBitmap                       : 获取bitmap</div><div class="line">scale                           : 缩放图片</div><div class="line">clip                            : 裁剪图片</div><div class="line">skew                            : 倾斜图片</div><div class="line">rotate                          : 旋转图片</div><div class="line">getRotateDegree                 : 获取图片旋转角度</div><div class="line">toRound                         : 转为圆形图片</div><div class="line">toRoundCorner                   : 转为圆角图片</div><div class="line">fastBlur                        : 快速模糊</div><div class="line">renderScriptBlur                : renderScript模糊图片</div><div class="line">stackBlur                       : stack模糊图片</div><div class="line">addFrame                        : 添加颜色边框</div><div class="line">addReflection                   : 添加倒影</div><div class="line">addTextWatermark                : 添加文字水印</div><div class="line">addImageWatermark               : 添加图片水印</div><div class="line">toAlpha                         : 转为alpha位图</div><div class="line">toGray                          : 转为灰度图片</div><div class="line">save                            : 保存图片</div><div class="line">isImage                         : 根据文件名判断文件是否为图片</div><div class="line">getImageType                    : 获取图片类型</div><div class="line">compressByScale                 : 按缩放压缩</div><div class="line">compressByQuality               : 按质量压缩</div><div class="line">compressBySampleSize            : 按采样大小压缩</div></pre></td></tr></table></figure>
<ul>
<li><h2 id="意图相关→IntentUtils-java"><a href="#意图相关→IntentUtils-java" class="headerlink" title="意图相关→IntentUtils.java"></a>意图相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/util/IntentUtils.java">IntentUtils.java</a></h2></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">getInstallAppIntent        : 获取安装App（支持6.0）的意图</div><div class="line">getUninstallAppIntent      : 获取卸载App的意图</div><div class="line">getLaunchAppIntent         : 获取打开App的意图</div><div class="line">getAppDetailsSettingsIntent: 获取App具体设置的意图</div><div class="line">getShareTextIntent         : 获取分享文本的意图</div><div class="line">getShareImageIntent        : 获取分享图片的意图</div><div class="line">getComponentIntent         : 获取其他应用组件的意图</div><div class="line">getShutdownIntent          : 获取关机的意图</div><div class="line">getCaptureIntent           : 获取拍照的意图</div></pre></td></tr></table></figure>
<ul>
<li><h2 id="键盘相关→KeyboardUtils-java→Demo"><a href="#键盘相关→KeyboardUtils-java→Demo" class="headerlink" title="键盘相关→KeyboardUtils.java→Demo"></a>键盘相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/util/KeyboardUtils.java">KeyboardUtils.java</a>→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/app/src/main/java/com/blankj/androidutilcode/activity/KeyboardActivity.java">Demo</a></h2></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">hideSoftInput               : 动态隐藏软键盘</div><div class="line">clickBlankArea2HideSoftInput: 点击屏幕空白区域隐藏软键盘</div><div class="line">showSoftInput               : 动态显示软键盘</div><div class="line">toggleSoftInput             : 切换键盘显示与否状态</div></pre></td></tr></table></figure>
<ul>
<li><h2 id="定位相关→LocationUtils-java→Demo"><a href="#定位相关→LocationUtils-java→Demo" class="headerlink" title="定位相关→LocationUtils.java→Demo"></a>定位相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/util/LocationUtils.java">LocationUtils.java</a>→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/app/src/main/java/com/blankj/androidutilcode/activity/LocationActivity.java">Demo</a></h2></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">isGpsEnabled     : 判断Gps是否可用</div><div class="line">isLocationEnabled: 判断定位是否可用</div><div class="line">openGpsSettings  : 打开Gps设置界面</div><div class="line">register         : 注册</div><div class="line">unregister       : 注销</div><div class="line">getAddress       : 根据经纬度获取地理位置</div><div class="line">getCountryName   : 根据经纬度获取所在国家</div><div class="line">getLocality      : 根据经纬度获取所在地</div><div class="line">getStreet        : 根据经纬度获取所在街道</div><div class="line">isBetterLocation : 是否更好的位置</div><div class="line">isSameProvider   : 是否相同的提供者</div></pre></td></tr></table></figure>
<ul>
<li><h2 id="日志相关→LogUtils-java→Demo"><a href="#日志相关→LogUtils-java→Demo" class="headerlink" title="日志相关→LogUtils.java→Demo"></a>日志相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/util/LogUtils.java">LogUtils.java</a>→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/app/src/main/java/com/blankj/androidutilcode/activity/LogActivity.java">Demo</a></h2></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">Builder.setLogSwitch     : 设置log总开关</div><div class="line">Builder.setConsoleSwitch : 设置log控制台开关</div><div class="line">Builder.setGlobalTag     : 设置log全局tag</div><div class="line">Builder.setLogHeadSwitch : 设置log头部信息开关</div><div class="line">Builder.setLog2FileSwitch: 设置log文件开关</div><div class="line">Builder.setDir           : 设置log文件存储目录</div><div class="line">Builder.setBorderSwitch  : 设置log边框开关</div><div class="line">Builder.setConsoleFilter : 设置log控制台过滤器</div><div class="line">Builder.setFileFilter    : 设置log文件过滤器</div><div class="line">v                        : Verbose日志</div><div class="line">d                        : Debug日志</div><div class="line">i                        : Info日志</div><div class="line">w                        : Warn日志</div><div class="line">e                        : Error日志</div><div class="line">a                        : Assert日志</div><div class="line">file                     : log到文件</div><div class="line">json                     : log字符串之json</div><div class="line">xml                      : log字符串之xml</div></pre></td></tr></table></figure>
<ul>
<li><h2 id="网络相关→NetworkUtils-java→Demo"><a href="#网络相关→NetworkUtils-java→Demo" class="headerlink" title="网络相关→NetworkUtils.java→Demo"></a>网络相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/util/NetworkUtils.java">NetworkUtils.java</a>→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/app/src/main/java/com/blankj/androidutilcode/activity/NetworkActivity.java">Demo</a></h2></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">openWirelessSettings  : 打开网络设置界面</div><div class="line">isConnected           : 判断网络是否连接</div><div class="line">isAvailableByPing     : 判断网络是否可用</div><div class="line">getDataEnabled        : 判断移动数据是否打开</div><div class="line">setDataEnabled        : 打开或关闭移动数据</div><div class="line">is4G                  : 判断网络是否是4G</div><div class="line">getWifiEnabled        : 判断wifi是否打开</div><div class="line">setWifiEnabled        : 打开或关闭wifi</div><div class="line">isWifiConnected       : 判断wifi是否连接状态</div><div class="line">isWifiAvailable       : 判断wifi数据是否可用</div><div class="line">getNetworkOperatorName: 获取移动网络运营商名称</div><div class="line">getNetworkType        : 获取当前网络类型</div><div class="line">getIPAddress          : 获取IP地址</div><div class="line">getDomainAddress      : 获取域名ip地址</div></pre></td></tr></table></figure>
<ul>
<li><h2 id="手机相关→PhoneUtils-java→Demo"><a href="#手机相关→PhoneUtils-java→Demo" class="headerlink" title="手机相关→PhoneUtils.java→Demo"></a>手机相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/util/PhoneUtils.java">PhoneUtils.java</a>→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/app/src/main/java/com/blankj/androidutilcode/activity/PhoneActivity.java">Demo</a></h2></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">isPhone            : 判断设备是否是手机</div><div class="line">getIMEI            : 获取IMEI码</div><div class="line">getIMSI            : 获取IMSI码</div><div class="line">getPhoneType       : 获取移动终端类型</div><div class="line">isSimCardReady     : 判断sim卡是否准备好</div><div class="line">getSimOperatorName : 获取Sim卡运营商名称</div><div class="line">getSimOperatorByMnc: 获取Sim卡运营商名称</div><div class="line">getPhoneStatus     : 获取手机状态信息</div><div class="line">dial               : 跳至拨号界面</div><div class="line">call               : 拨打phoneNumber</div><div class="line">sendSms            : 跳至发送短信界面</div><div class="line">sendSmsSilent      : 发送短信</div><div class="line">getAllContactInfo  : 获取手机联系人</div><div class="line">getContactNum      : 打开手机联系人界面点击联系人后便获取该号码</div><div class="line">getAllSMS          : 获取手机短信并保存到xml中</div></pre></td></tr></table></figure>
<ul>
<li><h2 id="拼音相关→PinyinUtils-java→Test"><a href="#拼音相关→PinyinUtils-java→Test" class="headerlink" title="拼音相关→PinyinUtils.java→Test"></a>拼音相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/util/PinyinUtils.java">PinyinUtils.java</a>→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/test/java/com/blankj/utilcode/util/PinyinUtilsTest.java">Test</a></h2></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">ccs2Pinyin           : 汉字转拼音</div><div class="line">ccs2Pinyin           : 汉字转拼音</div><div class="line">getPinyinFirstLetter : 获取第一个汉字首字母</div><div class="line">getPinyinFirstLetters: 获取所有汉字的首字母</div><div class="line">getSurnamePinyin     : 根据名字获取姓氏的拼音</div><div class="line">getSurnameFirstLetter: 根据名字获取姓氏的首字母</div></pre></td></tr></table></figure>
<ul>
<li><h2 id="进程相关→ProcessUtils-java→Demo"><a href="#进程相关→ProcessUtils-java→Demo" class="headerlink" title="进程相关→ProcessUtils.java→Demo"></a>进程相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/util/ProcessUtils.java">ProcessUtils.java</a>→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/app/src/main/java/com/blankj/androidutilcode/activity/ProcessActivity.java">Demo</a></h2></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">getForegroundProcessName  : 获取前台线程包名</div><div class="line">killAllBackgroundProcesses: 杀死所有的后台服务进程</div><div class="line">killBackgroundProcesses   : 杀死后台服务进程</div></pre></td></tr></table></figure>
<ul>
<li><h2 id="正则相关→RegexUtils-java→Test"><a href="#正则相关→RegexUtils-java→Test" class="headerlink" title="正则相关→RegexUtils.java→Test"></a>正则相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/util/RegexUtils.java">RegexUtils.java</a>→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/test/java/com/blankj/utilcode/util/RegexUtilsTest.java">Test</a></h2></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">isMobileSimple : 验证手机号（简单）</div><div class="line">isMobileExact  : 验证手机号（精确）</div><div class="line">isTel          : 验证电话号码</div><div class="line">isIDCard15     : 验证身份证号码15位</div><div class="line">isIDCard18     : 验证身份证号码18位</div><div class="line">isEmail        : 验证邮箱</div><div class="line">isURL          : 验证URL</div><div class="line">isZh           : 验证汉字</div><div class="line">isUsername     : 验证用户名</div><div class="line">isDate         : 验证yyyy-MM-dd格式的日期校验，已考虑平闰年</div><div class="line">isIP           : 验证IP地址</div><div class="line">isMatch        : 判断是否匹配正则</div><div class="line">getMatches     : 获取正则匹配的部分</div><div class="line">getSplits      : 获取正则匹配分组</div><div class="line">getReplaceFirst: 替换正则匹配的第一部分</div><div class="line">getReplaceAll  : 替换所有正则匹配的部分</div></pre></td></tr></table></figure>
<ul>
<li><h2 id="屏幕相关→ScreenUtils-java"><a href="#屏幕相关→ScreenUtils-java" class="headerlink" title="屏幕相关→ScreenUtils.java"></a>屏幕相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/util/ScreenUtils.java">ScreenUtils.java</a></h2></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">getScreenWidth         : 获取屏幕的宽度（单位：px）</div><div class="line">getScreenHeight        : 获取屏幕的高度（单位：px）</div><div class="line">setLandscape           : 设置屏幕为横屏</div><div class="line">setPortrait            : 设置屏幕为竖屏</div><div class="line">isLandscape            : 判断是否横屏</div><div class="line">isPortrait             : 判断是否竖屏</div><div class="line">getScreenRotation      : 获取屏幕旋转角度</div><div class="line">captureWithStatusBar   : 获取当前屏幕截图，包含状态栏</div><div class="line">captureWithoutStatusBar: 获取当前屏幕截图，不包含状态栏</div><div class="line">isScreenLock           : 判断是否锁屏</div></pre></td></tr></table></figure>
<ul>
<li><h2 id="SD卡相关→SDCardUtils-java→Demo"><a href="#SD卡相关→SDCardUtils-java→Demo" class="headerlink" title="SD卡相关→SDCardUtils.java→Demo"></a>SD卡相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/util/SDCardUtils.java">SDCardUtils.java</a>→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/app/src/main/java/com/blankj/androidutilcode/activity/SDCardActivity.java">Demo</a></h2></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">isSDCardEnable: 判断SD卡是否可用</div><div class="line">getSDCardPath : 获取SD卡路径</div><div class="line">getDataPath   : 获取SD卡Data路径</div><div class="line">getFreeSpace  : 计算SD卡的剩余空间</div><div class="line">getSDCardInfo : 获取SD卡信息</div></pre></td></tr></table></figure>
<ul>
<li><h2 id="服务相关→ServiceUtils-java"><a href="#服务相关→ServiceUtils-java" class="headerlink" title="服务相关→ServiceUtils.java"></a>服务相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/util/ServiceUtils.java">ServiceUtils.java</a></h2></li>
</ul>
<p>getAllRunningService: 获取所有运行的服务<br>startService        : 启动服务<br>stopService         : 停止服务<br>bindService         : 绑定服务<br>unbindService       : 解绑服务<br>isServiceRunning    : 判断服务是否运行</p>
<ul>
<li><h2 id="Shell相关→ShellUtils-java"><a href="#Shell相关→ShellUtils-java" class="headerlink" title="Shell相关→ShellUtils.java"></a>Shell相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/util/ShellUtils.java">ShellUtils.java</a></h2></li>
</ul>
<p>execCmd: 是否是在root下执行命令</p>
<ul>
<li><h2 id="尺寸相关→SizeUtils-java"><a href="#尺寸相关→SizeUtils-java" class="headerlink" title="尺寸相关→SizeUtils.java"></a>尺寸相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/util/SizeUtils.java">SizeUtils.java</a></h2></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">dp2px, px2dp     : dp与px转换</div><div class="line">sp2px, px2sp     : sp与px转换</div><div class="line">applyDimension   : 各种单位转换</div><div class="line">forceGetViewSize : 在onCreate中获取视图的尺寸</div><div class="line">measureView      : 测量视图尺寸</div><div class="line">getMeasuredWidth : 获取测量视图宽度</div><div class="line">getMeasuredHeight: 获取测量视图高度</div></pre></td></tr></table></figure>
<ul>
<li><h2 id="Snackbar相关→SnackbarUtils-java→Demo"><a href="#Snackbar相关→SnackbarUtils-java→Demo" class="headerlink" title="Snackbar相关→SnackbarUtils.java→Demo"></a>Snackbar相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/util/SnackbarUtils.java">SnackbarUtils.java</a>→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/app/src/main/java/com/blankj/androidutilcode/activity/SnackbarActivity.java">Demo</a></h2></li>
</ul>
<p>showShort     : 显示短时snackbar<br>showLong      : 显示长时snackbar<br>showIndefinite: 显示自定义时长snackbar<br>addView       : 为SnackBar添加布局<br>dismiss       : 取消snackbar显示</p>
<ul>
<li><h2 id="SpannableString相关→SpannableStringUtils-java"><a href="#SpannableString相关→SpannableStringUtils-java" class="headerlink" title="SpannableString相关→SpannableStringUtils.java"></a>SpannableString相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/util/SpanUtils.java">SpannableStringUtils.java</a></h2></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">Builder.setFlag           : 设置标识</div><div class="line">Builder.setForegroundColor: 设置前景色</div><div class="line">Builder.setBackgroundColor: 设置背景色</div><div class="line">Builder.setQuoteColor     : 设置引用线的颜色</div><div class="line">Builder.setLeadingMargin  : 设置缩进</div><div class="line">Builder.setMargin         : 设置间距</div><div class="line">Builder.setBullet         : 设置列表标记</div><div class="line">Builder.setFontSize       : 设置字体尺寸</div><div class="line">Builder.setFontProportion : 设置字体比例</div><div class="line">Builder.setFontXProportion: 设置字体横向比例</div><div class="line">Builder.setStrikethrough  : 设置删除线</div><div class="line">Builder.setUnderline      : 设置下划线</div><div class="line">Builder.setSuperscript    : 设置上标</div><div class="line">Builder.setSubscript      : 设置下标</div><div class="line">Builder.setBold           : 设置粗体</div><div class="line">Builder.setItalic         : 设置斜体</div><div class="line">Builder.setBoldItalic     : 设置粗斜体</div><div class="line">Builder.setFontFamily     : 设置字体系列</div><div class="line">Builder.setTypeface       : 设置字体</div><div class="line">Builder.setAlign          : 设置对齐</div><div class="line">Builder.setBitmap         : 设置图片</div><div class="line">Builder.setDrawable       : 设置图片</div><div class="line">Builder.setUri            : 设置图片</div><div class="line">Builder.setResourceId     : 设置图片</div><div class="line">Builder.setClickSpan      : 设置点击事件</div><div class="line">Builder.setUrl            : 设置超链接</div><div class="line">Builder.setBlur           : 设置模糊</div><div class="line">Builder.append            : 追加样式字符串</div><div class="line">Builder.create            : 创建样式字符串</div></pre></td></tr></table></figure>
<ul>
<li><h2 id="SP相关→SPUtils-java→Test"><a href="#SP相关→SPUtils-java→Test" class="headerlink" title="SP相关→SPUtils.java→Test"></a>SP相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/util/SPUtils.java">SPUtils.java</a>→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/test/java/com/blankj/utilcode/util/SPUtilsTest.java">Test</a></h2></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">getInstance: 获取SP实例</div><div class="line">put        : SP中写入数据</div><div class="line">getString  : SP中读取String</div><div class="line">getInt     : SP中读取int</div><div class="line">getLong    : SP中读取long</div><div class="line">getFloat   : SP中读取float</div><div class="line">getBoolean : SP中读取boolean</div><div class="line">getAll     : SP中获取所有键值对</div><div class="line">contains   : SP中是否存在该key</div><div class="line">remove     : SP中移除该key</div><div class="line">clear      : SP中清除所有数据</div></pre></td></tr></table></figure>
<ul>
<li><h2 id="字符串相关→StringUtils-java→Test"><a href="#字符串相关→StringUtils-java→Test" class="headerlink" title="字符串相关→StringUtils.java→Test"></a>字符串相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/util/StringUtils.java">StringUtils.java</a>→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/test/java/com/blankj/utilcode/util/StringUtilsTest.java">Test</a></h2></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">isEmpty         : 判断字符串是否为null或长度为0</div><div class="line">isTrimEmpty     : 判断字符串是否为null或全为空格</div><div class="line">isSpace         : 判断字符串是否为null或全为空白字符</div><div class="line">equals          : 判断两字符串是否相等</div><div class="line">equalsIgnoreCase: 判断两字符串忽略大小写是否相等</div><div class="line">null2Length0    : null转为长度为0的字符串</div><div class="line">length          : 返回字符串长度</div><div class="line">upperFirstLetter: 首字母大写</div><div class="line">lowerFirstLetter: 首字母小写</div><div class="line">reverse         : 反转字符串</div><div class="line">toDBC           : 转化为半角字符</div><div class="line">toSBC           : 转化为全角字符</div></pre></td></tr></table></figure>
<ul>
<li><h2 id="线程池相关→ThreadPoolUtils-java"><a href="#线程池相关→ThreadPoolUtils-java" class="headerlink" title="线程池相关→ThreadPoolUtils.java"></a>线程池相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/util/ThreadPoolUtils.java">ThreadPoolUtils.java</a></h2></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">ThreadPoolUtils       : ThreadPoolUtils构造函数</div><div class="line">execute               : 在未来某个时间执行给定的命令</div><div class="line">execute               : 在未来某个时间执行给定的命令链表</div><div class="line">shutDown              : 待以前提交的任务执行完毕后关闭线程池</div><div class="line">shutDownNow           : 试图停止所有正在执行的活动任务</div><div class="line">isShutDown            : 判断线程池是否已关闭</div><div class="line">isTerminated          : 关闭线程池后判断所有任务是否都已完成</div><div class="line">awaitTermination      : 请求关闭、发生超时或者当前线程中断</div><div class="line">submit                : 提交一个Callable任务用于执行</div><div class="line">submit                : 提交一个Runnable任务用于执行</div><div class="line">invokeAll, invokeAny  : 执行给定的任务</div><div class="line">schedule              : 延迟执行Runnable命令</div><div class="line">schedule              : 延迟执行Callable命令</div><div class="line">scheduleWithFixedRate : 延迟并循环执行命令</div><div class="line">scheduleWithFixedDelay: 延迟并以固定休息时间循环执行命令</div></pre></td></tr></table></figure>
<ul>
<li><h2 id="时间相关→TimeUtils-java→Test"><a href="#时间相关→TimeUtils-java→Test" class="headerlink" title="时间相关→TimeUtils.java→Test"></a>时间相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/util/TimeUtils.java">TimeUtils.java</a>→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/test/java/com/blankj/utilcode/util/TimeUtilsTest.java">Test</a></h2></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">millis2String           : 将时间戳转为时间字符串</div><div class="line">string2Millis           : 将时间字符串转为时间戳</div><div class="line">string2Date             : 将时间字符串转为Date类型</div><div class="line">date2String             : 将Date类型转为时间字符串</div><div class="line">date2Millis             : 将Date类型转为时间戳</div><div class="line">millis2Date             : 将时间戳转为Date类型</div><div class="line">getTimeSpan             : 获取两个时间差（单位：unit）</div><div class="line">getFitTimeSpan          : 获取合适型两个时间差</div><div class="line">getNowMills             : 获取当前毫秒时间戳</div><div class="line">getNowString            : 获取当前时间字符串</div><div class="line">getNowDate              : 获取当前Date</div><div class="line">getTimeSpanByNow        : 获取与当前时间的差（单位：unit）</div><div class="line">getFitTimeSpanByNow     : 获取合适型与当前时间的差</div><div class="line">getFriendlyTimeSpanByNow: 获取友好型与当前时间的差</div><div class="line">getMillis               : 获取与给定时间等于时间差的时间戳</div><div class="line">getString               : 获取与给定时间等于时间差的时间字符串</div><div class="line">getDate                 : 获取与给定时间等于时间差的Date</div><div class="line">getMillisByNow          : 获取与当前时间等于时间差的时间戳</div><div class="line">getStringByNow          : 获取与当前时间等于时间差的时间字符串</div><div class="line">getDateByNow            : 获取与当前时间等于时间差的Date</div><div class="line">isToday                 : 判断是否今天</div><div class="line">isLeapYear              : 判断是否闰年</div><div class="line">getChineseWeek          : 获取中式星期</div><div class="line">getUSWeek               : 获取美式式星期</div><div class="line">getWeekIndex            : 获取星期索引</div><div class="line">getWeekOfMonth          : 获取月份中的第几周</div><div class="line">getWeekOfYear           : 获取年份中的第几周</div><div class="line">getChineseZodiac        : 获取生肖</div><div class="line">getZodiac               : 获取星座</div></pre></td></tr></table></figure>
<ul>
<li><h2 id="吐司相关→ToastUtils-java→Demo"><a href="#吐司相关→ToastUtils-java→Demo" class="headerlink" title="吐司相关→ToastUtils.java→Demo"></a>吐司相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/util/ToastUtils.java">ToastUtils.java</a>→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/app/src/main/java/com/blankj/androidutilcode/activity/ToastActivity.java">Demo</a></h2></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">setGravity   : 设置吐司位置</div><div class="line">setView      : 设置吐司view</div><div class="line">getView      : 获取吐司view</div><div class="line">showShortSafe: 安全地显示短时吐司</div><div class="line">showLongSafe : 安全地显示长时吐司</div><div class="line">showShort    : 显示短时吐司</div><div class="line">showLong     : 显示长时吐司</div><div class="line">cancel       : 取消吐司显示</div></pre></td></tr></table></figure>
<ul>
<li><h2 id="压缩相关→ZipUtils-java→Test"><a href="#压缩相关→ZipUtils-java→Test" class="headerlink" title="压缩相关→ZipUtils.java→Test"></a>压缩相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/util/ZipUtils.java">ZipUtils.java</a>→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/test/java/com/blankj/utilcode/util/ZipUtilsTest.java">Test</a></h2></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">zipFiles          : 批量压缩文件</div><div class="line">zipFile           : 压缩文件</div><div class="line">unzipFiles        : 批量解压文件</div><div class="line">unzipFile         : 解压文件</div><div class="line">unzipFileByKeyword: 解压带有关键字的文件</div><div class="line">getFilesPath      : 获取压缩文件中的文件路径链表</div><div class="line">getComments       : 获取压缩文件中的注释链表</div><div class="line">getEntries        : 获取压缩文件中的文件对象</div></pre></td></tr></table></figure>
<h2 id="更新Log→update-log-md"><a href="#更新Log→update-log-md" class="headerlink" title="更新Log→update_log.md"></a>更新Log→update_log.md</h2><hr>
<ul>
<li>做这份整理是想把它作为Android开发的小字典，当遇到一些琐碎问题时，不用再面向百度或者谷歌查询API的使用，费时费力，这里有的话，大家尽管撸走；同时也希望它能逐日壮大起来，期待大家的Star和完善，当然我也会一直更新发布版本和日志，为了方便大家导入，现已上传jcenter；其中很多代码也是汇四方之精华，谢谢前辈们的提供，当然最终还是要通过单元测试的，如有错误，请及时告之。</li>
</ul>
<h2 id="Download"><a href="#Download" class="headerlink" title="Download"></a>Download</h2><h4 id="Gradle"><a href="#Gradle" class="headerlink" title="Gradle:"></a>Gradle:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile &apos;com.blankj:utilcode:1.6.3&apos;</div></pre></td></tr></table></figure>
<h2 id="How-to-use"><a href="#How-to-use" class="headerlink" title="How to use"></a>How to use</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// init it in the function of onCreate in ur Application</div><div class="line">Utils.init(context);</div></pre></td></tr></table></figure>
<h2 id="Proguard"><a href="#Proguard" class="headerlink" title="Proguard"></a>Proguard</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">-keep class com.blankj.utilcode.** &#123; *; &#125;</div><div class="line">-keepclassmembers class com.blankj.utilcode.** &#123; *; &#125;</div><div class="line">-dontwarn com.blankj.utilcode.**</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android 消息处理机制（Looper、Handler、MessageQueue,Message）]]></title>
      <url>https://github.com/pangrongxian/2016/10/18/Android%20%E6%B6%88%E6%81%AF%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6%EF%BC%88Looper%E3%80%81Handler%E3%80%81MessageQueue,Message%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>转自：<a href="http://www.jianshu.com/p/02962454adf7" target="_blank" rel="external">http://www.jianshu.com/p/02962454adf7</a></p>
<pre><code>【转载请明显注明出处，尊重劳动成果】 
</code></pre><p>Android 消息处理机制估计都被写烂了，但是依然还是要写一下，因为Android应用程序是通过消息来驱动的，Android某种意义上也可以说成是一个以消息驱动的系统，UI、事件、生命周期都和消息处理机制息息相关，并且消息处理机制在整个Android知识体系中也是尤其重要，在太多的源码分析的文章讲得比较繁琐，很多人对整个消息处理机制依然是懵懵懂懂，这篇文章通过一些问答的模式结合Android主线程（UI线程）的工作原理来讲解，源码注释很全，还有结合流程图，如果你对Android消息处理机制还不是很理解，我相信只要你静下心来耐心的看，肯定会有不少的收获的。</p>
<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h3 id="1、我们先说下什么是Android消息处理机制？"><a href="#1、我们先说下什么是Android消息处理机制？" class="headerlink" title="1、我们先说下什么是Android消息处理机制？"></a>1、我们先说下什么是Android消息处理机制？</h3><p>消息处理机制本质：<strong>一个线程开启循环模式持续监听并依次处理其他线程给它发的消息。</strong></p>
<p>简单的说：一个线程开启一个无限循环模式，不断遍历自己的消息列表，如果有消息就挨个拿出来做处理，如果列表没消息，自己就堵塞（相当于wait，让出cpu资源给其他线程），其他线程如果想让该线程做什么事，就往该线程的消息队列插入消息，该线程会不断从队列里拿出消息做处理。</p>
<h3 id="2、Android消息处理机制的工作原理？"><a href="#2、Android消息处理机制的工作原理？" class="headerlink" title="2、Android消息处理机制的工作原理？"></a>2、Android消息处理机制的工作原理？</h3><p>打个比方：公司类比App</p>
<ul>
<li>PM 的主要工作是设计产品，写需求文档，改需求,中途改需求，提测前改需求…</li>
<li>UI 主要工作是UI设计，交互等。</li>
<li>RD 工作我就不说了</li>
<li>CEO 不解释。</li>
</ul>
<p>公司开创之后（App启动），那么CEO开始干活了（主线程【UI线程】启动），这时候CEO开启了无限循环工作狂模式，自己的公司没办法啊（相当于UI主线程转成Looper线程【源码里面有】）CEO招了一名RD（new Handler 实例）并把告诉PM和UI,如果你们有什么任务和需求就让RD（Handler实例）转告给我（CEO）。RD会把PM和UI的需求（Message）一条条记到CEO的备忘录里（MessageQueue）。CEO 无限循环的工作就是不断查看备忘录，看有什么任务要做，有任务就从备忘录一条一条拿出任务来，然后交给这一名RD（Handler 实例）去处理（毕竟CEO 不会写代码 囧…）。当然如果备忘录都做完了，这时候CEO就会去睡觉（线程堵塞【简单理解成线程wait】，让出CPU资源，让其他线程去执行）。但是这个备忘录有个特殊的功能就是没有任务的时候突然插入第一条任务（从无到有）就会有闹钟功能叫醒CEO起床继续处理备忘录。 整个消息处理机制的工作原理基本就是这样的。后面会有源码分析，你再来结合这个场景，会更好理解一些。</p>
<p>这里先给一张Android消息处理机制流程图和具体执行动画，如果看不懂没事，接着往下看（后面会结合Android UI主线程来讲解），然后结合着图和动画一块看更能理解整个机制的实现原理。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/966283-3e81643b7e2604ef.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p><img src="http://upload-images.jianshu.io/upload_images/966283-bd9c24f19114108a.gif?imageMogr2/auto-orient/strip" alt=""></p>
<h3 id="3、Looper、Handler、MessageQueue-Message作用和存在的意义？"><a href="#3、Looper、Handler、MessageQueue-Message作用和存在的意义？" class="headerlink" title="3、Looper、Handler、MessageQueue,Message作用和存在的意义？"></a>3、Looper、Handler、MessageQueue,Message作用和存在的意义？</h3><ul>
<li><h3 id="Looper"><a href="#Looper" class="headerlink" title="Looper"></a>Looper</h3></li>
</ul>
<p>我们知道一个线程是一段可执行的代码，当可执行代码执行完成后，线程生命周期便会终止，线程就会退出，那么做为App的主线程，如果代码段执行完了会怎样？，那么就会出现App启动后执行一段代码后就自动退出了，这是很不合理的。所以为了防止代码段被执行完，只能在代码中插入一个死循环，那么代码就不会被执行完，然后自动退出，怎么在在代码中插入一个死循环呢？那么Looper出现了，在主线程中调用Looper.prepare()…Looper.loop()就会变当前线程变成Looper线程（可以先简单理解：无限循环不退出的线程），Looper.loop()方法里面有一段死循环的代码，所以主线程会进入while(true){…}的代码段跳不出来，但是主线程也不能什么都不做吧？其实所有做的事情都在while(true){…}里面做了，主线程会在死循环中不断等其他线程给它发消息（消息包括：Activity启动，生命周期，更新UI，控件事件等），一有消息就根据消息做相应的处理，Looper的另外一部分工作就是在循环代码中会不断从消息队列挨个拿出消息给主线程处理。</p>
<ul>
<li><h3 id="MessageQueue"><a href="#MessageQueue" class="headerlink" title="MessageQueue"></a>MessageQueue</h3></li>
</ul>
<p>MessageQueue 存在的原因很简单，就是同一线程在同一时间只能处理一个消息，同一线程代码执行是不具有并发性，所以需要队列来保存消息和安排每个消息的处理顺序。多个其他线程往UI线程发送消息，UI线程必须把这些消息保持到一个列表（它同一时间不能处理那么多任务),然后挨个拿出来处理，这种设计很简单，我们平时写代码其实也经常这么做。每一个Looper线程都会维护这样一个队列，而且仅此一个，这个队列的消息只能由该线程处理<strong>。</strong></p>
<ul>
<li><h3 id="Handler"><a href="#Handler" class="headerlink" title="Handler"></a>Handler</h3></li>
</ul>
<p>简单说Handler用于同一个进程的线程间通信。Looper让主线程无限循环地从自己的MessageQueue拿出消息处理，既然这样我们就知道<strong>处理消息肯定是在主线程中处理的</strong>，那么怎样在其他的线程往主线程的队列里放入消息呢？其实很简单，我们知道在同一进程中线程和线程之间资源是共享的，也就是对于任何变量在任何线程都是可以访问和修改的，只要考虑并发性做好同步就行了，那么只要拿到MessageQueue 的实例，就可以往主线程的MessageQueue放入消息，主线程在轮询的时候就会<strong>在主线程</strong>处理这个消息。那么怎么拿到主线程 MessageQueue的实例，是可以拿到的(在主线程下mLooper = Looper.myLooper();mQueue = mLooper.mQueue;),但是Google 为了统一添加消息和消息的回调处理，又专门构建了Handler类，你只要在主线程构建Handler类，那么这个Handler实例就获取主线程MessageQueue实例的引用（获取方式mLooper = Looper.myLooper();mQueue = mLooper.mQueue;），Handler 在sendMessage的时候就通过这个引用往消息队列里插入新消息。Handler 的另外一个作用，就是能统一处理消息的回调。这样一个Handler发出消息又确保消息处理也是自己来做，这样的设计非常的赞。具体做法就是在队列里面的Message持有Handler的引用（哪个handler 把它放到队列里，message就持有了这个handler的引用），然后等到主线程轮询到这个message的时候，就来回调我们经常重写的Handler的handleMessage(Message msg)方法。</p>
<ul>
<li><h3 id="Message"><a href="#Message" class="headerlink" title="Message"></a>Message</h3></li>
</ul>
<p>Message 很简单了，你想让主线程做什么事，总要告诉它吧，总要传递点数据给它吧，Message就是这个载体。</p>
<h1 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h1><p>接下来我们会结合App主线程（UI线程）来讲解，从App启动后一步一步往下走分析整个Android的消息处理机制，首先在ActivityThread类有我们熟悉的main的函数，App启动的代码的入口就在这里，UI线程本来只是一个普通线程，在这里会把UI线程转换成Looper线程，什么是Looper线程，不急往下看就知道了。</p>
<p>public final class ActivityThread {<br>    public static final void main(String[] args) {<br>        ……<br>        Looper.prepareMainLooper();<br>        ……<br>        ActivityThread thread = new ActivityThread();<br>        thread.attach(false);</p>
<pre><code>    if (sMainThreadHandler == null) {    
        sMainThreadHandler = thread.getHandler();
    }
    ......
    Looper.loop();
    ......
}
</code></pre><p>}</p>
<p>首先执行的是 <strong>Looper.prepareMainLooper()</strong> 我们来看下 <strong>Looper</strong> 里面的这个方法做了什么？</p>
<blockquote>
<p>注:看之前先稍微了解下ThreadLocal是什么？<br>ThreadLocal： 线程本地存储区（Thread Local Storage，简称为TLS），每个线程<br>都有自己的私有的本地存储区域，不同线程之间彼此不能访问对方的TLS区域。<br>这里线程自己的本地存储区域存放是线程自己的Looper。<br>具体看下ThreadLocal.java 的源码！</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">public final class Looper &#123;</div><div class="line">    // sThreadLocal 是static的变量，可以先简单理解它相当于map，key是线程，value是Looper，</div><div class="line">    //那么你只要用当前的线程就能通过sThreadLocal获取当前线程所属的Looper。</div><div class="line">    static final ThreadLocal&lt;Looper&gt; sThreadLocal = new ThreadLocal&lt;Looper&gt;();</div><div class="line">    //主线程（UI线程）的Looper 单独处理，是static类型的，通过下面的方法getMainLooper() </div><div class="line">    //可以方便的获取主线程的Looper。</div><div class="line">    private static Looper sMainLooper; </div><div class="line"></div><div class="line">    //Looper 所属的线程的消息队列</div><div class="line">    final MessageQueue mQueue;</div><div class="line">    //Looper 所属的线程</div><div class="line">    final Thread mThread;</div><div class="line"></div><div class="line">    public static void prepare() &#123;</div><div class="line">        prepare(true);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private static void prepare(boolean quitAllowed) &#123;</div><div class="line">         //如果线程的TLS已有数据，则会抛出异常，一个线程只能有一个Looper，prepare不能重复调用。</div><div class="line">        if (sThreadLocal.get() != null) &#123;</div><div class="line">            throw new RuntimeException(&quot;Only one Looper may be created per thread&quot;);</div><div class="line">        &#125;</div><div class="line">        //往线程的TLS插入数据，简单理解相当于map.put(Thread.currentThread(),new Looper(quitAllowed));</div><div class="line">        sThreadLocal.set(new Looper(quitAllowed));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //实际上是调用  prepare(false)，并然后给sMainLooper赋值。</div><div class="line">    public static void prepareMainLooper() &#123;</div><div class="line">        prepare(false);</div><div class="line">        synchronized (Looper.class) &#123;</div><div class="line">            if (sMainLooper != null) &#123;</div><div class="line">                throw new IllegalStateException(&quot;The main Looper has already been prepared.&quot;);</div><div class="line">            &#125;</div><div class="line">            sMainLooper = myLooper();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    //static 方法，方便获取主线程的Looper.</div><div class="line">    public static Looper getMainLooper() &#123;</div><div class="line">        synchronized (Looper.class) &#123;</div><div class="line">            return sMainLooper;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static @Nullable Looper myLooper() &#123;</div><div class="line">        //具体看ThreadLocal类的源码的get方法，</div><div class="line">        //简单理解相当于map.get(Thread.currentThread()) 获取当前线程的Looper</div><div class="line">        return sThreadLocal.get();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>看了上面的代码（仔细看下注释），我们发现 <strong>Looper.prepareMainLooper()</strong> 做的事件就是new了一个 <strong>Looper</strong> 实例并放入Looper类下面一个static的ThreadLocal<looper> sThreadLocal静态变量中，同时给sMainLooper赋值,给 <strong>sMainLooper</strong> 赋值是为了方便通过 <strong>Looper.getMainLooper()</strong> 快速获取主线程的 <strong>Looper，sMainLooper</strong> 是主线程的Looper可能获取会比较频繁，避免每次都到 sThreadLocal 去查找获取。</looper></p>
<p>接下来重点是看下Looper的构造函数，看看在new Looper的时候做了什么事？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">private Looper(boolean quitAllowed) &#123;</div><div class="line">        mQueue = new MessageQueue(quitAllowed);</div><div class="line">        mThread = Thread.currentThread();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>看到没有，这时候给当前线程创建了消息队列MessageQueue，并且让<strong>Looper持有MessageQueue的引用</strong>。执行完Looper.prepareMainLooper() 之后，主线程从普通线程转成一个Looper线程。目前的主线程线程已经有一个Looper对象和一个消息队列mQueue,引用关系如下图：（主线程可以轻松获取它的Looper，主线程的Looper持有主线程消息队列的引用）</p>
<p><img src="http://upload-images.jianshu.io/upload_images/966283-06ddfa1dc60f19bd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/540" alt=""></p>
<p>具体如何获取主线程的Looper对象和消息列表呢？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//在主线程中执行</div><div class="line">mLooper = Looper.myLooper();</div><div class="line">mQueue = mLooper.mQueue</div><div class="line">//或者</div><div class="line">mLooper=Looper.getMainLooper()</div></pre></td></tr></table></figure>
<p>接下来回到ActivityThread 的main函数，执行完Looper.prepareMainLooper() 之后下一句代码是ActivityThread thread = new ActivityThread();这句话就是创建一下ActivityThread对象，这边需要注意的时候ActivityThread并不是一个线程，它并没有继承Thread，而只是一个普通的类public final class ActivityThread{…}ActivityThread的构造函数并没有做什么事只是初始化了资源管理器。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ActivityThread() &#123;</div><div class="line">     mResourcesManager = ResourcesManager.getInstance();</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>接着往下看下一行代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ActivityThread thread = new ActivityThread();</div><div class="line">//建立Binder通道 (创建新线程)</div><div class="line">thread.attach(false);</div></pre></td></tr></table></figure>
<p><strong>thread.attach(false)</strong>;便会创建一个Binder线程（具体是指ApplicationThread，该Binder线程会通过想 Handler将Message发送给主线程，之后讲)。我们之前提到主线程最后会进入无限循环当中，如果没有在进入死循环之前创建其他线程，那么待会谁会给主线程发消息呢？，没错就是在这里创建了这个线程，这个线程会接收来自系统服务发送来的一些事件封装了Message并发送给主线程，主线程在无限循环中从队列里拿到这些消息并处理这些消息。（Binder线程发生的消息包括LAUNCH_ACTIVITY，PAUSE_ACTIVITY 等等）</p>
<p>继续回到mian 函数的下一句代码Looper.loop() 那么重点来了，我们来看下Looper.loop()的源码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">public static void loop() &#123;</div><div class="line">    final Looper me = myLooper();  //获取TLS存储的Looper对象,获取当前线程的Looper </div><div class="line">    if (me == null) &#123;</div><div class="line">        throw new RuntimeException(&quot;No Looper; Looper.prepare() wasn&apos;t called on this thread.&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    final MessageQueue queue = me.mQueue;  //获取Looper对象中的消息队列</div><div class="line">    ....</div><div class="line"></div><div class="line">    for (;;) &#123; //主线程开启无限循环模式</div><div class="line">        Message msg = queue.next(); //获取队列中的下一条消息，可能会线程阻塞</div><div class="line">        if (msg == null) &#123; //没有消息，则退出循环，退出消息循环，那么你的程序也就可以退出了</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        ....</div><div class="line">        //分发Message，msg.target 是一个Handler对象，哪个Handler把这个Message发到队列里，</div><div class="line">        //这个Message会持有这个Handler的引用，并放到自己的target变量中,这样就可以回调我们重写</div><div class="line">        //的handler的handleMessage方法。</div><div class="line">        msg.target.dispatchMessage(msg);</div><div class="line">        ....</div><div class="line">        ....</div><div class="line">        msg.recycleUnchecked();  //将Message回收到消息池,下次要用的时候不需要重新创建，obtain()就可以了。</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的代码，大家具体看下注释，这时候主线程（UI线程）执行到这一步就进入了死循环，不断地去拿消息队列里面的消息出来处理？那么问题来了<br>1、UI线程一直在这个循环里跳不出来，主线程不会因为Looper.loop()里的死循环卡死吗，那还怎么执行其他的操作呢？</p>
<ul>
<li><p>在looper启动后，主线程上执行的任何代码都是被looper从消息队列里取出来执行的。也就是说主线程之后都是通过其他线程给它发消息来实现执行其他操作的。生命周期的回调也是如此的，系统服务ActivityManagerService通过Binder发送IPC调用给APP进程，App进程接到到调用后，通过App进程的Binder线程给主线程的消息队列插入一条消息来实现的。<br>2、主线程是UI线程和用户交互的线程，优先级应该很高，主线程的死循环一直运行是不是会特别消耗CPU资源吗？App进程的其他线程怎么办？</p>
</li>
<li><p>这基本是一个类似生产者消费者的模型，简单说如果在主线程的MessageQueue没有消息时，就会阻塞在loop的queue.next()方法里，这时候主线程会释放CPU资源进入休眠状态，直到有下个消息进来时候就会唤醒主线程，在2.2 版本以前，这套机制是用我们熟悉的线程的wait和notify 来实现的，之后的版本涉及到Linux pipe/epoll机制，通过往pipe管道写端写入数据来唤醒主线程工作。原理类似于I/O,读写是堵塞的，不占用CPU资源。</p>
</li>
</ul>
<p>所以上面代码的重点是 <strong>queue.next()</strong> 的函数，其他的我们就不多说了，我们来看下 <strong>queue.next()</strong> 的源码（主要还是看注释）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line">Message next() </div><div class="line"></div><div class="line">        final long ptr = mPtr;</div><div class="line">        if (ptr == 0) &#123;</div><div class="line">            return null;</div><div class="line">        &#125;</div><div class="line">        int pendingIdleHandlerCount = -1; // -1 only during first iteration</div><div class="line"></div><div class="line">        //nextPollTimeoutMillis 表示nativePollOnce方法需要等待nextPollTimeoutMillis </div><div class="line">        //才会返回</div><div class="line">        int nextPollTimeoutMillis = 0;</div><div class="line">        for (;;) &#123;</div><div class="line">            if (nextPollTimeoutMillis != 0) &#123;</div><div class="line">                Binder.flushPendingCommands();</div><div class="line">            &#125;</div><div class="line">            //读取消息，队里里没有消息有可能会堵塞，两种情况该方法才会返回(代码才能往下执行)</div><div class="line">            //一种是等到有消息产生就会返回,</div><div class="line">            //另一种是当等了nextPollTimeoutMillis时长后，nativePollOnce也会返回</div><div class="line">            nativePollOnce(ptr, nextPollTimeoutMillis);</div><div class="line">            //nativePollOnce 返回之后才能往下执行</div><div class="line">            synchronized (this) &#123;</div><div class="line">                // Try to retrieve the next message.  Return if found.</div><div class="line">                final long now = SystemClock.uptimeMillis();</div><div class="line">                Message prevMsg = null;</div><div class="line">                Message msg = mMessages;</div><div class="line">                if (msg != null &amp;&amp; msg.target == null) &#123;</div><div class="line">                    // 循环找到一条不是异步而且msg.target不为空的message</div><div class="line">                    do &#123;</div><div class="line">                        prevMsg = msg;</div><div class="line">                        msg = msg.next;</div><div class="line">                    &#125; while (msg != null &amp;&amp; !msg.isAsynchronous());</div><div class="line">                &#125;</div><div class="line">                if (msg != null) &#123;</div><div class="line">                    if (now &lt; msg.when) &#123;</div><div class="line">                       // 虽然有消息，但是还没有到运行的时候，像我们经常用的postDelay,</div><div class="line">                       //计算出离执行时间还有多久赋值给nextPollTimeoutMillis，</div><div class="line">                       //表示nativePollOnce方法要等待nextPollTimeoutMillis时长后返回</div><div class="line">                        nextPollTimeoutMillis = (int) Math.min(msg.when - now, Integer.MAX_VALUE);</div><div class="line">                    &#125; else &#123;</div><div class="line">                        // 获取到消息</div><div class="line">                        mBlocked = false;</div><div class="line">                       //链表一些操作，获取msg并且删除该节点 </div><div class="line">                        if (prevMsg != null) </div><div class="line">                            prevMsg.next = msg.next;</div><div class="line">                        &#125; else &#123;</div><div class="line">                            mMessages = msg.next;</div><div class="line">                        &#125;</div><div class="line">                        msg.next = null；</div><div class="line">                        msg.markInUse();</div><div class="line">                        //返回拿到的消息</div><div class="line">                        return msg;</div><div class="line">                    &#125;</div><div class="line">                &#125; else &#123;</div><div class="line">                    //没有消息，nextPollTimeoutMillis复位</div><div class="line">                    nextPollTimeoutMillis = -1;</div><div class="line">                &#125;</div><div class="line">                .....</div><div class="line">                .....</div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>nativePollOnce()很重要，是一个native的函数，在native做了大量的工作，主要涉及到epoll机制的处理（在没有消息处理时阻塞在管道的读端），具体关于native相关的源码本篇文章不涉及，感兴趣的同学可以网上找找，有不少分析得比较深。</p>
<p>分析到这里，从应用启动创建Looper，创建消息队列，到进入loop方法执行无限循环中，那么这一块就告一段落了，主线程已经在死循环里轮询等待消息了，接下来我们就要再看看，系统是怎么发消息给主线程的，主线程是怎么处理这些个消息的？</p>
<p>在准备启动一个Activity的时候，系统服务进程下的ActivityManagerService（简称AMS）线程会通过Binder发送IPC调用给APP进程，App进程接到到调用后，通过App进程下的Binder线程最终调用ActivityThread类下面的scheduleLaunchActivity方法来准备启动Activity，看下scheduleLaunchActivity方法:</p>
<blockquote>
<p>注：Binder线程：具体是指ApplicationThread，在App进程中接受系统进程传递过来的信息的线程（在主线程进入死循环之前创建了这个线程）。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">//这个方法不是在主线程调用，是Binder线程下调用的</div><div class="line">  public final void scheduleLaunchActivity(Intent intent, IBinder token, int ident,</div><div class="line">                ActivityInfo info, Configuration curConfig, Configuration overrideConfig,</div><div class="line">                CompatibilityInfo compatInfo, String referrer, IVoiceInteractor voiceInteractor,</div><div class="line">                int procState, Bundle state, PersistableBundle persistentState,</div><div class="line">                List&lt;ResultInfo&gt; pendingResults, List&lt;ReferrerIntent&gt; pendingNewIntents,</div><div class="line">                boolean notResumed, boolean isForward, ProfilerInfo profilerInfo) &#123;</div><div class="line"></div><div class="line">            updateProcessState(procState, false);</div><div class="line"></div><div class="line">            ActivityClientRecord r = new ActivityClientRecord();</div><div class="line"></div><div class="line">            r.token = token;</div><div class="line">            r.ident = ident;</div><div class="line">            r.intent = intent;</div><div class="line">            r.referrer = referrer;</div><div class="line">            r.voiceInteractor = voiceInteractor;</div><div class="line">            r.activityInfo = info;</div><div class="line">            r.compatInfo = compatInfo;</div><div class="line">            r.state = state;</div><div class="line">            r.persistentState = persistentState;</div><div class="line"></div><div class="line">            r.pendingResults = pendingResults;</div><div class="line">            r.pendingIntents = pendingNewIntents;</div><div class="line"></div><div class="line">            r.startsNotResumed = notResumed;</div><div class="line">            r.isForward = isForward;</div><div class="line"></div><div class="line">            r.profilerInfo = profilerInfo;</div><div class="line"></div><div class="line">            r.overrideConfig = overrideConfig;</div><div class="line">            updatePendingConfiguration(curConfig);</div><div class="line"></div><div class="line">            sendMessage(H.LAUNCH_ACTIVITY, r);</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>把启动一些信息封装成ActivityClientRecord之后，最后一句调用sendMessage(H.LAUNCH_ACTIVITY, r);我们接着往下看:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">private void sendMessage(int what, Object obj) &#123;</div><div class="line">        sendMessage(what, obj, 0, 0, false);</div><div class="line">    &#125;</div><div class="line">private void sendMessage(int what, Object obj, int arg1, int arg2, boolean async) &#123;</div><div class="line">         Message msg = Message.obtain();</div><div class="line">        msg.what = what;</div><div class="line">        msg.obj = obj;</div><div class="line">        msg.arg1 = arg1;</div><div class="line">        msg.arg2 = arg2;</div><div class="line">        if (async) &#123;</div><div class="line">            msg.setAsynchronous(true);</div><div class="line">        &#125;</div><div class="line">        mH.sendMessage(msg);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>看到没有，最后启动Activity的信息都封装一个Message，但是这里有个问题了，之前在分析main函数的时候，完全没给出往主线程消息队列插入消息的方式，这里有了消息，但是怎么发到主线程的消息队列呢？最后一句又是重点mH.sendMessage(msg); mH 是什么呢？难道是Handler，我们来看下它是什么东西？<br>我们看了下ActivityThread 的成员变量，发现一句初始化的代码</p>
<pre><code>final H mH = new H();
</code></pre><p>继续往下看H是什么？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">public final class ActivityThread&#123;</div><div class="line">     ....</div><div class="line">     final H mH = new H();</div><div class="line">     ....</div><div class="line">     private class H extends Handler &#123;</div><div class="line">     ....</div><div class="line">     ....</div><div class="line">     public void handleMessage(Message msg) &#123;</div><div class="line">            if (DEBUG_MESSAGES) Slog.v(TAG, &quot;&gt;&gt;&gt; handling: &quot; + codeToString(msg.what));</div><div class="line">            switch (msg.what) &#123;</div><div class="line">                case LAUNCH_ACTIVITY: &#123;</div><div class="line">                    Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, &quot;activityStart&quot;);</div><div class="line">                    final ActivityClientRecord r = (ActivityClientRecord) msg.obj;</div><div class="line"></div><div class="line">                    r.packageInfo = getPackageInfoNoCheck(</div><div class="line">                            r.activityInfo.applicationInfo, r.compatInfo);</div><div class="line">                    handleLaunchActivity(r, null);</div><div class="line">                    Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</div><div class="line">                &#125; break;</div><div class="line">                case RELAUNCH_ACTIVITY: &#123;</div><div class="line">                    Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, &quot;activityRestart&quot;);</div><div class="line">                    ActivityClientRecord r = (ActivityClientRecord)msg.obj;</div><div class="line">                    handleRelaunchActivity(r);</div><div class="line">                    Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</div><div class="line">                &#125; break;</div><div class="line">                case PAUSE_ACTIVITY:</div><div class="line">                    Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, &quot;activityPause&quot;);</div><div class="line">                    handlePauseActivity((IBinder)msg.obj, false, (msg.arg1&amp;1) != 0, msg.arg2,</div><div class="line">                            (msg.arg1&amp;2) != 0);</div><div class="line">                    maybeSnapshot();</div><div class="line">                    Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</div><div class="line">                    break;</div><div class="line">                   .....</div><div class="line">         &#125;</div><div class="line">         .....</div><div class="line">         .....</div><div class="line">     &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>H 果不出其然是Handler，而且是ActivityThread的内部类，看了一下它的handleMessage 方法，LAUNCH_ACTIVITY、PAUSE_ACTIVITY、RESUME_ACTIVITY…好多好多，H 类帮我们处理了好多声明周期的事情。那么再回到mH.sendMessage(msg)这句代码上，在Binder线程执行mH.sendMessage(msg);，由主线程创建的Handler mH实例发送消息到主线程的消息队列里，消息队列从无到有，主线程堵塞被唤醒，主线程loop拿到消息，并回调mH的handleMessage 方法处理LAUNCH_ACTIVITY 等消息。从而实现Activity的启动。</p>
<p>讲到这里，基本一个启动流程分析完了，大家可能比较想知道的是 mH.sendMessage(msg); 关于Hanlder是怎么把消息发到主线程的消息队列的？我们接下来就讲解下Handler，首先看下Handler的源码！我们先来看看我们经常用的Handler的无参构造函数，实际调用的是Handler(Callback callback, boolean async)构造函数（看注释）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">public Handler() &#123;</div><div class="line">        this(null, false);</div><div class="line"> &#125;</div><div class="line"> public Handler(Callback callback, boolean async) &#123;</div><div class="line">        //不是static 发出可能内存泄露的警告！</div><div class="line">        if (FIND_POTENTIAL_LEAKS) &#123;</div><div class="line">            final Class&lt;? extends Handler&gt; klass = getClass();</div><div class="line">            if ((klass.isAnonymousClass() || klass.isMemberClass() || klass.isLocalClass()) &amp;&amp;</div><div class="line">                    (klass.getModifiers() &amp; Modifier.STATIC) == 0) &#123;</div><div class="line">                Log.w(TAG, &quot;The following Handler class should be static or leaks might occur: &quot; +</div><div class="line">                    klass.getCanonicalName());</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        //获取当前线程的Looper，还记得前面讲过 Looper.myLooper()方法了吗？</div><div class="line">        //Looper.myLooper()内部实现可以先简单理解成：map.get(Thread.currentThread()) </div><div class="line">        //获取当前线程的Looper</div><div class="line">        mLooper = Looper.myLooper();</div><div class="line">        if (mLooper == null) &#123;</div><div class="line">            //当前线程不是Looper 线程，没有调用Looper.prepare()给线程创建Looper对象</div><div class="line">            throw new RuntimeException(</div><div class="line">                &quot;Can&apos;t create handler inside thread that has not called Looper.prepare()&quot;);</div><div class="line">        &#125;</div><div class="line">        //让Handler 持有当前线程消息队列的引用</div><div class="line">        mQueue = mLooper.mQueue;</div><div class="line">        //这些callback先不管，主要用于handler的消息发送的回调，优先级是比handlerMessage高，但是不常用</div><div class="line">        mCallback = callback;</div><div class="line">        mAsynchronous = async;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>上面的代码说明了下面几个问题：</p>
<p>1、Handler 对象在哪个线程下构建（Handler的构造函数在哪个线程下调用），那么Handler 就会持有这个线程的Looper引用和这个线程的消息队列的引用。因为持有这个线程的消息队列的引用，意味着这个Handler对象可以在任意其他线程给该线程的消息队列添加消息，也意味着Handler的handlerMessage 肯定也是在该线程执行的。</p>
<p>2、如果该线程不是Looper线程，在这个线程new Handler 就会报错！</p>
<p>3、上面两点综合说明了下面一段很常见的代码：把普通线程转成Looper线程的代码，为什么在Looper.prepare()和Looper.loop()中间要创建Handler:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">class LooperThread extends Thread &#123;</div><div class="line">       //其他线程可以通过mHandler这个引用给该线程的消息队列添加消息</div><div class="line">       public Handler mHandler;</div><div class="line">       public void run() &#123;</div><div class="line">            Looper.prepare();</div><div class="line">            //需要在线程进入死循环之前，创建一个Handler实例供外界线程给自己发消息</div><div class="line">            mHandler = new Handler() &#123;</div><div class="line">                public void handleMessage(Message msg) &#123;</div><div class="line">                    //Handler 对象在这个线程构建，那么handleMessage的方法就在这个线程执行</div><div class="line">                &#125;</div><div class="line">            &#125;;</div><div class="line">            Looper.loop();</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>那么接下来，我们接着往下看Handler的sendMessage(msg)方法，这个方法也是比较重要的，也比较常用，Handler 有很多sendXXXX开头的方法sendMessageAtTime、sendEmptyMessageDelayed、sendEmptyMessage等等，都是用来给消息队列添加消息的，那么这些方法最终都会调用enqueueMessage来实现消息进入队列：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">private boolean enqueueMessage(MessageQueue queue, Message msg, long uptimeMillis) &#123;</div><div class="line">        //这句话很重要，让消息持有当前Handler的引用，在消息被Looper线程轮询到的时候</div><div class="line">        //回调handler的handleMessage方法</div><div class="line">        msg.target = this;</div><div class="line">        if (mAsynchronous) &#123;</div><div class="line">            msg.setAsynchronous(true);</div><div class="line">        &#125;</div><div class="line">        //调用MessageQueue 的enqueueMessage 方法把消息放入队列</div><div class="line">        return queue.MessageQueue(msg, uptimeMillis);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>我们再来看下MessageQueue 的enqueueMessage(msg, uptimeMillis)方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line">boolean enqueueMessage(Message msg, long when) &#123;</div><div class="line">        // msg 必须有target也就是必须有handler</div><div class="line">        if (msg.target == null) &#123;</div><div class="line">            throw new IllegalArgumentException(&quot;Message must have a target.&quot;);</div><div class="line">        &#125;</div><div class="line">        if (msg.isInUse()) &#123;</div><div class="line">            throw new IllegalStateException(msg + &quot; This message is already in use.&quot;);</div><div class="line">        &#125;</div><div class="line">        //插入消息队列的时候需要做同步，因为会有多个线程同时做往这个队列插入消息</div><div class="line">        synchronized (this) &#123;</div><div class="line">            if (mQuitting) &#123;</div><div class="line">                IllegalStateException e = new IllegalStateException(</div><div class="line">                        msg.target + &quot; sending message to a Handler on a dead thread&quot;);</div><div class="line">                Log.w(TAG, e.getMessage(), e);</div><div class="line">                msg.recycle();</div><div class="line">                return false;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            msg.markInUse();</div><div class="line">            //when 表示这个消息执行的时间，队列是按照消息执行时间排序的</div><div class="line">            //如果handler 调用的是postDelay 那么when=SystemClock.uptimeMillis()+delayMillis</div><div class="line">            msg.when = when;</div><div class="line">            Message p = mMessages;</div><div class="line">            boolean needWake;</div><div class="line">            if (p == null || when == 0 || when &lt; p.when) &#123;</div><div class="line">                // p==null 表示当前消息队列没有消息</div><div class="line">                msg.next = p;</div><div class="line">                mMessages = msg;</div><div class="line">                //需要唤醒主线程，如果队列没有元素，主线程会堵塞在管道的读端，这时</div><div class="line">                //候队列突然有消息了，就会往管道写入字符，唤醒主线程</div><div class="line">                needWake = mBlocked;</div><div class="line">            &#125; else &#123;</div><div class="line">                // Inserted within the middle of the queue.  Usually we don&apos;t have to wake</div><div class="line">                // up the event queue unless there is a barrier at the head of the queue</div><div class="line">                // and the message is the earliest asynchronous message in the queue.</div><div class="line">                needWake = mBlocked &amp;&amp; p.target == null &amp;&amp; msg.isAsynchronous();</div><div class="line">                Message prev;</div><div class="line">                //将消息放到队列的确切位置，队列是按照msg的when 排序的，链表操作自己看咯</div><div class="line">                for (;;) &#123;</div><div class="line">                    prev = p;</div><div class="line">                    p = p.next;</div><div class="line">                    if (p == null || when &lt; p.when) &#123;</div><div class="line">                        break;</div><div class="line">                    &#125;</div><div class="line">                    if (needWake &amp;&amp; p.isAsynchronous()) &#123;</div><div class="line">                        needWake = false;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                msg.next = p; // invariant: p == prev.next</div><div class="line">                prev.next = msg;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            // 如果需要唤醒Looper线程，这里调用native的方法实现epoll机制唤醒线程，我们就不在深入探讨了</div><div class="line">            if (needWake) &#123;</div><div class="line">                nativeWake(mPtr);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return true;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>最后我们再看下Handler 的dispatchMessage方法,这个方法在Looper线程从消息队列拿出来的时候，通过msg.target.dispatchMessage(msg)调用的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">     * Handle system messages here.</div><div class="line">     */</div><div class="line">    public void dispatchMessage(Message msg) &#123;</div><div class="line">        //优先调用callback方法</div><div class="line">        if (msg.callback != null) &#123;</div><div class="line">            handleCallback(msg);</div><div class="line">        &#125; else &#123;</div><div class="line">            if (mCallback != null) &#123;</div><div class="line">                if (mCallback.handleMessage(msg)) &#123;</div><div class="line">                    return;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            //最后会回调我们重写的handleMessage 方法</div><div class="line">            handleMessage(msg);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>到这里，整个Android的消息处理机制Java层内容基本讲解完毕了！</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android 事件分发机制]]></title>
      <url>https://github.com/pangrongxian/2016/08/15/%5B%E8%BD%AC%5D%E5%9B%BE%E8%A7%A3%20Android%20%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%E6%9C%BA%E5%88%B6/</url>
      <content type="html"><![CDATA[<p>转自：<a href="http://www.jianshu.com/p/e99b5e8bd67b" target="_blank" rel="external">http://www.jianshu.com/p/e99b5e8bd67b</a> </p>
<p>为什么转载这篇文章？因为它能让你很容易的把事件分发记在你的脑海，感觉自己写不出比这更好的文章了，推荐！</p>
<pre><code>在 Android 开发中，事件分发机制是一块Android 比较重要的知识体系，了解并熟悉整套的

分发机制有助于更好的分析各种点击滑动失效问题，更好去扩展控件的事件功能和开发自

定义控件，同时事件分发机制也是 Android 面试必问考点之一，如果你能把下面的一些事

件分发图当场画出来肯定加分不少。废话不多说，总结一句:事件分发机制很重要。
</code></pre><h2 id="Android-事件分发流"><a href="#Android-事件分发流" class="headerlink" title="Android 事件分发流"></a>Android 事件分发流</h2><p>关于Android 事件分发机制网上的博文很多，但是很多都是写个Demo然后贴一下输出的Log或者拿源码分析，然后一堆的注释和说明，如果用心的去看肯定是收获不少但是确实很难把整个流程说清和记住。曾经也是拼命想记住整个流程，但是一段时间又忘了，最后觉得分析这种问题和事件流的走向，一张图来解释和说明会清晰很多，下面我根据画的一张事件分发流程图,说明的事件从用户点击之后，在不同函数不同返回值的情况的最终走向。</p>
<p><img src="http://xdeveloper.cn/content/images/2017/04/1.png" alt="图 1."></p>
<ul>
<li>仔细看的话，图分为3层，从上往下依次是Activity、ViewGroup、View</li>
<li>事件从左上角那个白色箭头开始，由Activity的dispatchTouchEvent做分发</li>
<li>箭头的上面字代表方法返回值，（return true、return false、return - - -   super.xxxxx(),super 的意思是调用父类实现。</li>
<li>dispatchTouchEvent和 onTouchEvent的框里有个【true—-&gt;消费】的字，表示的意思是如果方法返回true，那么代表事件就此消费，不会继续往别的地方传了，事件终止。</li>
<li>目前所有的图的事件是针对ACTIONDOWN的，对于ACTIONMOVE和ACTION_UP我们最后做分析。</li>
<li>之前图中的Activity 的dispatchTouchEvent 有误（图已修复），只有return super.dispatchTouchEvent(ev) 才是往下走，返回true 或者 false 事件就被消费了（终止传递）。</li>
</ul>
<p>仔细看整个图，我们得出事件流 走向的几个结论（希望读者专心的看下图 1，多看几遍，脑子有比较清晰的概念。）</p>
<h4 id="1、如果事件不被中断，整个事件流向是一个类U型图，我们来看下这张图，可能更能理解U型图的意思。"><a href="#1、如果事件不被中断，整个事件流向是一个类U型图，我们来看下这张图，可能更能理解U型图的意思。" class="headerlink" title="1、如果事件不被中断，整个事件流向是一个类U型图，我们来看下这张图，可能更能理解U型图的意思。"></a>1、如果事件不被中断，整个事件流向是一个类U型图，我们来看下这张图，可能更能理解U型图的意思。</h4><p><img src="http://xdeveloper.cn/content/images/2017/04/2.png" alt="图 2."></p>
<p>所以如果我们没有对控件里面的方法进行重写或更改返回值，而直接用super调用父类的默认实现，那么整个事件流向应该是从<strong>Activity</strong>—-&gt;<strong>ViewGroup</strong>—&gt;<strong>View</strong> 从上往下调用<strong>dispatchTouchEvent</strong>方法，一直到叶子节点（View）的时候，再由<strong>View</strong>—&gt;<strong>ViewGroup</strong>—&gt;<strong>Activity</strong>从下往上调用<strong>onTouchEvent</strong>方法。</p>
<h4 id="2、dispatchTouchEvent-和-onTouchEvent-一旦return-true-事件就停止传递了（到达终点）（没有谁能再收到这个事件）。看下图中只要return-true事件就没再继续传下去了，对于return-true我们经常说事件被消费了，消费了的意思就是事件走到这里就是终点，不会往下传，没有谁能再收到这个事件了。"><a href="#2、dispatchTouchEvent-和-onTouchEvent-一旦return-true-事件就停止传递了（到达终点）（没有谁能再收到这个事件）。看下图中只要return-true事件就没再继续传下去了，对于return-true我们经常说事件被消费了，消费了的意思就是事件走到这里就是终点，不会往下传，没有谁能再收到这个事件了。" class="headerlink" title="2、dispatchTouchEvent 和 onTouchEvent 一旦return true,事件就停止传递了（到达终点）（没有谁能再收到这个事件）。看下图中只要return true事件就没再继续传下去了，对于return true我们经常说事件被消费了，消费了的意思就是事件走到这里就是终点，不会往下传，没有谁能再收到这个事件了。"></a>2、dispatchTouchEvent 和 onTouchEvent 一旦return true,事件就停止传递了（到达终点）（没有谁能再收到这个事件）。看下图中只要return true事件就没再继续传下去了，对于return true我们经常说事件被消费了，消费了的意思就是事件走到这里就是终点，不会往下传，没有谁能再收到这个事件了。</h4><p><img src="http://xdeveloper.cn/content/images/2017/04/3.png" alt="图 3."></p>
<h4 id="3、dispatchTouchEvent-和-onTouchEvent-return-false-的-时候事件都回传给父控件的onTouchEvent处理。"><a href="#3、dispatchTouchEvent-和-onTouchEvent-return-false-的-时候事件都回传给父控件的onTouchEvent处理。" class="headerlink" title="3、dispatchTouchEvent 和 onTouchEvent return false 的 时候事件都回传给父控件的onTouchEvent处理。"></a>3、dispatchTouchEvent 和 onTouchEvent return false 的 时候事件都回传给父控件的onTouchEvent处理。</h4><p><img src="http://xdeveloper.cn/content/images/2017/04/4.png" alt="图 4."></p>
<p>看上图深蓝色的线，对于返回false的情况，事件都是传给父控件onTouchEvent处理。</p>
<ul>
<li><p>对于dispatchTouchEvent 返回 false 的含义应该是：事件停止往子View传递和分发同时开始往父控件回溯（父控件的onTouchEvent开始从下往上回传直到某个onTouchEvent return true），事件分发机制就像递归，return false 的意义就是递归停止然后开始回溯。</p>
</li>
<li><p>对于onTouchEvent return false 就比较简单了，它就是不消费事件，并让事件继续往父控件的方向从下往上流动。</p>
</li>
</ul>
<h4 id="4、dispatchTouchEvent、onTouchEvent、onInterceptTouchEvent-ViewGroup-和View的这些方法的默认实现就是会让整个事件安装U型完整走完，所以-return-super-xxxxxx-就会让事件依照U型的方向的完整走完整个事件流动路径），中间不做任何改动，不回溯、不终止，每个环节都走到。"><a href="#4、dispatchTouchEvent、onTouchEvent、onInterceptTouchEvent-ViewGroup-和View的这些方法的默认实现就是会让整个事件安装U型完整走完，所以-return-super-xxxxxx-就会让事件依照U型的方向的完整走完整个事件流动路径），中间不做任何改动，不回溯、不终止，每个环节都走到。" class="headerlink" title="4、dispatchTouchEvent、onTouchEvent、onInterceptTouchEvent ViewGroup 和View的这些方法的默认实现就是会让整个事件安装U型完整走完，所以 return super.xxxxxx() 就会让事件依照U型的方向的完整走完整个事件流动路径），中间不做任何改动，不回溯、不终止，每个环节都走到。"></a>4、dispatchTouchEvent、onTouchEvent、onInterceptTouchEvent ViewGroup 和View的这些方法的默认实现就是会让整个事件安装U型完整走完，所以 return super.xxxxxx() 就会让事件依照U型的方向的完整走完整个事件流动路径），中间不做任何改动，不回溯、不终止，每个环节都走到。</h4><p><img src="http://xdeveloper.cn/content/images/2017/04/5.png" alt="图 5."></p>
<p>所以如果看到方法return super.xxxxx() 那么事件的下一个流向就是走U型下一个目标，稍微记住上面这张图，你就能很快判断出下一个走向是哪个控件的哪个函数。</p>
<h4 id="5、onInterceptTouchEvent-的作用"><a href="#5、onInterceptTouchEvent-的作用" class="headerlink" title="5、onInterceptTouchEvent 的作用"></a>5、onInterceptTouchEvent 的作用</h4><p><img src="http://xdeveloper.cn/content/images/2017/04/6.png" alt="图 6."></p>
<ul>
<li><p>Intercept 的意思就拦截，每个ViewGroup每次在做分发的时候，问一问拦截器要不要拦截（也就是问问自己这个事件要不要自己来处理）如果要自己处理那就在onInterceptTouchEvent方法中 return true就会交给自己的onTouchEvent的处理，如果不拦截就是继续往子控件往下传。</p>
</li>
<li><p>默认是不会去拦截的，因为子View也需要这个事件，所以onInterceptTouchEvent拦截器return super.onInterceptTouchEvent()和return false是一样的，是不会拦截的，事件会继续往子View的dispatchTouchEvent传递。</p>
</li>
</ul>
<h4 id="6、ViewGroup-和View-的dispatchTouchEvent方法返回super-dispatchTouchEvent-的时候事件流走向。"><a href="#6、ViewGroup-和View-的dispatchTouchEvent方法返回super-dispatchTouchEvent-的时候事件流走向。" class="headerlink" title="6、ViewGroup 和View 的dispatchTouchEvent方法返回super.dispatchTouchEvent()的时候事件流走向。"></a>6、ViewGroup 和View 的dispatchTouchEvent方法返回super.dispatchTouchEvent()的时候事件流走向。</h4><p><img src="http://xdeveloper.cn/content/images/2017/04/7.png" alt="图 7."></p>
<ul>
<li><p>首先看下ViewGroup 的dispatchTouchEvent，之前说的return true是终结传递。return false 是回溯到父View的onTouchEvent，然后ViewGroup怎样通过dispatchTouchEvent方法能把事件分发到自己的onTouchEvent处理呢，return true和false 都不行，那么只能通过Interceptor把事件拦截下来给自己的onTouchEvent，所以ViewGroup dispatchTouchEvent方法的super默认实现就是去调用onInterceptTouchEvent，记住这一点。</p>
</li>
<li><p>那么对于View的dispatchTouchEvent return super.dispatchTouchEvent()的时候呢事件会传到哪里呢，很遗憾View没有拦截器。但是同样的道理return true是终结。return false 是回溯会父类的onTouchEvent，怎样把事件分发给自己的onTouchEvent 处理呢，那只能return super.dispatchTouchEvent,View类的dispatchTouchEvent（）方法默认实现就是能帮你调用View自己的onTouchEvent方法的。</p>
</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>说了这么多，不知道有说清楚没有，我这边最后总结一下：</p>
<ul>
<li>对于 dispatchTouchEvent，onTouchEvent，return true是终结事件传递。return false 是回溯到父View的onTouchEvent方法。</li>
<li>ViewGroup 想把自己分发给自己的onTouchEvent，需要拦截器onInterceptTouchEvent方法return true 把事件拦截下来。</li>
<li>ViewGroup 的拦截器onInterceptTouchEvent 默认是不拦截的，所以return super.onInterceptTouchEvent()=return false；</li>
<li>View 没有拦截器，为了让View可以把事件分发给自己的onTouchEvent，View的dispatchTouchEvent默认实现（super）就是把事件分发给自己的onTouchEvent。<br>ViewGroup和View 的dispatchTouchEvent 是做事件分发，那么这个事件可能分发出去的四个目标: <h3 id="注：——-gt-后面代表事件目标需要怎么做。"><a href="#注：——-gt-后面代表事件目标需要怎么做。" class="headerlink" title="注：——&gt; 后面代表事件目标需要怎么做。"></a>注：——&gt; 后面代表事件目标需要怎么做。</h3></li>
</ul>
<ol>
<li>自己消费，终结传递。——-&gt;return true ；</li>
<li>给自己的onTouchEvent处理——-&gt; 调用super.dispatchTouchEvent()系统默认会去调用 onInterceptTouchEvent，在onInterceptTouchEvent return true就会去把事件分给自己的onTouchEvent处理。</li>
<li>传给子View——&gt;调用super.dispatchTouchEvent()默认实现会去调用 onInterceptTouchEvent 在onInterceptTouchEvent return false，就会把事件传给子类。</li>
<li>不传给子View，事件终止往下传递，事件开始回溯，从父View的onTouchEvent开始事件从下到上回归执行每个控件的onTouchEvent——-&gt;return false；</li>
</ol>
<ul>
<li><h4 id="注：-由于View没有子View所以不需要onInterceptTouchEvent来控件是否把事件传递给子View还是拦截，所以View的事件分发调用super-dispatchTouchEvent-的时候默认把事件传给自己的onTouchEvent处理（相当于拦截），对比ViewGroup的dispatchTouchEvent事件分发，View的事件分发没有上面提到的4个目标的第3点。"><a href="#注：-由于View没有子View所以不需要onInterceptTouchEvent来控件是否把事件传递给子View还是拦截，所以View的事件分发调用super-dispatchTouchEvent-的时候默认把事件传给自己的onTouchEvent处理（相当于拦截），对比ViewGroup的dispatchTouchEvent事件分发，View的事件分发没有上面提到的4个目标的第3点。" class="headerlink" title="注： 由于View没有子View所以不需要onInterceptTouchEvent来控件是否把事件传递给子View还是拦截，所以View的事件分发调用super.dispatchTouchEvent()的时候默认把事件传给自己的onTouchEvent处理（相当于拦截），对比ViewGroup的dispatchTouchEvent事件分发，View的事件分发没有上面提到的4个目标的第3点。"></a>注： 由于View没有子View所以不需要onInterceptTouchEvent来控件是否把事件传递给子View还是拦截，所以View的事件分发调用super.dispatchTouchEvent()的时候默认把事件传给自己的onTouchEvent处理（相当于拦截），对比ViewGroup的dispatchTouchEvent事件分发，View的事件分发没有上面提到的4个目标的第3点。</h4></li>
</ul>
<p>ViewGroup和View的onTouchEvent方法是做事件处理的，那么这个事件只能有两个处理方式： </p>
<ol>
<li>自己消费掉，事件终结，不再传给谁—–&gt;return true; </li>
<li>继续从下往上传，不消费事件，让父View也能收到到这个事件—–&gt;return false;View的默认实现是不消费的。所以superfalse。</li>
</ol>
<p>ViewGroup的onInterceptTouchEvent方法对于事件有两种情况： </p>
<ol>
<li>拦截下来，给自己的onTouchEvent处理—&gt;return true; </li>
<li>不拦截，把事件往下传给子View—-&gt;return false,ViewGroup默认是不拦截的，所以superfalse；</li>
</ol>
<h3 id="关于ACTIONMOVE-和-ACTIONUP"><a href="#关于ACTIONMOVE-和-ACTIONUP" class="headerlink" title="关于ACTIONMOVE 和 ACTIONUP"></a>关于ACTIONMOVE 和 ACTIONUP</h3><p>上面讲解的都是针对ACTIONDOWN的事件传递，ACTIONMOVE和ACTIONUP在传递的过程中并不是和ACTIONDOWN 一样，你在执行ACTIONDOWN的时候返回了false，后面一系列其它的action就不会再得到执行了。简单的说，就是当dispatchTouchEvent在进行事件分发的时候，只有前一个事件（如ACTIONDOWN）返回true，才会收到ACTIONMOVE和ACTIONUP的事件。具体这句话很多博客都说了，但是具体含义是什么呢？我们来看一下下面的具体分析。</p>
<p>上面提到过了，事件如果不被打断的话是会不断往下传到叶子层（View），然后又不断回传到Activity，dispatchTouchEvent 和 onTouchEvent 可以通过return true 消费事件，终结事件传递，而onInterceptTouchEvent 并不能消费事件，它相当于是一个分叉口起到分流导流的作用，ACTIONMOVE和ACTIONUP 会在哪些函数被调用，之前说了并不是哪个函数收到了ACTIONDOWN，就会收到 ACTIONMOVE 等后续的事件的。 下面通过几张图看看不同场景下，ACTIONMOVE事件和ACTIONUP事件的具体走向并总结一下规律。</p>
<h4 id="1、我们在ViewGroup1-的dispatchTouchEvent-方法返回true消费这次事件"><a href="#1、我们在ViewGroup1-的dispatchTouchEvent-方法返回true消费这次事件" class="headerlink" title="1、我们在ViewGroup1 的dispatchTouchEvent 方法返回true消费这次事件"></a>1、我们在ViewGroup1 的dispatchTouchEvent 方法返回true消费这次事件</h4><p>ACTIONDOWN 事件从（Activity的dispatchTouchEvent）——–&gt; （ViewGroup1 的dispatchTouchEvent） 后结束传递，事件被消费（如下图红色的箭头代码ACTIONDOWN 事件的流向）。</p>
<pre><code>//打印日志
Activity | dispatchTouchEvent --&gt; ACTION_DOWN  
ViewGroup1 | dispatchTouchEvent --&gt; ACTION_DOWN  
----&gt;消费
</code></pre><p><img src="http://xdeveloper.cn/content/images/2017/04/8.png" alt="图 8."></p>
<p>在这种场景下ACTIONMOVE和ACTIONUP 将如何呢，看下面的打出来的日志</p>
<pre><code>Activity | dispatchTouchEvent --&gt; ACTION_MOVE  
ViewGroup1 | dispatchTouchEvent --&gt; ACTION_MOVE  
----
TouchEventActivity | dispatchTouchEvent --&gt; ACTION_UP  
ViewGroup1 | dispatchTouchEvent --&gt; ACTION_UP  
</code></pre><p>下图中 红色的箭头代表ACTIONDOWN 事件的流向 蓝色的箭头代表ACTIONMOVE 和 ACTION_UP 事件的流向</p>
<p><img src="http://xdeveloper.cn/content/images/2017/04/9.png" alt="图 9."></p>
<h4 id="2、我们在ViewGroup2-的dispatchTouchEvent-返回true消费这次事件"><a href="#2、我们在ViewGroup2-的dispatchTouchEvent-返回true消费这次事件" class="headerlink" title="2、我们在ViewGroup2 的dispatchTouchEvent 返回true消费这次事件"></a>2、我们在ViewGroup2 的dispatchTouchEvent 返回true消费这次事件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">Activity | dispatchTouchEvent --&gt; ACTION_DOWN  </div><div class="line">ViewGroup1 | dispatchTouchEvent --&gt; ACTION_DOWN  </div><div class="line">ViewGroup1 | onInterceptTouchEvent --&gt; ACTION_DOWN  </div><div class="line">ViewGroup2 | dispatchTouchEvent --&gt; ACTION_DOWN  </div><div class="line">----&gt;消费</div><div class="line">Activity | dispatchTouchEvent --&gt; ACTION_MOVE  </div><div class="line">ViewGroup1 | dispatchTouchEvent --&gt; ACTION_MOVE  </div><div class="line">ViewGroup1 | onInterceptTouchEvent --&gt; ACTION_MOVE  </div><div class="line">ViewGroup2 | dispatchTouchEvent --&gt; ACTION_MOVE  </div><div class="line"></div><div class="line">TouchEventActivity | dispatchTouchEvent --&gt; ACTION_UP  </div><div class="line">ViewGroup1 | dispatchTouchEvent --&gt; ACTION_UP  </div><div class="line">ViewGroup1 | onInterceptTouchEvent --&gt; ACTION_UP  </div><div class="line">ViewGroup2 | dispatchTouchEvent --&gt; ACTION_UP</div></pre></td></tr></table></figure>
<p>红色的箭头代表ACTIONDOWN 事件的流向<br>蓝色的箭头代表ACTIONMOVE 和 ACTION_UP 事件的流向</p>
<p><img src="http://xdeveloper.cn/content/images/2017/04/10.png" alt="图 10."></p>
<h4 id="3、我们在View-的dispatchTouchEvent-返回true消费这次事件"><a href="#3、我们在View-的dispatchTouchEvent-返回true消费这次事件" class="headerlink" title="3、我们在View 的dispatchTouchEvent 返回true消费这次事件"></a>3、我们在View 的dispatchTouchEvent 返回true消费这次事件</h4><p>这个我不就画图了，效果和在ViewGroup2 的dispatchTouchEvent return true的差不多，同样的收到ACTIONDOWN 的dispatchTouchEvent函数都能收到 ACTIONMOVE和ACTIONUP。 所以我们就基本可以得出结论如果在某个控件的dispatchTouchEvent 返回true消费终结事件，那么收到ACTIONDOWN 的函数也能收到 ACTIONMOVE和ACTIONUP。</p>
<h4 id="4、我们在View-的onTouchEvent-返回true消费这次事件"><a href="#4、我们在View-的onTouchEvent-返回true消费这次事件" class="headerlink" title="4、我们在View 的onTouchEvent 返回true消费这次事件"></a>4、我们在View 的onTouchEvent 返回true消费这次事件</h4><p>红色的箭头代表ACTIONDOWN 事件的流向<br>蓝色的箭头代表ACTIONMOVE 和 ACTION_UP 事件的流向</p>
<p><img src="http://xdeveloper.cn/content/images/2017/04/11.png" alt="图 11."></p>
<h4 id="5、我们在ViewGroup-2-的onTouchEvent-返回true消费这次事件"><a href="#5、我们在ViewGroup-2-的onTouchEvent-返回true消费这次事件" class="headerlink" title="5、我们在ViewGroup 2 的onTouchEvent 返回true消费这次事件"></a>5、我们在ViewGroup 2 的onTouchEvent 返回true消费这次事件</h4><p>红色的箭头代表ACTIONDOWN 事件的流向<br>蓝色的箭头代表ACTIONMOVE 和 ACTION_UP 事件的流向 </p>
<p><img src="http://xdeveloper.cn/content/images/2017/04/12.png" alt="图 12."></p>
<h4 id="6、我们在ViewGroup-1-的onTouchEvent-返回true消费这次事件"><a href="#6、我们在ViewGroup-1-的onTouchEvent-返回true消费这次事件" class="headerlink" title="6、我们在ViewGroup 1 的onTouchEvent 返回true消费这次事件"></a>6、我们在ViewGroup 1 的onTouchEvent 返回true消费这次事件</h4><p>红色的箭头代表ACTIONDOWN 事件的流向<br>蓝色的箭头代表ACTIONMOVE 和 ACTION_UP 事件的流向</p>
<p><img src="http://xdeveloper.cn/content/images/2017/04/13.png" alt="图 13."></p>
<h4 id="7、我们在Activity-的onTouchEvent-返回true消费这次事件"><a href="#7、我们在Activity-的onTouchEvent-返回true消费这次事件" class="headerlink" title="7、我们在Activity 的onTouchEvent 返回true消费这次事件"></a>7、我们在Activity 的onTouchEvent 返回true消费这次事件</h4><p>红色的箭头代表ACTIONDOWN 事件的流向<br>蓝色的箭头代表ACTIONMOVE 和 ACTION_UP 事件的流向</p>
<p><img src="http://xdeveloper.cn/content/images/2017/04/14.png" alt="图 14."></p>
<h4 id="8、我们在View的dispatchTouchEvent-返回false并且Activity-的onTouchEvent-返回true消费这次事件"><a href="#8、我们在View的dispatchTouchEvent-返回false并且Activity-的onTouchEvent-返回true消费这次事件" class="headerlink" title="8、我们在View的dispatchTouchEvent 返回false并且Activity 的onTouchEvent 返回true消费这次事件"></a>8、我们在View的dispatchTouchEvent 返回false并且Activity 的onTouchEvent 返回true消费这次事件</h4><p>红色的箭头代表ACTIONDOWN 事件的流向<br>蓝色的箭头代表ACTIONMOVE 和 ACTION_UP 事件的流向</p>
<p><img src="http://xdeveloper.cn/content/images/2017/04/15.png" alt="图 15."></p>
<h4 id="9、我们在View的dispatchTouchEvent-返回false并且ViewGroup-1-的onTouchEvent-返回true消费这次事件"><a href="#9、我们在View的dispatchTouchEvent-返回false并且ViewGroup-1-的onTouchEvent-返回true消费这次事件" class="headerlink" title="9、我们在View的dispatchTouchEvent 返回false并且ViewGroup 1 的onTouchEvent 返回true消费这次事件"></a>9、我们在View的dispatchTouchEvent 返回false并且ViewGroup 1 的onTouchEvent 返回true消费这次事件</h4><p>红色的箭头代表ACTIONDOWN 事件的流向<br>蓝色的箭头代表ACTIONMOVE 和 ACTION_UP 事件的流向</p>
<p><img src="http://xdeveloper.cn/content/images/2017/04/16.png" alt="图 16."></p>
<h4 id="10、我们在View的dispatchTouchEvent-返回false并且在ViewGroup-2-的onTouchEvent-返回true消费这次事件"><a href="#10、我们在View的dispatchTouchEvent-返回false并且在ViewGroup-2-的onTouchEvent-返回true消费这次事件" class="headerlink" title="10、我们在View的dispatchTouchEvent 返回false并且在ViewGroup 2 的onTouchEvent 返回true消费这次事件"></a>10、我们在View的dispatchTouchEvent 返回false并且在ViewGroup 2 的onTouchEvent 返回true消费这次事件</h4><p>红色的箭头代表ACTIONDOWN 事件的流向<br>蓝色的箭头代表ACTIONMOVE 和 ACTION_UP 事件的流向</p>
<p><img src="http://xdeveloper.cn/content/images/2017/04/17.png" alt="图 17."></p>
<h4 id="11、我们在ViewGroup2的dispatchTouchEvent-返回false并且在ViewGroup1-的onTouchEvent返回true消费这次事件"><a href="#11、我们在ViewGroup2的dispatchTouchEvent-返回false并且在ViewGroup1-的onTouchEvent返回true消费这次事件" class="headerlink" title="11、我们在ViewGroup2的dispatchTouchEvent 返回false并且在ViewGroup1 的onTouchEvent返回true消费这次事件"></a>11、我们在ViewGroup2的dispatchTouchEvent 返回false并且在ViewGroup1 的onTouchEvent返回true消费这次事件</h4><p>红色的箭头代表ACTIONDOWN 事件的流向<br>蓝色的箭头代表ACTIONMOVE 和 ACTION_UP 事件的流向</p>
<p><img src="http://xdeveloper.cn/content/images/2017/04/18.png" alt="图 18."></p>
<h4 id="12、我们在ViewGroup2的onInterceptTouchEvent-返回true拦截此次事件并且在ViewGroup-1-的onTouchEvent返回true消费这次事件。"><a href="#12、我们在ViewGroup2的onInterceptTouchEvent-返回true拦截此次事件并且在ViewGroup-1-的onTouchEvent返回true消费这次事件。" class="headerlink" title="12、我们在ViewGroup2的onInterceptTouchEvent 返回true拦截此次事件并且在ViewGroup 1 的onTouchEvent返回true消费这次事件。"></a>12、我们在ViewGroup2的onInterceptTouchEvent 返回true拦截此次事件并且在ViewGroup 1 的onTouchEvent返回true消费这次事件。</h4><p>红色的箭头代表ACTIONDOWN 事件的流向<br>蓝色的箭头代表ACTIONMOVE 和 ACTION_UP 事件的流向</p>
<p><img src="http://xdeveloper.cn/content/images/2017/04/19.png" alt="图 19."></p>
<p>一下子画了好多图，还有好几种情况就不再画了，相信你也看出规律了，对于在onTouchEvent消费事件的情况：在哪个View的onTouchEvent 返回true，那么ACTIONMOVE和ACTIONUP的事件从上往下传到这个View后就不再往下传递了，而直接传给自己的onTouchEvent 并结束本次事件传递过程。</p>
<p>对于ACTIONMOVE、ACTIONUP总结：ACTIONDOWN事件在哪个控件消费了（return true）， 那么ACTIONMOVE和ACTIONUP就会从上往下（通过dispatchTouchEvent）做事件分发往下传，就只会传到这个控件，不会继续往下传，如果ACTIONDOWN事件是在dispatchTouchEvent消费，那么事件到此为止停止传递，如果ACTIONDOWN事件是在onTouchEvent消费的，那么会把ACTIONMOVE或ACTION_UP事件传给该控件的onTouchEvent处理并结束传递。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android View的绘制流程]]></title>
      <url>https://github.com/pangrongxian/2016/08/08/Android%20View%E7%9A%84%E7%BB%98%E5%88%B6%E6%B5%81%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p>View的绘制和事件处理是两个重要的主题，上一篇《图解 Android事件分发机制》已经把事件的分发机制讲得比较详细了，这一篇是针对View的绘制，View的绘制如果你有所了解，基本分为measure、layout、draw 过程，其中比较难理解就是measure过程，所以本篇文章大幅笔地分析measure过程，相对讲得比较详细，文章也比较长，如果你对View的绘制还不是很懂，对measure过程掌握得不是很深刻，那么耐心点，看完这篇文章，相信你会有所收获的。</p>
<pre><code>【转载请明显注明出处，尊重劳动成果】
</code></pre><p>原文链接：<a href="http://www.jianshu.com/p/5a71014e7b1b" target="_blank" rel="external">http://www.jianshu.com/p/5a71014e7b1b</a></p>
<h1 id="Measure过程"><a href="#Measure过程" class="headerlink" title="Measure过程"></a>Measure过程</h1><p>对于测量我们来说几个知识点,了解这几个知识点，之后的实例分析你才看得懂。</p>
<h3 id="1、MeasureSpec-的理解"><a href="#1、MeasureSpec-的理解" class="headerlink" title="1、MeasureSpec 的理解"></a>1、MeasureSpec 的理解</h3><p>对于View的测量，肯定会和MeasureSpec接触，MeasureSpec是两个单词组成，翻译过来“测量规格”或者“测量参数”，很多博客包括官方文档对他的说明基本都是“一个MeasureSpec封装了从父容器传递给子容器的布局要求”,这个MeasureSpec 封装的是父容器传递给子容器的布局要求，而不是父容器对子容器的布局要求，“传递” 两个字很重要，更精确的说法应该这个MeasureSpec是由父View的MeasureSpec和子View的LayoutParams通过简单的计算得出一个针对子View的测量要求，这个测量要求就是MeasureSpec。</p>
<ul>
<li>大家都知道一个MeasureSpec是一个大小跟模式的组合值,MeasureSpec中的值是一个整型（32位）将size和mode打包成一个Int型，其中高两位是mode，后面30位存的是size，是为了减少对象的分配开支。MeasureSpec 类似于下图，只不过这边用的是十进制的数，而MeasureSpec 是二进制存储的。</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/966283-c330852c971b02a8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/540" alt="图 1."></p>
<h4 id="注：-1-代表的是EXACTLY，-2-是AT-MOST"><a href="#注：-1-代表的是EXACTLY，-2-是AT-MOST" class="headerlink" title="注：-1 代表的是EXACTLY，-2 是AT_MOST"></a>注：-1 代表的是EXACTLY，-2 是AT_MOST</h4><ul>
<li>MeasureSpec一共有三种模式</li>
</ul>
<pre><code>UPSPECIFIED : 父容器对于子容器没有任何限制,子容器想要多大就多大
EXACTLY: 父容器已经为子容器设置了尺寸,子容器应当服从这些边界,不论子容器想要多大的空间。
AT_MOST：子容器可以是声明大小内的任意大小
</code></pre><p>很多文章都会把这三个模式说成这样，当然其实包括官方文档也是这样表达的，但是这样并不好理解。特别是如果把这三种模式又和MATCH_PARENT和WRAP_CONTENT 联系到一起，很多人就懵逼了。如果从代码上来看view.measure(int widthMeasureSpec, int heightMeasureSpec) 的两个MeasureSpec是父类传递过来的，但并不是完全是父View的要求，而是父View的MeasureSpec和子View自己的LayoutParams共同决定的，而子View的LayoutParams其实就是我们在xml写的时候设置的layout_width和layout_height 转化而来的。我们先来看代码会清晰一些：</p>
<hr>
<pre><code>父View的measure的过程会先测量子View，等子View测量结果出来后，再来测量自己，上
面的measureChildWithMargins就是用来测量某个子View的，我们来分析是怎样测量的，
具体看注释：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div></pre></td><td class="code"><pre><div class="line">protected void measureChildWithMargins(View child, int parentWidthMeasureSpec, int widthUsed, int parentHeightMeasureSpec, int heightUsed) &#123; </div><div class="line"></div><div class="line">// 子View的LayoutParams，你在xml的layout_width和layout_height,</div><div class="line">// layout_xxx的值最后都会封装到这个个LayoutParams。</div><div class="line">final MarginLayoutParams lp = (MarginLayoutParams) child.getLayoutParams();   </div><div class="line"></div><div class="line">//根据父View的测量规格和父View自己的Padding，</div><div class="line">//还有子View的Margin和已经用掉的空间大小（widthUsed），就能算出子View的MeasureSpec,具体计算过程看getChildMeasureSpec方法。</div><div class="line">final int childWidthMeasureSpec = getChildMeasureSpec(parentWidthMeasureSpec,            </div><div class="line">mPaddingLeft + mPaddingRight + lp.leftMargin + lp.rightMargin + widthUsed, lp.width);    </div><div class="line"></div><div class="line">final int childHeightMeasureSpec = getChildMeasureSpec(parentHeightMeasureSpec,           </div><div class="line">mPaddingTop + mPaddingBottom + lp.topMargin + lp.bottomMargin  + heightUsed, lp.height);  </div><div class="line"></div><div class="line">//通过父View的MeasureSpec和子View的自己LayoutParams的计算，算出子View的MeasureSpec，然后父容器传递给子容器的</div><div class="line">// 然后让子View用这个MeasureSpec（一个测量要求，比如不能超过多大）去测量自己，如果子View是ViewGroup 那还会递归往下测量。</div><div class="line">child.measure(childWidthMeasureSpec, childHeightMeasureSpec);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">// spec参数   表示父View的MeasureSpec </div><div class="line">// padding参数    父View的Padding+子View的Margin，父View的大小减去这些边距，才能精确算出</div><div class="line">//               子View的MeasureSpec的size</div><div class="line">// childDimension参数  表示该子View内部LayoutParams属性的值（lp.width或者lp.height）</div><div class="line">//                    可以是wrap_content、match_parent、一个精确指(an exactly size),  </div><div class="line">public static int getChildMeasureSpec(int spec, int padding, int childDimension) &#123;  </div><div class="line">    int specMode = MeasureSpec.getMode(spec);  //获得父View的mode  </div><div class="line">    int specSize = MeasureSpec.getSize(spec);  //获得父View的大小  </div><div class="line"></div><div class="line">   //父View的大小-自己的Padding+子View的Margin，得到值才是子View的大小。</div><div class="line">    int size = Math.max(0, specSize - padding);   </div><div class="line"></div><div class="line">    int resultSize = 0;    //初始化值，最后通过这个两个值生成子View的MeasureSpec</div><div class="line">    int resultMode = 0;    //初始化值，最后通过这个两个值生成子View的MeasureSpec</div><div class="line"></div><div class="line">    switch (specMode) &#123;  </div><div class="line">    // Parent has imposed an exact size on us  </div><div class="line">    //1、父View是EXACTLY的 ！  </div><div class="line">    case MeasureSpec.EXACTLY:   </div><div class="line">        //1.1、子View的width或height是个精确值 (an exactly size)  </div><div class="line">        if (childDimension &gt;= 0) &#123;            </div><div class="line">            resultSize = childDimension;         //size为精确值  </div><div class="line">            resultMode = MeasureSpec.EXACTLY;    //mode为 EXACTLY 。  </div><div class="line">        &#125;   </div><div class="line">        //1.2、子View的width或height为 MATCH_PARENT/FILL_PARENT   </div><div class="line">        else if (childDimension == LayoutParams.MATCH_PARENT) &#123;  </div><div class="line">            // Child wants to be our size. So be it.  </div><div class="line">            resultSize = size;                   //size为父视图大小  </div><div class="line">            resultMode = MeasureSpec.EXACTLY;    //mode为 EXACTLY 。  </div><div class="line">        &#125;   </div><div class="line">        //1.3、子View的width或height为 WRAP_CONTENT  </div><div class="line">        else if (childDimension == LayoutParams.WRAP_CONTENT) &#123;  </div><div class="line">            // Child wants to determine its own size. It can&apos;t be  </div><div class="line">            // bigger than us.  </div><div class="line">            resultSize = size;                   //size为父视图大小  </div><div class="line">            resultMode = MeasureSpec.AT_MOST;    //mode为AT_MOST 。  </div><div class="line">        &#125;  </div><div class="line">        break;  </div><div class="line"></div><div class="line">    // Parent has imposed a maximum size on us  </div><div class="line">    //2、父View是AT_MOST的 ！      </div><div class="line">    case MeasureSpec.AT_MOST:  </div><div class="line">        //2.1、子View的width或height是个精确值 (an exactly size)  </div><div class="line">        if (childDimension &gt;= 0) &#123;  </div><div class="line">            // Child wants a specific size... so be it  </div><div class="line">            resultSize = childDimension;        //size为精确值  </div><div class="line">            resultMode = MeasureSpec.EXACTLY;   //mode为 EXACTLY 。  </div><div class="line">        &#125;  </div><div class="line">        //2.2、子View的width或height为 MATCH_PARENT/FILL_PARENT  </div><div class="line">        else if (childDimension == LayoutParams.MATCH_PARENT) &#123;  </div><div class="line">            // Child wants to be our size, but our size is not fixed.  </div><div class="line">            // Constrain child to not be bigger than us.  </div><div class="line">            resultSize = size;                  //size为父视图大小  </div><div class="line">            resultMode = MeasureSpec.AT_MOST;   //mode为AT_MOST  </div><div class="line">        &#125;  </div><div class="line">        //2.3、子View的width或height为 WRAP_CONTENT  </div><div class="line">        else if (childDimension == LayoutParams.WRAP_CONTENT) &#123;  </div><div class="line">            // Child wants to determine its own size. It can&apos;t be  </div><div class="line">            // bigger than us.  </div><div class="line">            resultSize = size;                  //size为父视图大小  </div><div class="line">            resultMode = MeasureSpec.AT_MOST;   //mode为AT_MOST  </div><div class="line">        &#125;  </div><div class="line">        break;  </div><div class="line"></div><div class="line">    // Parent asked to see how big we want to be  </div><div class="line">    //3、父View是UNSPECIFIED的 ！  </div><div class="line">    case MeasureSpec.UNSPECIFIED:  </div><div class="line">        //3.1、子View的width或height是个精确值 (an exactly size)  </div><div class="line">        if (childDimension &gt;= 0) &#123;  </div><div class="line">            // Child wants a specific size... let him have it  </div><div class="line">            resultSize = childDimension;        //size为精确值  </div><div class="line">            resultMode = MeasureSpec.EXACTLY;   //mode为 EXACTLY  </div><div class="line">        &#125;  </div><div class="line">        //3.2、子View的width或height为 MATCH_PARENT/FILL_PARENT  </div><div class="line">        else if (childDimension == LayoutParams.MATCH_PARENT) &#123;  </div><div class="line">            // Child wants to be our size... find out how big it should  </div><div class="line">            // be  </div><div class="line">            resultSize = 0;                        //size为0！ ,其值未定  </div><div class="line">            resultMode = MeasureSpec.UNSPECIFIED;  //mode为 UNSPECIFIED  </div><div class="line">        &#125;   </div><div class="line">        //3.3、子View的width或height为 WRAP_CONTENT  </div><div class="line">        else if (childDimension == LayoutParams.WRAP_CONTENT) &#123;  </div><div class="line">            // Child wants to determine its own size.... find out how  </div><div class="line">            // big it should be  </div><div class="line">            resultSize = 0;                        //size为0! ，其值未定  </div><div class="line">            resultMode = MeasureSpec.UNSPECIFIED;  //mode为 UNSPECIFIED  </div><div class="line">        &#125;  </div><div class="line">        break;  </div><div class="line">    &#125;  </div><div class="line">    //根据上面逻辑条件获取的mode和size构建MeasureSpec对象。  </div><div class="line">    return MeasureSpec.makeMeasureSpec(resultSize, resultMode);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的代码有点多，希望你仔细看一些注释，代码写得很多，其实计算原理很简单：<br>1、如果我们在xml 的layout_width或者layout_height 把值都写死，那么上述的测量完全就不需要了，之所以要上面的这步测量，是因为 match_parent 就是充满父容器，wrap_content 就是自己多大就多大， 我们写代码的时候特别爽，我们编码方便的时候，google就要帮我们计算你match_parent的时候是多大，wrap_content的是多大，这个计算过程，就是计算出来的父View的MeasureSpec不断往子View传递，结合子View的LayoutParams 一起再算出子View的MeasureSpec，然后继续传给子View，不断计算每个View的MeasureSpec，子View有了MeasureSpec才能更测量自己和自己的子View。</p>
<p>2、上述代码如果这么来理解就简单了</p>
<ul>
<li><strong>如果父View的MeasureSpec 是EXACTLY，说明父View的大小是确切的，（确切的意思很好理解，如果一个View的MeasureSpec 是EXACTLY，那么它的size 是多大，最后展示到屏幕就一定是那么大）。</strong></li>
</ul>
<p>1、如果子View 的layout_xxxx是MATCH_PARENT，父View的大小是确切，子View的大小又MATCH_PARENT（充满整个父View），那么子View的大小肯定是确切的，而且大小值就是父View的size。所以子View的size=父View的size，mode=EXACTLY</p>
<p>2、如果子View 的layout_xxxx是WRAP_CONTENT，也就是子View的大小是根据自己的content 来决定的，但是子View的毕竟是子View，大小不能超过父View的大小，但是子View的是WRAP_CONTENT，我们还不知道具体子View的大小是多少，要等到child.measure(childWidthMeasureSpec, childHeightMeasureSpec) 调用的时候才去真正测量子View 自己content的大小（比如TextView wrap_content 的时候你要测量TextView content 的大小，也就是字符占用的大小，这个测量就是在child.measure(childWidthMeasureSpec, childHeightMeasureSpec)的时候，才能测出字符的大小，MeasureSpec 的意思就是假设你字符100px，但是MeasureSpec 要求最大的只能50px，这时候就要截掉了）。通过上述描述，子View MeasureSpec mode的应该是AT_MOST，而size 暂定父View的 size，表示的意思就是子View的大小没有不确切的值，子View的大小最大为父View的大小，不能超过父View的大小（这就是AT_MOST 的意思），然后这个MeasureSpec 做为子View measure方法 的参数，做为子View的大小的约束或者说是要求，有了这个MeasureSpec子View再实现自己的测量。</p>
<p>3、如果如果子View 的layout_xxxx是确定的值（200dp），那么就更简单了，不管你父View的mode和size是什么，我都写死了就是200dp，那么控件最后展示就是就是200dp，不管我的父View有多大，也不管我自己的content 有多大，反正我就是这么大，所以这种情况MeasureSpec 的mode = EXACTLY 大小size=你在layout_xxxx 填的那个值。</p>
<ul>
<li><strong>如果父View的MeasureSpec 是AT_MOST，说明父View的大小是不确定，最大的大小是MeasureSpec 的size值，不能超过这个值。</strong></li>
</ul>
<p>1、如果子View 的layout_xxxx是MATCH_PARENT，父View的大小是不确定（只知道最大只能多大），子View的大小MATCH_PARENT（充满整个父View），那么子View你即使充满父容器，你的大小也是不确定的，父View自己都确定不了自己的大小，你MATCH_PARENT你的大小肯定也不能确定的，所以子View的mode=AT_MOST，size=父View的size，也就是你在布局虽然写的是MATCH_PARENT，但是由于你的父容器自己的大小不确定，导致子View的大小也不确定，只知道最大就是父View的大小。</p>
<p>2、如果子View 的layout_xxxx是WRAP_CONTENT，父View的大小是不确定（只知道最大只能多大），子View又是WRAP_CONTENT，那么在子View的Content没算出大小之前，子View的大小最大就是父View的大小，所以子View MeasureSpec mode的就是AT_MOST，而size 暂定父View的 size。</p>
<p>3、如果如果子View 的layout_xxxx是确定的值（200dp），同上，写多少就是多少，改变不了的。</p>
<ul>
<li><strong>如果父View的MeasureSpec 是UNSPECIFIED(未指定),表示没有任何束缚和约束，不像AT_MOST表示最大只能多大，不也像EXACTLY表示父View确定的大小，子View可以得到任意想要的大小，不受约束</strong></li>
</ul>
<p>1、如果子View 的layout_xxxx是MATCH_PARENT，因为父View的MeasureSpec是UNSPECIFIED，父View自己的大小并没有任何约束和要求，<br>那么对于子View来说无论是WRAP_CONTENT还是MATCH_PARENT，子View也是没有任何束缚的，想多大就多大，没有不能超过多少的要求，一旦没有任何要求和约束，size的值就没有任何意义了，所以一般都直接设置成0</p>
<p>2、同上…</p>
<p>3、如果如果子View 的layout_xxxx是确定的值（200dp），同上，写多少就是多少，改变不了的（记住，只有设置的确切的值，那么无论怎么测量，大小都是不变的，都是你写的那个值）</p>
<p>到此为止，你是否对MeasureSpec 和三种模式、还有WRAP_CONTENT和MATCH_PARENT有一定的了解了，如果还有任何问题，欢迎在我简书（用户名：Kelin）评论里留言。</p>
<h3 id="2、View的测量过程主要是在onMeasure-方法"><a href="#2、View的测量过程主要是在onMeasure-方法" class="headerlink" title="2、View的测量过程主要是在onMeasure()方法"></a>2、View的测量过程主要是在onMeasure()方法</h3><p>打开View的源码，找到measure方法，这个方法代码不少，但是测量工作都是在onMeasure()做的，measure方法是final的所以这个方法也不可重写，如果想自定义View的测量，你应该去重写onMeasure()方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public final void measure(int widthMeasureSpec, int heightMeasureSpec) &#123;</div><div class="line">  ......</div><div class="line">  onMeasure(widthMeasureSpec,heightMeasureSpec);</div><div class="line">  .....</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3、View的onMeasure-的默认实现"><a href="#3、View的onMeasure-的默认实现" class="headerlink" title="3、View的onMeasure 的默认实现"></a>3、View的onMeasure 的默认实现</h3><p>打开View.java 的源码来看下onMeasure的实现</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) &#123;    </div><div class="line">  setMeasuredDimension(</div><div class="line">  getDefaultSize(getSuggestedMinimumWidth(), widthMeasureSpec),            </div><div class="line">  getDefaultSize(getSuggestedMinimumHeight(), heightMeasureSpec));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>View的onMeasure方法默认实现很简单，就是调用setMeasuredDimension()，setMeasuredDimension()可以简单理解就是给mMeasuredWidth和mMeasuredHeight设值，如果这两个值一旦设置了，那么意味着对于这个View的测量结束了，这个View的宽高已经有测量的结果出来了。如果我们想设定某个View的高宽，完全可以直接通过setMeasuredDimension（100，200）来设置死它的高宽（不建议），但是setMeasuredDimension方法必须在onMeasure方法中调用，不然会抛异常。我们来看下对于View来说它的默认高宽是怎么获取的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">//获取的是android:minHeight属性的值或者View背景图片的大小值</div><div class="line">protected int getSuggestedMinimumWidth() &#123; </div><div class="line">   return (mBackground == null) ? mMinWidth : max(mMinWidth, mBackground.getMinimumWidth()); </div><div class="line">&#125; </div><div class="line">//@param size参数一般表示设置了android:minHeight属性或者该View背景图片的大小值  </div><div class="line">public static int getDefaultSize(int size, int measureSpec) &#123;    </div><div class="line">   int result = size;    </div><div class="line">   int specMode = MeasureSpec.getMode(measureSpec);    </div><div class="line">   int specSize = MeasureSpec.getSize(measureSpec);    </div><div class="line">   switch (specMode) &#123;    </div><div class="line">   case MeasureSpec.UNSPECIFIED:        //表示该View的大小父视图未定，设置为默认值 </div><div class="line">     result = size;  </div><div class="line">     break;    </div><div class="line">   case MeasureSpec.AT_MOST:    </div><div class="line">   case MeasureSpec.EXACTLY:        </div><div class="line">     result = specSize;  </div><div class="line">     break;   </div><div class="line"> &#125;    </div><div class="line">return result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>getDefaultSize的第一个参数size等于getSuggestedMinimumXXXX返回的的值（建议的最小宽度和高度），而建议的最小宽度和高度都是由View的Background尺寸与通过设置View的minXXX属性共同决定的，这个size可以理解为View的默认长度，而第二个参数measureSpec，是父View传给自己的MeasureSpec,这个measureSpec是通过测量计算出来的，具体的计算测量过程前面在讲解MeasureSpec已经讲得比较清楚了（是有父View的MeasureSpec和子View自己的LayoutParams 共同决定的）只要这个测试的mode不是UNSPECIFIED（未确定的），那么默认的就会用这个测量的数值当做View的高度。</p>
<p>对于View默认是测量很简单，大部分情况就是拿计算出来的MeasureSpec的size 当做最终测量的大小。而对于其他的一些View的派生类，如TextView、Button、ImageView等，它们的onMeasure方法系统了都做了重写，不会这么简单直接拿 MeasureSpec 的size来当大小，而去会先去测量字符或者图片的高度等，然后拿到View本身content这个高度（字符高度等），如果MeasureSpec是AT_MOST，而且View本身content的高度不超出MeasureSpec的size，那么可以直接用View本身content的高度（字符高度等），而不是像View.java 直接用MeasureSpec的size做为View的大小。</p>
<h3 id="4、ViewGroup的Measure过程"><a href="#4、ViewGroup的Measure过程" class="headerlink" title="4、ViewGroup的Measure过程"></a>4、ViewGroup的Measure过程</h3><p>ViewGroup 类并没有实现onMeasure，我们知道测量过程其实都是在onMeasure方法里面做的，我们来看下FrameLayout 的onMeasure 方法,具体分析看注释哦。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">//FrameLayout 的测量</div><div class="line">protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) &#123;  </div><div class="line">....</div><div class="line">int maxHeight = 0;</div><div class="line">int maxWidth = 0;</div><div class="line">int childState = 0;</div><div class="line">for (int i = 0; i &lt; count; i++) &#123;    </div><div class="line">   final View child = getChildAt(i);    </div><div class="line">   if (mMeasureAllChildren || child.getVisibility() != GONE) &#123;   </div><div class="line">    // 遍历自己的子View，只要不是GONE的都会参与测量，measureChildWithMargins方法在最上面</div><div class="line">    // 的源码已经讲过了，如果忘了回头去看看，基本思想就是父View把自己的MeasureSpec </div><div class="line">    // 传给子View结合子View自己的LayoutParams 算出子View 的MeasureSpec，然后继续往下传，</div><div class="line">    // 传递叶子节点，叶子节点没有子View，根据传下来的这个MeasureSpec测量自己就好了。</div><div class="line">     measureChildWithMargins(child, widthMeasureSpec, 0, heightMeasureSpec, 0);       </div><div class="line">     final LayoutParams lp = (LayoutParams) child.getLayoutParams(); </div><div class="line">     maxWidth = Math.max(maxWidth, child.getMeasuredWidth() +  lp.leftMargin + lp.rightMargin);        </div><div class="line">     maxHeight = Math.max(maxHeight, child.getMeasuredHeight() + lp.topMargin + lp.bottomMargin);  </div><div class="line">     ....</div><div class="line">     ....</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line">.....</div><div class="line">.....</div><div class="line">//所有的孩子测量之后，经过一系类的计算之后通过setMeasuredDimension设置自己的宽高，</div><div class="line">//对于FrameLayout 可能用最大的字View的大小，对于LinearLayout，可能是高度的累加，</div><div class="line">//具体测量的原理去看看源码。总的来说，父View是等所有的子View测量结束之后，再来测量自己。</div><div class="line">setMeasuredDimension(resolveSizeAndState(maxWidth, widthMeasureSpec, childState),        </div><div class="line">resolveSizeAndState(maxHeight, heightMeasureSpec, childState &lt;&lt; MEASURED_HEIGHT_STATE_SHIFT));</div><div class="line">....</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>到目前为止，基本把Measure 主要原理都过了一遍，接下来我们会结合实例来讲解整个match的过程，首先看下面的代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;LinearLayout  xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;    </div><div class="line">   android:id=&quot;@+id/linear&quot;</div><div class="line">   android:layout_width=&quot;match_parent&quot;    </div><div class="line">   android:layout_height=&quot;wrap_content&quot;    </div><div class="line">   android:layout_marginTop=&quot;50dp&quot;    </div><div class="line">   android:background=&quot;@android:color/holo_blue_dark&quot;    </div><div class="line">   android:paddingBottom=&quot;70dp&quot;    </div><div class="line">   android:orientation=&quot;vertical&quot;&gt;    </div><div class="line">   &lt;TextView        </div><div class="line">    android:id=&quot;@+id/text&quot;       </div><div class="line">    android:layout_width=&quot;match_parent&quot;     </div><div class="line">    android:layout_height=&quot;wrap_content&quot;  </div><div class="line">    android:background=&quot;@color/material_blue_grey_800&quot;       </div><div class="line">    android:text=&quot;TextView&quot;        </div><div class="line">    android:textColor=&quot;@android:color/white&quot;        </div><div class="line">    android:textSize=&quot;20sp&quot; /&gt;    </div><div class="line">   &lt;View       </div><div class="line">      android:id=&quot;@+id/view&quot;       </div><div class="line">     android:layout_width=&quot;match_parent&quot; </div><div class="line">     android:layout_height=&quot;150dp&quot;    </div><div class="line">     android:background=&quot;@android:color/holo_green_dark&quot; /&gt;</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure>
<p>上面的代码对于出来的布局是下面的一张图</p>
<p><img src="http://upload-images.jianshu.io/upload_images/966283-4a11f92ac8c5e224.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图 1."></p>
<p>对于上面图可能有些不懂，这边做下说明:</p>
<p>整个图是一个DecorView,DecorView可以理解成整个页面的根View,DecorView是一个FrameLayout,包含两个子View，一个id=statusBarBackground的View和一个是LineaLayout，id=statusB<br>arBackground的View，我们可以先不管（我也不是特别懂这个View,应该就是statusBar的设置<br>背景的一个控件，方便设置statusBar的背景)，而这个LinearLayout比较重要，它包含一个ti<br>tle和一个content，title很好理解其实就是TitleBar或者ActionBar,content就更简单了，setContentView()方法你应该用过吧，android.R.id.content你应该听过吧，没错就是它,content是一个FrameLayout，你写的页面布局通过setContentView加进来就成了content的直接子View。</p>
<p>整个View的布局图如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/966283-4096801e91e2eccc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图 1."></p>
<p>这张图在下面分析measure，会经常用到，主要用于了解递归的时候view 的measure顺序</p>
<p>注:<br>1、 header的是个ViewStub,用来惰性加载ActionBar，为了便于分析整个测量过程，我把Theme设成NoActionBar，避免ActionBar 相关的measure干扰整个过程，这样可以忽略掉ActionBar 的测量，在调试代码更清晰。</p>
<p>2、包含Header(ActionBar）和id/content的那个父View，我不知道叫什么名字好，我们姑且叫它ViewRoot（看上图）,它是垂直的LinearLayout，放着整个页面除statusBar的之外所有的东西，叫它ViewRoot 应该还ok，一个代号而已。</p>
<p>既然我们知道整个View的Root是DecorView，那么View的绘制是从哪里开始的呢，我们知道每个Activity 均会创建一个 PhoneWindow对象，是Activity和整个View系统交互的接口，每个Window都对应着一个View和一个ViewRootImpl，Window和View通过ViewRootImpl来建立联系,对于Activity来说，ViewRootImpl是连接WindowManager和DecorView的纽带,绘制的入口是由ViewRootImpl的performTraversals方法来发起Measure，Layout，Draw等流程的。</p>
<p>我们来看下ViewRootImpl的performTraversals 方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">private void performTraversals() &#123; </div><div class="line">...... </div><div class="line">int childWidthMeasureSpec = getRootMeasureSpec(mWidth, lp.width); </div><div class="line">int childHeightMeasureSpec = getRootMeasureSpec(mHeight, lp.height); </div><div class="line">...... </div><div class="line">mView.measure(childWidthMeasureSpec, childHeightMeasureSpec); </div><div class="line">......</div><div class="line">mView.layout(0, 0, mView.getMeasuredWidth(), mView.getMeasuredHeight());</div><div class="line">...... </div><div class="line">mView.draw(canvas); </div><div class="line">......</div><div class="line">&#125;</div><div class="line"></div><div class="line">private static int getRootMeasureSpec(int windowSize, int rootDimension) &#123; </div><div class="line">   int measureSpec; </div><div class="line">   switch (rootDimension) &#123; </div><div class="line">   case ViewGroup.LayoutParams.MATCH_PARENT: </div><div class="line">   // Window can&apos;t resize. Force root view to be windowSize.   </div><div class="line">   measureSpec = MeasureSpec.makeMeasureSpec(windowSize,MeasureSpec.EXACTLY);</div><div class="line">   break; </div><div class="line">   ...... </div><div class="line">  &#125; </div><div class="line"> return measureSpec; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>performTraversals 中我们看到的mView其实就是DecorView,View的绘制从DecorView开始， 在mView.measure()的时候调用getRootMeasureSpec获得两个MeasureSpec做为参数，getRootMeasureSpec的两个参数（mWidth, lp.width）mWith和mHeight 是屏幕的宽度和高度， lp是WindowManager.LayoutParams，它的lp.width和lp.height的默认值是MATCH_PARENT,所以通过getRootMeasureSpec 生成的测量规格MeasureSpec 的mode是MATCH_PARENT ，size是屏幕的高宽。<br>因为DecorView 是一个FrameLayout 那么接下来会进入FrameLayout 的measure方法，measure的两个参数就是刚才getRootMeasureSpec的生成的两个MeasureSpec，DecorView的测量开始了。<br>首先是DecorView 的 MeasureSpec ，根据上面的分析DecorView 的 MeasureSpec是Windows传过来的，我们画出DecorView 的MeasureSpec 图：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/966283-c330852c971b02a8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/340" alt="图 1."></p>
<pre><code>注：
1、-1 代表的是EXACTLY，-2 是AT_MOST
2、由于屏幕的像素是1440x2560,所以DecorView 的MeasureSpec的size 对应于这两个值
</code></pre><p>那么接下来在FrameLayout 的onMeasure()方法DecorView开始for循环测量自己的子View,测量完所有的子View再来测量自己，由下图可知，接下来要测量ViewRoot的大小</p>
<p><img src="http://upload-images.jianshu.io/upload_images/966283-4096801e91e2eccc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/540" alt="图 1."></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">//FrameLayout 的测量</div><div class="line">protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) &#123;  </div><div class="line">....</div><div class="line">int maxHeight = 0;</div><div class="line">int maxWidth = 0;</div><div class="line">int childState = 0;</div><div class="line">for (int i = 0; i &lt; count; i++) &#123;    </div><div class="line">   final View child = getChildAt(i);    </div><div class="line">   if (mMeasureAllChildren || child.getVisibility() != GONE) &#123;   </div><div class="line">    // 遍历自己的子View，只要不是GONE的都会参与测量，measureChildWithMargins方法在最上面</div><div class="line">    // 的源码已经讲过了，如果忘了回头去看看，基本思想就是父View把自己当MeasureSpec </div><div class="line">    // 传给子View结合子View自己的LayoutParams 算出子View 的MeasureSpec，然后继续往下穿，</div><div class="line">    // 传递叶子节点，叶子节点没有子View，只要负责测量自己就好了。</div><div class="line">     measureChildWithMargins(child, widthMeasureSpec, 0, heightMeasureSpec, 0);      </div><div class="line">     ....</div><div class="line">     ....</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line">....</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>DecorView 测量ViewRoot 的时候把自己的widthMeasureSpec和heightMeasureSpec传进去了，接下来你就要去看measureChildWithMargins的源码了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">protected void measureChildWithMargins(View child, int parentWidthMeasureSpec, int widthUsed, int parentHeightMeasureSpec, int heightUsed) &#123; </div><div class="line"></div><div class="line">final MarginLayoutParams lp = (MarginLayoutParams) child.getLayoutParams();   </div><div class="line"></div><div class="line">final int childWidthMeasureSpec = getChildMeasureSpec(parentWidthMeasureSpec,            </div><div class="line">mPaddingLeft + mPaddingRight + lp.leftMargin + lp.rightMargin + widthUsed, lp.width);    </div><div class="line"></div><div class="line">final int childHeightMeasureSpec = getChildMeasureSpec(parentHeightMeasureSpec,           </div><div class="line">mPaddingTop + mPaddingBottom + lp.topMargin + lp.bottomMargin  + heightUsed, lp.height);  </div><div class="line"></div><div class="line">child.measure(childWidthMeasureSpec, childHeightMeasureSpec);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>ViewRoot 是系统的View，它的LayoutParams默认都是match_parent,根据我们文章最开始MeasureSpec 的计算规则，ViewRoot 的MeasureSpec mode应该等于EXACTLY（DecorView MeasureSpec 的mode是EXACTLY，ViewRoot的layoutparams 是match_parent），size 也等于DecorView的size，所以ViewRoot的MeasureSpec图如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/966283-ed0ffedcca47672a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/540" alt="图 1."></p>
<p>算出ViewRoot的MeasureSpec 之后，开始调用ViewRoot.measure 方法去测量ViewRoot的大小，然而ViewRoot是一个LinearLayout ，ViewRoot.measure最终会执行的LinearLayout 的onMeasure 方法，LinearLayout 的onMeasure 方法又开始逐个测量它的子View，上面的measureChildWithMargins方法又会被调用，那么根据View的层级图，接下来测量的是header（ViewStub）,由于header的Gone，所以直接跳过不做测量工作，所以接下来轮到ViewRoot的第二个child content（android.R.id.content）,我们要算出这个content 的MeasureSpec，所以又要拿ViewRoot 的MeasureSpec 和 android.R.id.content的LayoutParams 做计算了，计算过程就是调用getChildMeasureSpec的方法，</p>
<p><img src="http://upload-images.jianshu.io/upload_images/966283-527eb25fd49d38ef.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图 1."></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">protected void measureChildWithMargins(View child, int parentWidthMeasureSpec, int widthUsed, int parentHeightMeasureSpec, int heightUsed) &#123; </div><div class="line">   .....</div><div class="line">   final int childHeightMeasureSpec = getChildMeasureSpec(parentHeightMeasureSpec,           </div><div class="line">mPaddingTop + mPaddingBottom + lp.topMargin + lp.bottomMargin  + heightUsed, lp.height);  </div><div class="line">   ....</div><div class="line">&#125;</div><div class="line"></div><div class="line">public static int getChildMeasureSpec(int spec, int padding, int childDimension) &#123;  </div><div class="line">    int specMode = MeasureSpec.getMode(spec);  //获得父View的mode  </div><div class="line">    int specSize = MeasureSpec.getSize(spec);  //获得父View的大小  </div><div class="line"></div><div class="line">    int size = Math.max(0, specSize - padding); //父View的大小-自己的Padding+子View的Margin，得到值才是子View可能的最大值。  </div><div class="line">     .....</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>由上面的代码<br><strong>int size = Math.max(0, specSize - padding);<br>而 padding=mPaddingTop + mPaddingBottom + lp.topMargin + lp.bottomMargin + heightUsed</strong></p>
<p>算出android.R.id.content 的MeasureSpec 的size<br>由于ViewRoot 的mPaddingBottom=100px(这个可能和状态栏的高度有关，我们测量的最后会发现id/statusBarBackground的View的高度刚好等于100px，ViewRoot 是系统的View的它的Padding 我们没法改变，所以计算出来Content（android.R.id.content） 的MeasureSpec 的高度少了100px ，它的宽高的mode 根据算出来也是EXACTLY（ViewRoot 是EXACTLY和android.R.id.content 是match_parent）。所以Content（android.R.id.content）的MeasureSpec 如下（高度少了100px）：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/966283-5ce615a3684d7815.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/540" alt="图 1."></p>
<p>Paste_Image.png<br>Content（android.R.id.content） 是FrameLayout，递归调用开始准备计算id/linear的MeasureSpec，我们先给出结果：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/966283-c7e86f4510ddf84a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图 1."></p>
<p>图中有两个要注意的地方：<br>1、id/linear的heightMeasureSpec 的mode=AT_MOST，因为id/linear 的LayoutParams 的layout_height=”wrap_content”</p>
<p>2、id/linear的heightMeasureSpec 的size 少了200px, 由上面的代码padding=mPaddingTop + mPaddingBottom + lp.topMargin + lp.bottomMargin + heightUsed;int size = Math.max(0, specSize - padding);</p>
<p>由于id/linear 的 android:layout_marginTop=”50dp” 使得lp.topMargin=200px (本设备的density=4，px=4*pd)，在计算后id/linear的heightMeasureSpec 的size 少了200px。（布局代码前面已给出，可自行查看id/linear 控件xml中设置的属性）</p>
<p>linear.measure接着往下算linear的子View的的MeasureSpec，看下View层级图，往下走应该是id/text,接下来是计算id/text的MeasureSpec，直接看图，mode=AT_MOST ,size 少了280，别问我为什么 …specSize - padding.</p>
<p><img src="http://upload-images.jianshu.io/upload_images/966283-058c5a6ce57b3125.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图 1."></p>
<p>算出id/text 的MeasureSpec 后，接下来text.measure(childWidthMeasureSpec, childHeightMeasureSpec);准备测量id/text 的高宽，这时候已经到底了，id/text是TextView，已经没有子类了，这时候跳到TextView的onMeasure方法了。TextView 拿着刚才计算出来的heightMeasureSpec（mode=AT_MOST,size=1980）,这个就是对TextView的高度和宽度的约束，进到TextView 的onMeasure(widthMeasureSpec,heightMeasureSpec) 方法，在onMeasure 方法执行调试过程中，我们发现下面的代码：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/966283-856ea117c2b84148.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图 1."></p>
<p>TextView字符的高度（也就是TextView的content高度[wrap_content]）测出来=107px，107px 并没有超过1980px(允许的最大高度)，所以实际测量出来TextView的高度是107px。<br>最终算出id/text 的mMeasureWidth=1440px,mMeasureHeight=107px。</p>
<p>贴一下布局代码，免得你忘了具体布局。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;LinearLayout  xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;    </div><div class="line">   android:id=&quot;@+id/linear&quot;</div><div class="line">   android:layout_width=&quot;match_parent&quot;    </div><div class="line">   android:layout_height=&quot;wrap_content&quot;    </div><div class="line">   android:layout_marginTop=&quot;50dp&quot;    </div><div class="line">   android:background=&quot;@android:color/holo_blue_dark&quot;    </div><div class="line">   android:paddingBottom=&quot;70dp&quot;    </div><div class="line">   android:orientation=&quot;vertical&quot;&gt;    </div><div class="line">   &lt;TextView        </div><div class="line">    android:id=&quot;@+id/text&quot;       </div><div class="line">    android:layout_width=&quot;match_parent&quot;     </div><div class="line">    android:layout_height=&quot;wrap_content&quot;  </div><div class="line">    android:background=&quot;@color/material_blue_grey_800&quot;       </div><div class="line">    android:text=&quot;TextView&quot;        </div><div class="line">    android:textColor=&quot;@android:color/white&quot;        </div><div class="line">    android:textSize=&quot;20sp&quot; /&gt;    </div><div class="line">   &lt;View       </div><div class="line">      android:id=&quot;@+id/view&quot;       </div><div class="line">     android:layout_width=&quot;match_parent&quot; </div><div class="line">     android:layout_height=&quot;150dp&quot;    </div><div class="line">     android:background=&quot;@android:color/holo_green_dark&quot; /&gt;</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure>
<p>TextView的高度已经测量出来了，接下来测量id/linear的第二个child（id/view），同样的原理测出id/view的MeasureSpec.</p>
<p><img src="http://upload-images.jianshu.io/upload_images/966283-55810a48922ac8fe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图 1."></p>
<p>id/view的MeasureSpec 计算出来后，调用view.measure(childWidthMeasureSpec, childHeightMeasureSpec)的测量id/view的高宽，之前已经说过View measure的默认实现是</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) &#123;    </div><div class="line">  setMeasuredDimension(</div><div class="line">  getDefaultSize(getSuggestedMinimumWidth(), widthMeasureSpec),            </div><div class="line">  getDefaultSize(getSuggestedMinimumHeight(), heightMeasureSpec));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最终算出id/view的mMeasureWidth=1440px,mMeasureHeight=600px。</p>
<p>id/linear 的子View的高度都计算完毕了，接下来id/linear就通过所有子View的测量结果计算自己的高宽，id/linear是LinearLayout，所有它的高度计算简单理解就是子View的高度的累积+自己的Padding.</p>
<p><img src="http://upload-images.jianshu.io/upload_images/966283-b089fd286ca7fc05.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图 1."></p>
<p>最终算出id/linear的mMeasureWidth=1440px,mMeasureHeight=987px。</p>
<p>最终算出id/linear出来后，id/content 就要根据它唯一的子View id/linear 的测量结果和自己的之前算出的MeasureSpec一起来测量自己的结果，具体计算的逻辑去看FrameLayout onMeasure 函数的计算过程。以此类推，接下来测量ViewRoot,然后再测量id/statusBarBackground,虽然不知道id/statusBarBackground 是什么，但是调试的过程中，测出的它的高度=100px, 和 id/content 的paddingTop 刚好相等。在最后测量DecorView 的高宽，最终整个测量过程结束。所有的View的大小测量完毕。所有的getMeasureWidth 和 getMeasureWidth 都已经有值了。Measure 分析到此为止，如有不懂，评论留言（简书：kelin）</p>
<h2 id="layout过程"><a href="#layout过程" class="headerlink" title="layout过程"></a>layout过程</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mView.measure(childWidthMeasureSpec, childHeightMeasureSpec); </div><div class="line">......</div><div class="line">mView.layout(0, 0, mView.getMeasuredWidth(), mView.getMeasuredHeight());</div></pre></td></tr></table></figure>
<p>performTraversals 方法执行完mView.measure 计算出mMeasuredXXX后就开始执行layout 函数来确定View具体放在哪个位置，我们计算出来的View目前只知道view矩阵的大小，具体这个矩阵放在哪里，这就是layout 的工作了。layout的主要作用 ：根据子视图的大小以及布局参数将View树放到合适的位置上。</p>
<p>既然是通过mView.layout(0, 0, mView.getMeasuredWidth(), mView.getMeasuredHeight()); 那我们来看下layout 函数做了什么，mView肯定是个ViewGroup，不会是View,我们直接看下ViewGroup 的layout函数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public final void layout(int l, int t, int r, int b) &#123;    </div><div class="line">   if (!mSuppressLayout &amp;&amp; (mTransition == null || !mTransition.isChangingLayout())) &#123;        </div><div class="line">    if (mTransition != null) &#123;            </div><div class="line">       mTransition.layoutChange(this);        </div><div class="line">    &#125;       </div><div class="line">    super.layout(l, t, r, b);    </div><div class="line">    &#125; else &#123;        </div><div class="line">    // record the fact that we noop&apos;d it; request layout when transition finishes        </div><div class="line">      mLayoutCalledWhileSuppressed = true;    </div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>代码可以看个大概，LayoutTransition是用于处理ViewGroup增加和删除子视图的动画效果，也就是说如果当前ViewGroup未添加LayoutTransition动画，或者LayoutTransition动画此刻并未运行，那么调用super.layout(l, t, r, b)，继而调用到ViewGroup中的onLayout，否则将mLayoutSuppressed设置为true，等待动画完成时再调用requestLayout()。<br>这个函数是final 不能重写，所以ViewGroup的子类都会调用这个函数，layout 的具体实现是在super.layout(l, t, r, b)里面做的，那么我接下来看一下View类的layout函数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public final void layout(int l, int t, int r, int b) &#123;</div><div class="line">       .....</div><div class="line">      //设置View位于父视图的坐标轴</div><div class="line">       boolean changed = setFrame(l, t, r, b); </div><div class="line">       //判断View的位置是否发生过变化，看有必要进行重新layout吗</div><div class="line">       if (changed || (mPrivateFlags &amp; LAYOUT_REQUIRED) == LAYOUT_REQUIRED) &#123;</div><div class="line">           if (ViewDebug.TRACE_HIERARCHY) &#123;</div><div class="line">               ViewDebug.trace(this, ViewDebug.HierarchyTraceType.ON_LAYOUT);</div><div class="line">           &#125;</div><div class="line">           //调用onLayout(changed, l, t, r, b); 函数</div><div class="line">           onLayout(changed, l, t, r, b);</div><div class="line">           mPrivateFlags &amp;= ~LAYOUT_REQUIRED;</div><div class="line">       &#125;</div><div class="line">       mPrivateFlags &amp;= ~FORCE_LAYOUT;</div><div class="line">       .....</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>1、setFrame(l, t, r, b) 可以理解为给mLeft 、mTop、mRight、mBottom赋值，然后基本就能确定View自己在父视图的位置了，这几个值构成的矩形区域就是该View显示的位置，这里的具体位置都是相对与父视图的位置。</p>
<p>2、回调onLayout，对于View来说，onLayout只是一个空实现，一般情况下我们也不需要重载该函数,：</p>
<p>protected void onLayout(boolean changed, int left, int top, int right, int bottom) {  </p>
<pre><code>}
</code></pre><p>对于ViewGroup 来说，唯一的差别就是ViewGroup中多了关键字abstract的修饰，要求其子类必须重载onLayout函数。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@Override  </div><div class="line">protected abstract void onLayout(boolean changed,  </div><div class="line">        int l, int t, int r, int b);</div></pre></td></tr></table></figure>
<p>而重载onLayout的目的就是安排其children在父视图的具体位置，那么如何安排子View的具体位置呢？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">int childCount = getChildCount() ; </div><div class="line">  for(int i=0 ;i&lt;childCount ;i++)&#123;</div><div class="line">       View child = getChildAt(i) ;</div><div class="line">       //整个layout()过程就是个递归过程</div><div class="line">       child.layout(l, t, r, b) ;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>代码很简单，就是遍历自己的孩子，然后调用 child.layout(l, t, r, b) ，给子view 通过setFrame(l, t, r, b) 确定位置，而重点是(l, t, r, b) 怎么计算出来的呢。还记得我们之前测量过程，测量出来的MeasuredWidth和MeasuredHeight吗？还记得你在xml 设置的Gravity吗？还有RelativeLayout 的其他参数吗，没错，就是这些参数和MeasuredHeight、MeasuredWidth 一起来确定子View在父视图的具体位置的。具体的计算过程大家可以看下最简单FrameLayout 的onLayout 函数的源码，每个不同的ViewGroup 的实现都不一样，这边不做具体分析了吧。</p>
<p>3、MeasuredWidth和MeasuredHeight这两个参数为layout过程提供了一个很重要的依据（如果不知道View的大小，你怎么固定四个点的位置呢），但是这两个参数也不是必须的，layout过程中的4个参数l, t, r, b完全可以由我们任意指定，而View的最终的布局位置和大小（mRight - mLeft=实际宽或者mBottom-mTop=实际高）完全由这4个参数决定，measure过程得到的mMeasuredWidth和mMeasuredHeight提供了视图大小测量的值，但我们完全可以不使用这两个值，所以measure过程并不是必须的。如果我们不使用这两个值，那么getMeasuredWidth() 和getWidth() 就很有可能不是同一个值，它们的计算是不一样的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public final int getMeasuredWidth() &#123;  </div><div class="line">        return mMeasuredWidth &amp; MEASURED_SIZE_MASK;  </div><div class="line">    &#125;  </div><div class="line">public final int getWidth() &#123;  </div><div class="line">        return mRight - mLeft;  </div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>layout 过程相对简单些，分析就到此为止。</p>
<h2 id="draw过程"><a href="#draw过程" class="headerlink" title="draw过程"></a>draw过程</h2><p>performTraversals 方法的下一步就是mView.draw(canvas); 因为View的draw 方法一般不去重写，官网文档也建议不要去重写draw 方法，所以下一步执行就是View.java的draw 方法，我们来看下源码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">public void draw(Canvas canvas) &#123;</div><div class="line">    ...</div><div class="line">        /*</div><div class="line">         * Draw traversal performs several drawing steps which must be executed</div><div class="line">         * in the appropriate order:</div><div class="line">         *</div><div class="line">         *      1. Draw the background</div><div class="line">         *      2. If necessary, save the canvas&apos; layers to prepare for fading</div><div class="line">         *      3. Draw view&apos;s content</div><div class="line">         *      4. Draw children</div><div class="line">         *      5. If necessary, draw the fading edges and restore layers</div><div class="line">         *      6. Draw decorations (scrollbars for instance)</div><div class="line">         */</div><div class="line"></div><div class="line">        // Step 1, draw the background, if needed</div><div class="line">    ...</div><div class="line">        background.draw(canvas);</div><div class="line">    ...</div><div class="line">        // skip step 2 &amp; 5 if possible (common case)</div><div class="line">    ...</div><div class="line">        // Step 2, save the canvas&apos; layers</div><div class="line">    ...</div><div class="line">        if (solidColor == 0) &#123;</div><div class="line">            final int flags = Canvas.HAS_ALPHA_LAYER_SAVE_FLAG;</div><div class="line"></div><div class="line">            if (drawTop) &#123;</div><div class="line">                canvas.saveLayer(left, top, right, top + length, null, flags);</div><div class="line">            &#125;</div><div class="line">    ...</div><div class="line">        // Step 3, draw the content</div><div class="line">        if (!dirtyOpaque) onDraw(canvas);</div><div class="line"></div><div class="line">        // Step 4, draw the children</div><div class="line">        dispatchDraw(canvas);</div><div class="line"></div><div class="line">        // Step 5, draw the fade effect and restore layers</div><div class="line"></div><div class="line">        if (drawTop) &#123;</div><div class="line">            matrix.setScale(1, fadeHeight * topFadeStrength);</div><div class="line">            matrix.postTranslate(left, top);</div><div class="line">            fade.setLocalMatrix(matrix);</div><div class="line">            canvas.drawRect(left, top, right, top + length, p);</div><div class="line">        &#125;</div><div class="line">    ...</div><div class="line">        // Step 6, draw decorations (scrollbars)</div><div class="line">        onDrawScrollBars(canvas);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>注释写得比较清楚，一共分成6步，看到注释没有（ // skip step 2 &amp; 5 if possible (common case)）除了2 和 5之外 我们一步一步来看：</p>
<h3 id="1、第一步：背景绘制"><a href="#1、第一步：背景绘制" class="headerlink" title="1、第一步：背景绘制"></a>1、第一步：背景绘制</h3><p>看注释即可，不是重点</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">private void drawBackground(Canvas canvas) &#123; </div><div class="line">     Drawable final Drawable background = mBackground; </div><div class="line">      ...... </div><div class="line">     //mRight - mLeft, mBottom - mTop layout确定的四个点来设置背景的绘制区域 </div><div class="line">     if (mBackgroundSizeChanged) &#123; </div><div class="line">        background.setBounds(0, 0, mRight - mLeft, mBottom - mTop);   </div><div class="line">        mBackgroundSizeChanged = false; rebuildOutline(); </div><div class="line">     &#125; </div><div class="line">     ...... </div><div class="line">     //调用Drawable的draw() 把背景图片画到画布上</div><div class="line">     background.draw(canvas); </div><div class="line">     ...... </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2、第三步，对View的内容进行绘制。"><a href="#2、第三步，对View的内容进行绘制。" class="headerlink" title="2、第三步，对View的内容进行绘制。"></a>2、第三步，对View的内容进行绘制。</h3><p>onDraw(canvas) 方法是view用来draw 自己的，具体如何绘制，颜色线条什么样式就需要子View自己去实现，View.java 的onDraw(canvas) 是空实现，ViewGroup 也没有实现，每个View的内容是各不相同的，所以需要由子类去实现具体逻辑。</p>
<h3 id="3、第4步-对当前View的所有子View进行绘制"><a href="#3、第4步-对当前View的所有子View进行绘制" class="headerlink" title="3、第4步 对当前View的所有子View进行绘制"></a>3、第4步 对当前View的所有子View进行绘制</h3><p>dispatchDraw(canvas) 方法是用来绘制子View的，View.java 的dispatchDraw()方法是一个空方法,因为View没有子View,不需要实现dispatchDraw ()方法，ViewGroup就不一样了，它实现了dispatchDraw ()方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line"> protected void dispatchDraw(Canvas canvas) &#123;</div><div class="line">       ...</div><div class="line">        if ((flags &amp; FLAG_USE_CHILD_DRAWING_ORDER) == 0) &#123;</div><div class="line">            for (int i = 0; i &lt; count; i++) &#123;</div><div class="line">                final View child = children[i];</div><div class="line">                if ((child.mViewFlags &amp; VISIBILITY_MASK) == VISIBLE || child.getAnimation() != null) &#123;</div><div class="line">                    more |= drawChild(canvas, child, drawingTime);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125; else &#123;</div><div class="line">            for (int i = 0; i &lt; count; i++) &#123;</div><div class="line">                final View child = children[getChildDrawingOrder(count, i)];</div><div class="line">                if ((child.mViewFlags &amp; VISIBILITY_MASK) == VISIBLE || child.getAnimation() != null) &#123;</div><div class="line">                    more |= drawChild(canvas, child, drawingTime);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">      ......</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>代码一眼看出，就是遍历子View然后drawChild(),drawChild()方法实际调用的是子View.draw()方法,ViewGroup类已经为我们实现绘制子View的默认过程，这个实现基本能满足大部分需求，所以ViewGroup类的子类（LinearLayout,FrameLayout）也基本没有去重写dispatchDraw方法，我们在实现自定义控件，除非比较特别，不然一般也不需要去重写它， drawChild()的核心过程就是为子视图分配合适的cavas剪切区，剪切区的大小正是由layout过程决定的，而剪切区的位置取决于滚动值以及子视图当前的动画。设置完剪切区后就会调用子视图的draw()函数进行具体的绘制了。</p>
<h3 id="4、第6步-对View的滚动条进行绘制"><a href="#4、第6步-对View的滚动条进行绘制" class="headerlink" title="4、第6步 对View的滚动条进行绘制"></a>4、第6步 对View的滚动条进行绘制</h3><p>不是重点，知道有这东西就行，onDrawScrollBars 的一句注释 ：Request the drawing of the horizontal and the vertical scrollbar. The scrollbars are painted only if they have been awakened first.</p>
<p>一张图看下整个draw的递归流程。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/966283-480bf9def58bed74.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图 1."></p>
<p>到此整个绘制过程基本讲述完毕了。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android性能优化之利用LeakCanary检测内存泄漏及解决办法]]></title>
      <url>https://github.com/pangrongxian/2016/01/18/Android%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%B9%8B%E5%88%A9%E7%94%A8LeakCanary%E6%A3%80%E6%B5%8B%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E5%8F%8A%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>原文：<a href="http://www.cnblogs.com/whoislcj/p/6001422.html" target="_blank" rel="external">http://www.cnblogs.com/whoislcj/p/6001422.html</a></p>
<h2 id="什么是内存泄漏？"><a href="#什么是内存泄漏？" class="headerlink" title="什么是内存泄漏？"></a>什么是内存泄漏？</h2><p>有些对象只有有限的生命周期。当它们的任务完成之后，它们将被垃圾回收。如果在对象的生命周期本该结束的时候，这个对象还被一系列的引用，这就会导致内存泄漏。随着泄漏的累积，app将消耗完内存。</p>
<h2 id="内存泄漏造成什么影响？"><a href="#内存泄漏造成什么影响？" class="headerlink" title="内存泄漏造成什么影响？"></a>内存泄漏造成什么影响？</h2><p>它是造成应用程序OOM的主要原因之一。由于android系统为每个应用程序分配的内存有限，当一个应用中产生的内存泄漏比较多时，就难免会导致应用所需要的内存超过这个系统分配的内存限额，这就造成了内存溢出而导致应用Crash。</p>
<h2 id="什么是LeakCanary？"><a href="#什么是LeakCanary？" class="headerlink" title="什么是LeakCanary？"></a>什么是LeakCanary？</h2><p>leakCanary是Square开源框架，是一个Android和Java的内存泄露检测库，如果检测到某个activity 有内存泄露，LeakCanary就是自动地显示一个通知，所以可以把它理解为傻瓜式的内存泄露检测工具。通过它可以大幅度减少开发中遇到的oom问题，大大提高APP的质量。</p>
<h4 id="本篇不介绍如何使用LeakCanary，关于LeakCanary使用参考以下文章："><a href="#本篇不介绍如何使用LeakCanary，关于LeakCanary使用参考以下文章：" class="headerlink" title="本篇不介绍如何使用LeakCanary，关于LeakCanary使用参考以下文章："></a>本篇不介绍如何使用LeakCanary，关于LeakCanary使用参考以下文章：</h4><h4 id="1-LeakCanary-让内存泄露无所遁形"><a href="#1-LeakCanary-让内存泄露无所遁形" class="headerlink" title="1. LeakCanary: 让内存泄露无所遁形 "></a><a href="">1. LeakCanary: 让内存泄露无所遁形 </a></h4><h4 id="2-LeakCanary-中文使用说明"><a href="#2-LeakCanary-中文使用说明" class="headerlink" title="2. LeakCanary 中文使用说明"></a><a href="">2. LeakCanary 中文使用说明</a></h4><hr>
<h2 id="LeakCanary捕获常见内存泄漏以及解决办法"><a href="#LeakCanary捕获常见内存泄漏以及解决办法" class="headerlink" title="LeakCanary捕获常见内存泄漏以及解决办法"></a>LeakCanary捕获常见内存泄漏以及解决办法</h2><h3 id="1-）错误使用单例造成的内存泄漏"><a href="#1-）错误使用单例造成的内存泄漏" class="headerlink" title="1.）错误使用单例造成的内存泄漏"></a>1.）错误使用单例造成的内存泄漏</h3><p>在平时开发中单例设计模式是我们经常使用的一种设计模式，而在开发中单例经常需要持有Context对象，如果持有的Context对象生命周期与单例生命周期更短时，或导致Context无法被释放回收，则有可能造成内存泄漏，错误写法如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">public class LoginManager &#123;</div><div class="line">    private static LoginManager mInstance;</div><div class="line">    private Context mContext;</div><div class="line"></div><div class="line">    private LoginManager(Context context) &#123;</div><div class="line">        this.mContext = context;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    public static LoginManager getInstance(Context context) &#123;</div><div class="line">        if (mInstance == null) &#123;</div><div class="line">            synchronized (LoginManager.class) &#123;</div><div class="line">                if (mInstance == null) &#123;</div><div class="line">                    mInstance = new LoginManager(context);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return mInstance;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void dealData() &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>若我们在一个Activity中调用的，然后关闭该Activity则会出现内存泄漏。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">LoginManager.getInstance(this).dealData();</div></pre></td></tr></table></figure>
<h3 id="LeakCanary检测结果如下："><a href="#LeakCanary检测结果如下：" class="headerlink" title="LeakCanary检测结果如下："></a>LeakCanary检测结果如下：</h3><p><img src="http://images2015.cnblogs.com/blog/950883/201610/950883-20161029133437718-1566183114.jpg" alt=""></p>
<p>解决办法：要保证Context和AppLication的生命周期一样，修改后代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">public class LoginManager &#123;</div><div class="line">    private static LoginManager mInstance;</div><div class="line">    private Context mContext;</div><div class="line"></div><div class="line">    private LoginManager(Context context) &#123;</div><div class="line">        this.mContext = context.getApplicationContext();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    public static LoginManager getInstance(Context context) &#123;</div><div class="line">        if (mInstance == null) &#123;</div><div class="line">            synchronized (LoginManager.class) &#123;</div><div class="line">                if (mInstance == null) &#123;</div><div class="line">                    mInstance = new LoginManager(context);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return mInstance;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void dealData() &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2-）Handler造成的内存泄漏"><a href="#2-）Handler造成的内存泄漏" class="headerlink" title="2.）Handler造成的内存泄漏"></a>2.）Handler造成的内存泄漏</h3><p>早些年Handler的使用频率还是蛮高的，它是工作线程与UI线程之间通讯的桥梁，只是现在大量开源框架对其进行了封装，我们这里模拟一种常见使用方式来模拟内存泄漏情形。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">public class MainActivity extends AppCompatActivity &#123;</div><div class="line">    private Handler mHandler = new Handler();</div><div class="line">    private TextView mTextView;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        mTextView = (TextView) findViewById(R.id.text);//模拟内存泄露</div><div class="line">        mHandler.postDelayed(new Runnable() &#123;</div><div class="line">            @Override</div><div class="line">            public void run() &#123;</div><div class="line">                mTextView.setText(&quot;lcj&quot;);</div><div class="line">            &#125;</div><div class="line">        &#125;, 3 * 60 * 1000);</div><div class="line">        finish();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDestroy() &#123;</div><div class="line">        super.onDestroy();</div><div class="line">        LApplication.getRefWatcher().watch(this);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上述代码通过内部类的方式创建mHandler对象,此时mHandler会隐式地持有一个外部类对象引用这里就是MainActivity，当执行postDelayed方法时，该方法会将你的Handler装入一个Message，并把这条Message推到MessageQueue中，MessageQueue是在一个Looper线程中不断轮询处理消息，那么当这个Activity退出时消息队列中还有未处理的消息或者正在处理消息，而消息队列中的Message持有mHandler实例的引用，mHandler又持有Activity的引用，所以导致该Activity的内存资源无法及时回收，引发内存泄漏。</p>
<h3 id="LeakCanary检测结果如下：-1"><a href="#LeakCanary检测结果如下：-1" class="headerlink" title="LeakCanary检测结果如下："></a>LeakCanary检测结果如下：</h3><p><img src="http://images2015.cnblogs.com/blog/950883/201610/950883-20161029142349078-91844742.jpg" alt=""></p>
<p>要想避免Handler引起内存泄漏问题，需要我们在Activity关闭退出的时候的移除消息队列中所有消息和所有的Runnable。上述代码只需在onDestroy()函数中调用mHandler.removeCallbacksAndMessages(null);就行了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">public class MainActivity1 extends AppCompatActivity &#123;</div><div class="line">    private Handler mHandler = new Handler();</div><div class="line">    private TextView mTextView;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        mTextView = (TextView) findViewById(R.id.text);</div><div class="line">        //模拟内存泄露</div><div class="line">        mHandler.postDelayed(new Runnable() &#123;</div><div class="line">            @Override</div><div class="line">            public void run() &#123;</div><div class="line">                mTextView.setText(&quot;lcj&quot;);</div><div class="line">            &#125;</div><div class="line">        &#125;, 3 * 60 * 1000);</div><div class="line">        finish();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDestroy() &#123;</div><div class="line">        super.onDestroy();</div><div class="line">        mHandler.removeCallbacksAndMessages(null);</div><div class="line">        mHandler=null;</div><div class="line">        LApplication.getRefWatcher().watch(this);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3-线程造成的内存泄漏"><a href="#3-线程造成的内存泄漏" class="headerlink" title="3.)线程造成的内存泄漏"></a>3.)线程造成的内存泄漏</h3><p>最早时期的时候处理耗时操作多数都是采用Thread+Handler的方式，后来逐步被AsyncTask取代，直到现在采用RxJava的方式来处理异步。这里以AsyncTask为例，可能大部分人都会这样处理一个耗时操作然后通知UI更新结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">public class MainActivity extends AppCompatActivity &#123;</div><div class="line">    private AsyncTask&lt;Void, Void, Integer&gt; asyncTask;</div><div class="line">    private TextView mTextView;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        mTextView = (TextView) findViewById(R.id.text);</div><div class="line">        testAsyncTask();</div><div class="line">        finish();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void testAsyncTask() &#123;</div><div class="line">        asyncTask = new AsyncTask&lt;Void, Void, Integer&gt;() &#123;</div><div class="line">            @Override</div><div class="line">            protected Integer doInBackground(Void... params) &#123;</div><div class="line">                int i = 0;</div><div class="line">                //模拟耗时操作</div><div class="line">                while (!isCancelled()) &#123;</div><div class="line">                    i++;</div><div class="line">                    if (i &gt; 1000000000) &#123;</div><div class="line">                        break;</div><div class="line">                    &#125;</div><div class="line">                    Log.e(&quot;LeakCanary&quot;, &quot;asyncTask----&gt;&quot; + i);</div><div class="line">                &#125;</div><div class="line">                return i;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            @Override</div><div class="line">            protected void onPostExecute(Integer integer) &#123;</div><div class="line">                super.onPostExecute(integer);</div><div class="line">                mTextView.setText(String.valueOf(integer));</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">        asyncTask.execute();</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDestroy() &#123;</div><div class="line">        super.onDestroy();</div><div class="line">        LApplication.getRefWatcher().watch(this);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对于上面的例子来说，在处理一个比较耗时的操作时，可能还没处理结束MainActivity就执行了退出操作，但是此时AsyncTask依然持有对MainActivity的引用就会导致MainActivity无法释放回收引发内存泄漏。</p>
<h3 id="LeakCanary检测结果："><a href="#LeakCanary检测结果：" class="headerlink" title="LeakCanary检测结果："></a>LeakCanary检测结果：</h3><p><img src="http://images2015.cnblogs.com/blog/950883/201610/950883-20161029150616562-244317247.jpg" alt=""></p>
<p>如何解决这种内存泄漏呢？在使用AsyncTask时，在Activity销毁时候也应该取消相应的任务AsyncTask.cancel()方法，避免任务在后台执行浪费资源，进而避免内存泄漏的发生。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line">public class MainActivity3 extends AppCompatActivity &#123;</div><div class="line">    private AsyncTask&lt;Void, Void, Integer&gt; asyncTask;</div><div class="line">    private TextView mTextView;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        mTextView = (TextView) findViewById(R.id.text);</div><div class="line">        testAsyncTask();</div><div class="line">        finish();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void testAsyncTask() &#123;</div><div class="line">        asyncTask = new AsyncTask&lt;Void, Void, Integer&gt;() &#123;</div><div class="line">            @Override</div><div class="line">            protected Integer doInBackground(Void... params) &#123;</div><div class="line">                int i = 0;</div><div class="line">                //模拟耗时操作</div><div class="line">                while (!isCancelled()) &#123;</div><div class="line">                    i++;</div><div class="line">                    if (i &gt; 1000000000) &#123;</div><div class="line">                        break;</div><div class="line">                    &#125;</div><div class="line">                    Log.e(&quot;LeakCanary&quot;, &quot;asyncTask----&gt;&quot; + i);</div><div class="line">                &#125;</div><div class="line">                return i;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            @Override</div><div class="line">            protected void onPostExecute(Integer integer) &#123;</div><div class="line">                super.onPostExecute(integer);</div><div class="line">                mTextView.setText(String.valueOf(integer));</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">        asyncTask.execute();</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void destroyAsyncTask() &#123;</div><div class="line">        if (asyncTask != null &amp;&amp; !asyncTask.isCancelled()) &#123;</div><div class="line">            asyncTask.cancel(true);</div><div class="line">        &#125;</div><div class="line">        asyncTask = null;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDestroy() &#123;</div><div class="line">        super.onDestroy();</div><div class="line">        destroyAsyncTask();</div><div class="line">        LApplication.getRefWatcher().watch(this);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="4-）非静态内部类创建静态实例造成的内存泄漏"><a href="#4-）非静态内部类创建静态实例造成的内存泄漏" class="headerlink" title="4.）非静态内部类创建静态实例造成的内存泄漏"></a>4.）非静态内部类创建静态实例造成的内存泄漏</h3><p>有时我们需要一个可以随着屏幕旋转的Activity，比如视频播放Activity，这时我们为了防止多次调用onCreate方法导致某些参数重新初始化，我们一般会选择创建一个内部类和一个静态实例来保存这些参数，比如以下实现：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">public class MainActivity extends AppCompatActivity &#123;</div><div class="line">    private static Config mConfig;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        //模拟内存泄露</div><div class="line">        if (mConfig == null) &#123;</div><div class="line">            mConfig = new Config();</div><div class="line">            mConfig.setSize(18);</div><div class="line">            mConfig.setTitle(&quot;老九门&quot;);</div><div class="line">        &#125;</div><div class="line">        finish();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDestroy() &#123;</div><div class="line">        super.onDestroy();</div><div class="line">        LApplication.getRefWatcher().watch(this);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    class Config &#123;</div><div class="line">        private int size;</div><div class="line">        private String title;</div><div class="line"></div><div class="line">        public int getSize() &#123;</div><div class="line">            return size;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public void setSize(int size) &#123;</div><div class="line">            this.size = size;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public String getTitle() &#123;</div><div class="line">            return title;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public void setTitle(String title) &#123;</div><div class="line">            this.title = title;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上述代码看着没有任何问题，其实内部类都会持有一个外部类引用，这里这个外部类就是MainActivity，然而内部类实例又是static静态变量其生命周期与Application生命周期一样，所以在MainActivity关闭的时候，内部类静态实例依然持有对MainActivity的引用，导致MainActivity无法被回收释放，引发内存泄漏。LeakCanary检测内存泄漏结果如下：</p>
<p><img src="http://images2015.cnblogs.com/blog/950883/201610/950883-20161031105459768-259924645.jpg" alt=""></p>
<p>对于这种泄漏的解决办法就是将内部类改成静态内部类，不再持有对MainActivity的引用即可，修改后的代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">public class MainActivity extends AppCompatActivity &#123;</div><div class="line">    private static Config mConfig;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        //模拟内存泄露</div><div class="line">        if (mConfig == null) &#123;</div><div class="line">            mConfig = new Config();</div><div class="line">            mConfig.setSize(18);</div><div class="line">            mConfig.setTitle(&quot;老九门&quot;);</div><div class="line">        &#125;</div><div class="line">        finish();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDestroy() &#123;</div><div class="line">        super.onDestroy();</div><div class="line">        LApplication.getRefWatcher().watch(this);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    static class Config &#123;</div><div class="line">        private int size;</div><div class="line">        private String title;</div><div class="line"></div><div class="line">        public int getSize() &#123;</div><div class="line">            return size;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public void setSize(int size) &#123;</div><div class="line">            this.size = size;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public String getTitle() &#123;</div><div class="line">            return title;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public void setTitle(String title) &#123;</div><div class="line">            this.title = title;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="5-）由WebView引起的内存泄漏"><a href="#5-）由WebView引起的内存泄漏" class="headerlink" title="5.）由WebView引起的内存泄漏"></a>5.）由WebView引起的内存泄漏</h3><p>在目前的开发中多多少少会用到Hybrid开发方式，这样我们就会用WebView去承载Html网页，就如下面这种方式：</p>
<p>java代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">public class MainActivity5 extends AppCompatActivity &#123;</div><div class="line">    private WebView mWebView;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_web);</div><div class="line">        mWebView = (WebView) findViewById(R.id.web);</div><div class="line">        mWebView.loadUrl(&quot;http://www.cnblogs.com/whoislcj/p/5720202.html&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDestroy() &#123;</div><div class="line">        super.onDestroy();</div><div class="line">        LApplication.getRefWatcher().watch(this);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>xml布局文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;LinearLayout</div><div class="line">    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:id=&quot;@+id/activity_main&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;</div><div class="line">    android:orientation=&quot;vertical&quot;&gt;</div><div class="line"></div><div class="line">    &lt;WebView</div><div class="line">        android:id=&quot;@+id/web&quot;</div><div class="line">        android:layout_width=&quot;wrap_content&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;/&gt;</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure>
<p>WebView解析网页时会申请Native堆内存用于保存页面元素，当页面较复杂时会有很大的内存占用。如果页面包含图片，内存占用会更严重。并且打开新页面时，为了能快速回退，之前页面占用的内存也不会释放。有时浏览十几个网页，都会占用几百兆的内存。这样加载网页较多时，会导致系统不堪重负，最终强制关闭应用，也就是出现应用闪退或重启。及时Activity关闭时在onDestroy中调用如下代码也是没有任何作用。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">private void destroyWebView() &#123;</div><div class="line">        if (mWebView != null) &#123;</div><div class="line">            mLinearLayout.removeView(mWebView);</div><div class="line">            mWebView.pauseTimers();</div><div class="line">            mWebView.removeAllViews();</div><div class="line">            mWebView.destroy();</div><div class="line">            mWebView = null;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>先看下LeakCanary检测到的结果如下：</p>
<p><img src="http://images2015.cnblogs.com/blog/950883/201611/950883-20161101141536799-38733668.jpg" alt=""></p>
<p>该如何解决呢？这个查了不少资料，其中一种就是使用getApplicationgContext作为参数构建WebView，然后动态添加到一个ViewGroup中，最后退出的时候调用webView的销毁的函数，虽然也达到了防止内存溢出的效果，但是在有些网页弹出时候需要记住密码的对话框的时候，会出现Unable to add window – token null is not for an application 的错误，所以这里采用的解决办法是通过把使用了WebView的Activity(或者Service)放在单独的进程里。然后在检测到应用占用内存过大有可能被系统干掉或者它所在的Activity(或者Service)结束后，调用android.os.Process.killProcess(android.os.Process.myPid());，主动Kill掉进程。由于系统的内存分配是以进程为准的，进程关闭后，系统会自动回收所有内存。</p>
<p>修改后的代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">public class MainActivity5 extends AppCompatActivity &#123;</div><div class="line">    private WebView mWebView;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_web);</div><div class="line">        mWebView = (WebView) findViewById(R.id.web);</div><div class="line">        mWebView.loadUrl(&quot;http://www.cnblogs.com/whoislcj/p/5720202.html&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDestroy() &#123;</div><div class="line">        destroyWebView();</div><div class="line">        android.os.Process.killProcess(android.os.Process.myPid());</div><div class="line">        super.onDestroy();</div><div class="line">        LApplication.getRefWatcher().watch(this);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void destroyWebView() &#123;</div><div class="line">        if (mWebView != null) &#123;</div><div class="line">            mWebView.pauseTimers();</div><div class="line">            mWebView.removeAllViews();</div><div class="line">            mWebView.destroy();</div><div class="line">            mWebView = null;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>manifest中对应的activity配置如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;activity</div><div class="line">   android:name=&quot;.MainActivity5&quot;</div><div class="line">   android:process=&quot;com.whoislcj.webview&quot;/&gt;</div></pre></td></tr></table></figure>
<h3 id="6-）资源未关闭造成的内存泄漏"><a href="#6-）资源未关闭造成的内存泄漏" class="headerlink" title="6.）资源未关闭造成的内存泄漏"></a>6.）资源未关闭造成的内存泄漏</h3><p>对于使用了BraodcastReceiver，ContentObserver，File，Cursor，Stream，Bitmap等资源的使用，应该在Activity销毁时及时关闭或者注销，否则这些资源将不会被回收，造成内存泄漏。例如获取媒体库图片地址代码在查询结束的时候一定要调用</p>
<p>Cursor 的关闭方法防止造成内存泄漏。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">String columns[] = new String[]&#123;</div><div class="line">                MediaStore.Images.Media.DATA, MediaStore.Images.Media._ID, MediaStore.Images.Media.TITLE, MediaStore.Images.Media.DISPLAY_NAME</div><div class="line">        &#125;;</div><div class="line">        Cursor cursor = this.getContentResolver().query(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, columns, null, null, null);</div><div class="line">        if (cursor != null) &#123;</div><div class="line">            int photoIndex = cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA);</div><div class="line">            //显示每张图片的地址，但是首先要判断一下，Cursor是否有值</div><div class="line">            while (cursor.moveToNext()) &#123;</div><div class="line">                String photoPath = cursor.getString(photoIndex); //这里获取到的就是图片存储的位置信息</div><div class="line">                Log.e(&quot;LeakCanary&quot;, &quot;photoPath----&gt;&quot; + photoPath);</div><div class="line">            &#125;</div><div class="line">            cursor.close();</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>以上就是通过LeakCanary检测到的内存泄漏情况以及解决办法。</p>
<p>干我们这行，啥时候懈怠，就意味着长进的停止，长进的停止就意味着被淘汰，只能往前冲，直到凤凰涅槃的一天！</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[LeakCanary 中文使用说明]]></title>
      <url>https://github.com/pangrongxian/2016/01/15/LeakCanary%20%E4%B8%AD%E6%96%87%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/</url>
      <content type="html"><![CDATA[<h2 id="LeakCanary"><a href="#LeakCanary" class="headerlink" title="LeakCanary"></a>LeakCanary</h2><h3 id="Android-和-Java-内存泄露检测。"><a href="#Android-和-Java-内存泄露检测。" class="headerlink" title="Android 和 Java 内存泄露检测。"></a>Android 和 Java 内存泄露检测。</h3><p>原文：<a href="https://www.liaohuqiu.net/cn/posts/leak-canary-read-me/" target="_blank" rel="external">https://www.liaohuqiu.net/cn/posts/leak-canary-read-me/</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">“A small leak will sink a great ship.” - Benjamin Franklin</div><div class="line"></div><div class="line">千里之堤， 毁于蚁穴。 -- 《韩非子·喻老》</div></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/liaohuqiu/leakcanary/master/assets/screenshot.png" alt=""></p>
<h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><p>一个非常简单的 LeakCanary demo: <a href="https://github.com/liaohuqiu/leakcanary-demo">https://github.com/liaohuqiu/leakcanary-demo</a></p>
<h1 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h1><h3 id="在-build-gradle-中加入引用，不同的编译使用不同的引用："><a href="#在-build-gradle-中加入引用，不同的编译使用不同的引用：" class="headerlink" title="在 build.gradle 中加入引用，不同的编译使用不同的引用："></a>在 build.gradle 中加入引用，不同的编译使用不同的引用：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">   debugCompile &apos;com.squareup.leakcanary:leakcanary-android:1.5.1&apos;</div><div class="line">   releaseCompile &apos;com.squareup.leakcanary:leakcanary-android-no-op:1.5.1&apos;</div><div class="line">   testCompile &apos;com.squareup.leakcanary:leakcanary-android-no-op:1.5.1&apos;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<h3 id="在-Application-中："><a href="#在-Application-中：" class="headerlink" title="在 Application 中："></a>在 Application 中：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">public class ExampleApplication extends Application &#123;</div><div class="line"></div><div class="line">  @Override public void onCreate() &#123;</div><div class="line">    super.onCreate();</div><div class="line">    if (LeakCanary.isInAnalyzerProcess(this)) &#123;</div><div class="line">      // This process is dedicated to LeakCanary for heap analysis.</div><div class="line">      // You should not init your app in this process.</div><div class="line">      return;</div><div class="line">    &#125;</div><div class="line">    LeakCanary.install(this);</div><div class="line">    // Normal app init code...</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>这样，就万事俱备了！</strong> 在 debug build 中，如果检测到某个 activity 有内存泄露，LeakCanary 就是自动地显示一个通知。</p>
<h2 id="为什么需要使用-LeakCanary？"><a href="#为什么需要使用-LeakCanary？" class="headerlink" title="为什么需要使用 LeakCanary？"></a>为什么需要使用 LeakCanary？</h2><p>问得好，看这个文章： <a href="">LeakCanary: 让内存泄露无所遁形</a></p>
<h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><p>使用 RefWatcher 监控那些本该被回收的对象。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">RefWatcher refWatcher = &#123;...&#125;;</div><div class="line"></div><div class="line">// 监控</div><div class="line">refWatcher.watch(schrodingerCat);</div></pre></td></tr></table></figure>
<p><strong>LeakCanary.install()</strong> 会返回一个预定义的 <strong>RefWatcher</strong>，同时也会启用一个 <strong>ActivityRefWatcher</strong>，用于自动监控调用 Activity.onDestroy() 之后泄露的 activity。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public class ExampleApplication extends Application &#123;</div><div class="line"></div><div class="line">  public static RefWatcher getRefWatcher(Context context) &#123;</div><div class="line">    ExampleApplication application = (ExampleApplication) context.getApplicationContext();</div><div class="line">    return application.refWatcher;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  private RefWatcher refWatcher;</div><div class="line"></div><div class="line">  @Override public void onCreate() &#123;</div><div class="line">    super.onCreate();</div><div class="line">    refWatcher = LeakCanary.install(this);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">使用 **RefWatcher** 监控 **Fragment**：</div><div class="line"></div><div class="line">public abstract class BaseFragment extends Fragment &#123;</div><div class="line"></div><div class="line">  @Override public void onDestroy() &#123;</div><div class="line">    super.onDestroy();</div><div class="line">    RefWatcher refWatcher = ExampleApplication.getRefWatcher(getActivity());</div><div class="line">    refWatcher.watch(this);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="工作机制"><a href="#工作机制" class="headerlink" title="工作机制"></a>工作机制</h2><ol>
<li><p>RefWatcher.watch() 创建一个 KeyedWeakReference 到要被监控的对象。</p>
</li>
<li><p>然后在后台线程检查引用是否被清除，如果没有，调用GC。</p>
</li>
<li><p>如果引用还是未被清除，把 heap 内存 dump 到 APP 对应的文件系统中的一个 .hprof 文件中。</p>
</li>
<li><p>在另外一个进程中的 HeapAnalyzerService 有一个 HeapAnalyzer 使用HAHA 解析这个文件。</p>
</li>
<li><p>得益于唯一的 reference key, HeapAnalyzer 找到 KeyedWeakReference，定位内存泄露。</p>
</li>
<li><p>HeapAnalyzer 计算 到 GC roots 的最短强引用路径，并确定是否是泄露。如果是的话，建立导致泄露的引用链。</p>
</li>
<li><p>引用链传递到 APP 进程中的 DisplayLeakService， 并以通知的形式展示出来。</p>
</li>
</ol>
<h2 id="如何复制-leak-trace？"><a href="#如何复制-leak-trace？" class="headerlink" title="如何复制 leak trace？"></a>如何复制 leak trace？</h2><p>在 Logcat 中，你可以看到类似这样的 leak trace：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">In com.example.leakcanary:1.0:1 com.example.leakcanary.MainActivity has leaked:</div><div class="line"></div><div class="line">* GC ROOT thread java.lang.Thread.&lt;Java Local&gt; (named &apos;AsyncTask #1&apos;)</div><div class="line">* references com.example.leakcanary.MainActivity$3.this$0 (anonymous class extends android.os.AsyncTask)</div><div class="line">* leaks com.example.leakcanary.MainActivity instance</div><div class="line"></div><div class="line">* Reference Key: e71f3bf5-d786-4145-8539-584afaecad1d</div><div class="line">* Device: Genymotion generic Google Nexus 6 - 5.1.0 - API 22 - 1440x2560 vbox86p</div><div class="line">* Android Version: 5.1 API: 22</div><div class="line">* Durations: watch=5086ms, gc=110ms, heap dump=435ms, analysis=2086ms</div></pre></td></tr></table></figure>
<p>你甚至可以通过分享按钮把这些东西分享出去。</p>
<h2 id="SDK-导致的内存泄露"><a href="#SDK-导致的内存泄露" class="headerlink" title="SDK 导致的内存泄露"></a>SDK 导致的内存泄露</h2><p>随着时间的推移，很多SDK 和厂商 ROM 中的内存泄露问题已经被尽快修复了。但是，当这样的问题发生时，一般的开发者能做的事情很有限。</p>
<p>LeakCanary 有一个已知问题的忽略列表，AndroidExcludedRefs.java，如果你发现了一个新的问题，请提一个 issue 并附上 leak trace, reference key, 机器型号和 SDK 版本。如果可以附带上 dump 文件的 链接那就再好不过了。</p>
<p>对于最新发布的 Android，这点尤其重要。你有机会在帮助在早期发现新的内存泄露，这对整个 Android 社区都有极大的益处。</p>
<p>开发版本的 Snapshots 包在这里： Sonatype’s snapshots repository。</p>
<h2 id="leak-trace-之外"><a href="#leak-trace-之外" class="headerlink" title="leak trace 之外"></a>leak trace 之外</h2><p>有时，leak trace 不够，你需要通过 MAT 或者 YourKit 深挖 dump 文件。</p>
<p>通过以下方法，你能找到问题所在：</p>
<ol>
<li>查找所有的 com.squareup.leakcanary.KeyedWeakReference 实例。</li>
<li>检查 key 字段</li>
<li>Find the KeyedWeakReference that has a key field equal to the reference key<br>reported by LeakCanary.</li>
<li>找到 key 和 和 logcat 输出的 key 值一样的 KeyedWeakReference。</li>
<li>referent 字段对应的就是泄露的对象。</li>
<li>剩下的，就是动手修复了。最好是检查到 GC root 的最短强引用路径开始。</li>
</ol>
<h2 id="自定义"><a href="#自定义" class="headerlink" title="自定义"></a>自定义</h2><h3 id="UI-样式"><a href="#UI-样式" class="headerlink" title="UI 样式"></a>UI 样式</h3><p>DisplayLeakActivity 有一个默认的图标和标签，你只要在你自己的 APP 资源中，替换以下资源就可。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">res/</div><div class="line">  drawable-hdpi/</div><div class="line">    __leak_canary_icon.png</div><div class="line">  drawable-mdpi/</div><div class="line">    __leak_canary_icon.png</div><div class="line">  drawable-xhdpi/</div><div class="line">    __leak_canary_icon.png</div><div class="line">  drawable-xxhdpi/</div><div class="line">    __leak_canary_icon.png</div><div class="line">  drawable-xxxhdpi/</div><div class="line">    __leak_canary_icon.png</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;resources&gt;</div><div class="line">  &lt;string name=&quot;__leak_canary_display_activity_label&quot;&gt;MyLeaks&lt;/string&gt;</div><div class="line">&lt;/resources&gt;</div></pre></td></tr></table></figure>
<h3 id="保存-leak-trace"><a href="#保存-leak-trace" class="headerlink" title="保存 leak trace"></a>保存 leak trace</h3><p>DisplayLeakActivity saves up to 7 heap dumps &amp; leak traces in the app directory. You can change that number by providing R.integer.__leak_canary_max_stored_leaks in your app:</p>
<p>在 APP 的目录中，DisplayLeakActivity 保存了 7 个 dump 文件和 leak trace。你可以在你的 APP 中，定义 R.integer.__leak_canary_max_stored_leaks 来覆盖类库的默认值。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;resources&gt;</div><div class="line">  &lt;integer name=&quot;__leak_canary_max_stored_leaks&quot;&gt;20&lt;/integer&gt;</div><div class="line">&lt;/resources&gt;</div></pre></td></tr></table></figure>
<h2 id="上传-leak-trace-到服务器"><a href="#上传-leak-trace-到服务器" class="headerlink" title="上传 leak trace 到服务器"></a>上传 leak trace 到服务器</h2><p>你可以改变处理完成的默认行为，将 leak trace 和 heap dump 上传到你的服务器以便统计分析。</p>
<p>创建一个 LeakUploadService， 最简单的就是继承 DisplayLeakService ：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public class LeakUploadService extends DisplayLeakService &#123;</div><div class="line">  @Override</div><div class="line">  protected void afterDefaultHandling(HeapDump heapDump, AnalysisResult result, String leakInfo) &#123;</div><div class="line">    if (!result.leakFound || result.excludedLeak) &#123;</div><div class="line">      return;</div><div class="line">    &#125;</div><div class="line">    myServer.uploadLeakBlocking(heapDump.heapDumpFile, leakInfo);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>请确认 release 版本 使用 RefWatcher.DISABLED：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public class ExampleApplication extends Application &#123;</div><div class="line"></div><div class="line">  public static RefWatcher getRefWatcher(Context context) &#123;</div><div class="line">    ExampleApplication application = (ExampleApplication) context.getApplicationContext();</div><div class="line">    return application.refWatcher;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  private RefWatcher refWatcher;</div><div class="line"></div><div class="line">  @Override public void onCreate() &#123;</div><div class="line">    super.onCreate();</div><div class="line">    refWatcher = installLeakCanary();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  protected RefWatcher installLeakCanary() &#123;</div><div class="line">    return RefWatcher.DISABLED;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>自定义 RefWatcher：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public class DebugExampleApplication extends ExampleApplication &#123;</div><div class="line">  protected RefWatcher installLeakCanary() &#123;</div><div class="line">    return LeakCanary.install(app, LeakUploadService.class);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>别忘了注册 service：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    xmlns:tools=&quot;http://schemas.android.com/tools&quot;</div><div class="line">    &gt;</div><div class="line">  &lt;application android:name=&quot;com.example.DebugExampleApplication&quot;&gt;</div><div class="line">    &lt;service android:name=&quot;com.example.LeakUploadService&quot; /&gt;</div><div class="line">  &lt;/application&gt;</div><div class="line">&lt;/manifest&gt;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[LeakCanary让内存泄露无所遁形]]></title>
      <url>https://github.com/pangrongxian/2016/01/11/LeakCanary%E8%AE%A9%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E6%97%A0%E6%89%80%E9%81%81%E5%BD%A2/</url>
      <content type="html"><![CDATA[<pre><code>本文为 LeakCanary: Detect all memory leaks 的翻译。

原文: https://corner.squareup.com/2015/05/leak-canary.html

翻译出处：https://www.liaohuqiu.net/cn/posts/leak-canary/
</code></pre><h2 id="LeakCanary-Detect-all-memory-leaks"><a href="#LeakCanary-Detect-all-memory-leaks" class="headerlink" title="LeakCanary: Detect all memory leaks!"></a>LeakCanary: Detect all memory leaks!</h2><h3 id="A-memory-leak-detection-library-for-Android-and-Java"><a href="#A-memory-leak-detection-library-for-Android-and-Java" class="headerlink" title="A memory leak detection library for Android and Java."></a>A memory leak detection library for Android and Java.</h3><p><em>Written by <a href="https://twitter.com/Piwai" target="_blank" rel="external">Pierre-Yves Ricau.</a></em></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">java.lang.OutOfMemoryError</div><div class="line">        at android.graphics.Bitmap.nativeCreate(Bitmap.java:-2)</div><div class="line">        at android.graphics.Bitmap.createBitmap(Bitmap.java:689)</div><div class="line">        at com.squareup.ui.SignView.createSignatureBitmap(SignView.java:121)</div></pre></td></tr></table></figure>
<h3 id="谁也不会喜欢-OutOfMemoryError"><a href="#谁也不会喜欢-OutOfMemoryError" class="headerlink" title="谁也不会喜欢 OutOfMemoryError"></a>谁也不会喜欢 OutOfMemoryError</h3><p>在 <a href="https://squareup.com/help/global/en/article/5243-download-the-square-register-app" target="_blank" rel="external">Square Register</a> 中, 在签名页面，<a href="https://medium.com/square-corner-blog/smooth-signatures-9d92df119ff8" target="_blank" rel="external">我们把客户的签名画在 bitmap cache 上</a>。 这个 bitmap 的尺寸几乎和屏幕的尺寸一样大，在创建这个 bitmap 对象时，经常会引发 OutOfMemoryError，简称OOM。</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/0*TpsPt3DHu_aMeoa2.png" alt=""></p>
<h3 id="当时，我们尝试过一些解决方案，但都没解决问题"><a href="#当时，我们尝试过一些解决方案，但都没解决问题" class="headerlink" title="当时，我们尝试过一些解决方案，但都没解决问题"></a>当时，我们尝试过一些解决方案，但都没解决问题</h3><ul>
<li><p>使用 Bitmap.Config.ALPHA_8 因为，签名仅有黑色。</p>
</li>
<li><p>捕捉 OutOfMemoryError, 尝试 GC 并重试（受 <a href="https://android.googlesource.com/platform/packages/inputmethods/LatinIME/+/ics-mr1/java/src/com/android/inputmethod/latin/Utils.java" target="_blank" rel="external">GCUtils</a> 启发）。</p>
</li>
<li><p>我们没想过在 Java heap 内存之外创建 bitmap 。苦逼的我们，那会 Fresco 还不存在。</p>
</li>
</ul>
<h2 id="路子走错了"><a href="#路子走错了" class="headerlink" title="路子走错了"></a>路子走错了</h2><p>其实 bitmap 的尺寸不是真正的问题，当内存吃紧的时候，到处都有可能引发 OO。在创建大对象，比如 bitmap 的时候，更有可能发生。OOM 只是一个表象，更深层次的问题可能是: <strong>内存泄露</strong>。</p>
<h2 id="什么是内存泄露"><a href="#什么是内存泄露" class="headerlink" title="什么是内存泄露"></a>什么是内存泄露</h2><p>一些对象有着有限的生命周期。当这些对象所要做的事情完成了，我们希望他们会被回收掉。但是如果有一系列对这个对象的引用，那么在我们期待这个对象生命周期结束的时候被收回的时候，它是不会被回收的。它还会占用内存，这就造成了内存泄露。持续累加，内存很快被耗尽。</p>
<p>比如，当 Activity.onDestroy 被调用之后，activity 以及它涉及到的 view 和相关的 bitmap 都应该被回收。但是，如果有一个后台线程持有这个 activity 的引用，那么 activity 对应的内存就不能被回收。这最终将会导致内存耗尽，然后因为 OOM 而 crash。</p>
<h2 id="对战内存泄露"><a href="#对战内存泄露" class="headerlink" title="对战内存泄露"></a>对战内存泄露</h2><p>排查内存泄露是一个全手工的过程，这在 Raizlabs 的 Wrangling Dalvik 系列文章中有详细描述。</p>
<p>以下几个关键步骤：</p>
<ol>
<li><p>通过 Bugsnag, Crashlytics 或者 Developer Console 等统计平台，了解 OutOfMemoryError 情况。</p>
</li>
<li><p>重现问题。为了重现问题，机型非常重要，因为一些问题只在特定的设备上会出现。为了找到特定的机型，你需要想尽一切办法，你可能需要去买，去借，甚至去偷。 当然，为了确定复现步骤，你需要一遍一遍地去尝试。一切都是非常原始和粗暴的。</p>
</li>
<li><p>在发生内存泄露的时候，把内存 Dump 出来。具体看这里。</p>
</li>
<li><p>然后，你需要在 MAT 或者 YourKit 之类的内存分析工具中反复查看，找到那些原本该被回收掉的对象。</p>
</li>
<li><p>计算这个对象到 GC roots 的最短强引用路径。</p>
</li>
<li><p>确定引用路径中的哪个引用是不该有的，然后修复问题。</p>
</li>
</ol>
<p>很复杂对吧？</p>
<p>如果有一个类库能在发生 OOM 之前把这些事情全部都搞定，然后你只要修复这些问题就好了，岂不妙哉！</p>
<h2 id="LeakCanary"><a href="#LeakCanary" class="headerlink" title="LeakCanary"></a>LeakCanary</h2><h4 id="LeakCanary-是一个检测内存泄露的开源类库。你可以在-debug-包种轻松检测内存泄露。"><a href="#LeakCanary-是一个检测内存泄露的开源类库。你可以在-debug-包种轻松检测内存泄露。" class="headerlink" title="LeakCanary 是一个检测内存泄露的开源类库。你可以在 debug 包种轻松检测内存泄露。"></a><a href="https://github.com/square/leakcanary">LeakCanary</a> 是一个检测内存泄露的开源类库。你可以在 debug 包种轻松检测内存泄露。</h4><h4 id="先看一个例子"><a href="#先看一个例子" class="headerlink" title="先看一个例子:"></a>先看一个例子:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">class Cat &#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class Box &#123;</div><div class="line">  Cat hiddenCat;</div><div class="line">&#125;</div><div class="line">class Docker &#123;</div><div class="line">    // 静态变量，将不会被回收，除非加载 Docker 类的 ClassLoader 被回收。</div><div class="line">    static Box container;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// ...</div><div class="line"></div><div class="line">Box box = new Box();</div><div class="line"></div><div class="line">// 薛定谔之猫</div><div class="line">Cat schrodingerCat = new Cat();</div><div class="line">box.hiddenCat = schrodingerCat;</div><div class="line">Docker.container = box;</div></pre></td></tr></table></figure>
<h4 id="创建一个-RefWatcher-，监控对象引用情况。"><a href="#创建一个-RefWatcher-，监控对象引用情况。" class="headerlink" title="创建一个 RefWatcher ，监控对象引用情况。"></a>创建一个 <strong>RefWatcher</strong> ，监控对象引用情况。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 我们期待薛定谔之猫很快就会消失（或者不消失），我们监控一下</div><div class="line">refWatcher.watch(schrodingerCat);</div></pre></td></tr></table></figure>
<h4 id="当发现有内存泄露的时候，你会看到一个很漂亮的-leak-trace-报告"><a href="#当发现有内存泄露的时候，你会看到一个很漂亮的-leak-trace-报告" class="headerlink" title="当发现有内存泄露的时候，你会看到一个很漂亮的 leak trace 报告:"></a>当发现有内存泄露的时候，你会看到一个很漂亮的 leak trace 报告:</h4><ul>
<li>GC ROOT static Docker.container</li>
<li>references Box.hiddenCat</li>
<li>leaks Cat instance</li>
</ul>
<p>我们知道，你很忙，每天都有一大堆需求。所以我们把这个事情弄得很简单，你只需要添加一行代码就行了。然后 LeakCanary 就会自动侦测 activity 的内存泄露了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public class ExampleApplication extends Application &#123;</div><div class="line">  @Override public void onCreate() &#123;</div><div class="line">    super.onCreate();</div><div class="line">    LeakCanary.install(this);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后你会在通知栏看到这样很漂亮的一个界面:</p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>使用 LeakCanary 之后，我们修复了我们 APP 中相当多的内存泄露。我们甚至发现了 Android SDK 中的一些内存泄露问题。</p>
<p>结果是惊艳的，我们减少了 94% 的由 OOM 导致的 crash。</p>
<p>如果你也想消灭 OOM crash，那还犹豫什么，赶快使用 <a href="https://cdn-images-1.medium.com/max/1600/0*8DpD5hZX4R4O4Vvr.png" target="_blank" rel="external">LeakCanary</a></p>
<p>相关链接:</p>
<ul>
<li><p><a href="">LeakCanary 中文使用说明</a></p>
</li>
<li><p>一个非常简单的 LeakCanary demo: <a href="https://github.com/liaohuqiu/leakcanary-demo">https://github.com/liaohuqiu/leakcanary-demo</a></p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CleanBlog 博客主题配置]]></title>
      <url>https://github.com/pangrongxian/2015/12/25/Clean%20Blog%20Hexo%20%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p><a href="https://github.com/klugjo/hexo-theme-clean-blog">https://github.com/klugjo/hexo-theme-clean-blog</a></p>
<p>Installation 安装</p>
<p>$ git clone <a href="https://github.com/klugjo/hexo-theme-clean-blog.git">https://github.com/klugjo/hexo-theme-clean-blog.git</a></p>
<p>使用 git clone 命令把 clean-blog 主题文件下载到本地</p>
<p>themes/clean-blog</p>
<p>Then update your blog’s main _config.yml to set the theme to clean-blog:</p>
<p>更新你的博客主参数文件 _config.yml ，把主题设置为 clean-blog：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># Extensions</div><div class="line">## Plugins: http://hexo.io/plugins/</div><div class="line">## Themes: http://hexo.io/themes/</div><div class="line"></div><div class="line">theme: clean-blog</div><div class="line">Configuration</div></pre></td></tr></table></figure>
<p>意思是：在主参数配置文件中找到这段代码，把主题 theme 设置成：clean-blog</p>
<p>Menu  菜单</p>
<p>The menu is configured in the theme’s _config.yml.</p>
<p>菜单在主题文件的配置文件_config.yml中去设置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># Header</div><div class="line">menu:</div><div class="line">  Home: /</div><div class="line">  Archives: /archives</div><div class="line">  Github:</div><div class="line">    url: https://github.com/klugjo/hexo-theme-clean-blog</div><div class="line">    icon: github</div></pre></td></tr></table></figure>
<p>The object key is the label and the value is the path, or you can use a icon (font awesome) like menu item.</p>
<h3 id="Top-Left-Label"><a href="#Top-Left-Label" class="headerlink" title="Top Left Label"></a>Top Left Label</h3><p>The top left label is configured in the theme’s _config.yml. When clicked it will lead to the Home Page.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># Title on top left of menu. Leave empty to use main blog title</div><div class="line">menu_title: Configurable Title</div></pre></td></tr></table></figure>
<h3 id="Home-Page-cover-image-主页封面图片"><a href="#Home-Page-cover-image-主页封面图片" class="headerlink" title="Home Page cover image - 主页封面图片"></a>Home Page cover image - 主页封面图片</h3><p>The Home Page cover is configured in the theme’s _config.yml. It will be the same for all index type pages.</p>
<p>主页封面图在主题配置文件_config.yml中设置，其他所有类型的引导页面都是一样的方法去设置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># URL of the Home page image</div><div class="line">index_cover: /img/home-bg.jpg</div></pre></td></tr></table></figure>
<h3 id="Default-post-title"><a href="#Default-post-title" class="headerlink" title="Default post title"></a>Default post title</h3><p>The default post title (used when no title is specified) is configured in the theme’s _config.yml.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># Default post title</div><div class="line">default_post_title: Untitled</div></pre></td></tr></table></figure>
<h3 id="Comments-评论"><a href="#Comments-评论" class="headerlink" title="Comments  评论"></a>Comments  评论</h3><p>The comments provider is specified in the theme’s _config.yml. If you specify both a disqus_shortname and a facebook.appid there will be 2 sets of comment per post. So choose one.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># Comments. Choose one by filling up the information</div><div class="line">comments:</div><div class="line">  # Disqus comments</div><div class="line">  disqus_shortname: klugjotest</div><div class="line">  # Facebook comments</div><div class="line">  facebook:</div><div class="line">    appid: 123456789012345</div><div class="line">    comment_count: 5</div><div class="line">    comment_colorscheme: light</div></pre></td></tr></table></figure>
<h4 id="如何获得评论功能呢？"><a href="#如何获得评论功能呢？" class="headerlink" title="如何获得评论功能呢？"></a>如何获得评论功能呢？</h4><p>注册成为 facebook平台开发者，并创建一个项目，获得应用编号，应用编号即：appid </p>
<p>注册地址： <a href="https://developers.facebook.com/" target="_blank" rel="external">https://developers.facebook.com/</a></p>
<p>You can too hide the comment in the posts front-matter: //隐藏评论设置 false</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">comment: false </div><div class="line">---</div></pre></td></tr></table></figure>
<h3 id="Google-Analytics-谷歌分析"><a href="#Google-Analytics-谷歌分析" class="headerlink" title="Google Analytics  //谷歌分析"></a>Google Analytics  //谷歌分析</h3><p>The Google Analytics Tracking ID is configured in the theme’s _config.yml.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># Google Analytics Tracking ID  // 谷歌分析跟踪ID</div><div class="line">google_analytics:</div></pre></td></tr></table></figure>
<h4 id="如何让获得谷歌分析服务？"><a href="#如何让获得谷歌分析服务？" class="headerlink" title="如何让获得谷歌分析服务？"></a>如何让获得谷歌分析服务？</h4><p>创建谷歌分析帐号，获得谷歌分析跟踪ID即可。</p>
<p>注册地址 ： <a href="https://www.google.com/intl/zh-CN/analytics/" target="_blank" rel="external">https://www.google.com/intl/zh-CN/analytics/</a></p>
<h3 id="Addthis"><a href="#Addthis" class="headerlink" title="Addthis"></a>Addthis</h3><p>The Addthis ID is configured in the theme’s _config.yml.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># Addthis ID</div><div class="line">addthis:</div></pre></td></tr></table></figure>
<h4 id="分享功能如何获得？"><a href="#分享功能如何获得？" class="headerlink" title="分享功能如何获得？"></a>分享功能如何获得？</h4><p>使用 Addthis 的服务，注册并获取 Your Profile ID 即可。</p>
<p><a href="https://www.addthis.com/" target="_blank" rel="external">https://www.addthis.com/</a></p>
<h3 id="Social-Account-社交账户"><a href="#Social-Account-社交账户" class="headerlink" title="Social Account 社交账户"></a>Social Account 社交账户</h3><p>Setup the links to your social pages in the theme’s _config.yml. Links are in the footer.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># Social Accounts</div><div class="line">twitter_url:</div><div class="line">facebook_url:</div><div class="line">github_url: https://github.com/klugjo/hexo-theme-clean-blog</div><div class="line">linkedin_url:</div><div class="line">mailto:</div></pre></td></tr></table></figure>
<h3 id="Author-作者"><a href="#Author-作者" class="headerlink" title="Author 作者"></a>Author 作者</h3><p>The post’s author is specified in the posts front-matter:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">author: Klug Jo</div><div class="line">---</div></pre></td></tr></table></figure>
<h3 id="Post’s-Cover-Image-文章封面图片"><a href="#Post’s-Cover-Image-文章封面图片" class="headerlink" title="Post’s Cover Image 文章封面图片"></a>Post’s Cover Image 文章封面图片</h3><p>By default, posts will use the home page cover image. You can specify a custom cover in the front-matter:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">title: Excerpts</div><div class="line">date: 2013-12-25 00:23:23</div><div class="line">tags: [&quot;Excertps&quot;]</div><div class="line">cover: /assets/contact-bg.jpg</div><div class="line">---</div></pre></td></tr></table></figure>
<h3 id="Post’s-Share-Cover-Image-文章分享封面图"><a href="#Post’s-Share-Cover-Image-文章分享封面图" class="headerlink" title="Post’s Share Cover Image  文章分享封面图"></a>Post’s Share Cover Image  文章分享封面图</h3><p>You can specify a custom cover to share yours posts in social medias:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">share_cover: /assets/contact-bg.jpg</div><div class="line">---</div></pre></td></tr></table></figure>
<h3 id="Post’s-Excerpt-摘录"><a href="#Post’s-Excerpt-摘录" class="headerlink" title="Post’s Excerpt 摘录"></a>Post’s Excerpt 摘录</h3><p>This theme does not support traditional excerpts. To show excerpts on the index page, use subtitle in the front-matter:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">title: Excerpts</div><div class="line">date: 2013-12-25 00:23:23</div><div class="line">tags: [&quot;Excertps&quot;]</div><div class="line">subtitle: Standard Excerpts are not supported in Clean Blog but you can use subtitles in the front matter to display text in the index.</div><div class="line">---</div></pre></td></tr></table></figure>
<h3 id="Tags-page-标签页"><a href="#Tags-page-标签页" class="headerlink" title="Tags page. 标签页"></a>Tags page. 标签页</h3><p>Follow these steps to add a tags page that contains all the tags in your site.</p>
<ul>
<li>Create a page named tags //创建一个标签页</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new page &quot;tags&quot;</div></pre></td></tr></table></figure>
<ul>
<li>Edit the newly created page and set page type to tags in the front matter.</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">title: All tags</div><div class="line">type: &quot;tags&quot;</div></pre></td></tr></table></figure>
<ul>
<li>Add tags to the menu in the theme _config.yml: // 在主题配置文件中添加标签菜单</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># Header</div><div class="line">menu:</div><div class="line">  Home: /</div><div class="line">  Archives: /archives</div><div class="line">  Tags: /tags</div></pre></td></tr></table></figure>
<h3 id="Categories-page-分类页"><a href="#Categories-page-分类页" class="headerlink" title="Categories page. 分类页"></a>Categories page. 分类页</h3><p>Follow these steps to add a categories page that contains all the categories in your site.</p>
<ul>
<li>Create a page named categories // 创建一个分类页</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new page &quot;categories&quot;</div></pre></td></tr></table></figure>
<ul>
<li>Edit the newly created page and set page type to categories in the front matter.</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">title: All tags</div><div class="line">type: &quot;categories&quot;</div></pre></td></tr></table></figure>
<p>// 在主题配置文件中添加分类签菜单</p>
<ul>
<li>Add Categories to the menu in the theme _config.yml:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># Header</div><div class="line">menu:</div><div class="line">  Home: /</div><div class="line">  Archives: /archives</div><div class="line">  Categories: /categories</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android Studio 插件大集结！]]></title>
      <url>https://github.com/pangrongxian/2015/08/12/Android%20Studio%20%E6%8F%92%E4%BB%B6%E5%A4%A7%E9%9B%86%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>标注:本文在Windows环境下进行</p>
<h1 id="GsonFormat"><a href="#GsonFormat" class="headerlink" title="GsonFormat"></a>GsonFormat</h1><h4 id="GitHub：GsonFormat"><a href="#GitHub：GsonFormat" class="headerlink" title="GitHub：GsonFormat"></a><a href="https://github.com/zzz40500/GsonFormat">GitHub：GsonFormat</a></h4><p>GsonFormat 说是开发中最常用的Android Studio插件绝不为过！</p>
<p>绝大多数的服务端都以json数据格式返回，而客户端需要根据api接口生成相应的实体类，这个插件</p>
<p>把这个过程自动化了，省了我们很多功夫不是！</p>
<p>GsonFormat生成实体类 的 快捷键 是： Alt + S 或者 Alt + Insert 也可以。</p>
<ul>
<li>1.首先在浏览器打开一条接口，然后使用 <a href="http://json.cn/" target="_blank" rel="external">json.cn</a> 把接口数据显示出来看看</li>
<li>2.Ctrl + A 全选接口数据，Ctrl + C 复制</li>
<li>3.回到Android Studio，Alt + S 快捷键弹出一个框框，然后 Ctrl + V 把刚刚复制的内容粘贴进去，点击OK即可生成你想要的数据接口的实体，是不是很酷啊！</li>
</ul>
<p><img src="https://github.com/pangrongxian/PhotoResour/blob/master/res/GsonFormat.gif?raw=true.gif" alt=""></p>
<h1 id="android-butterknife-zelezny"><a href="#android-butterknife-zelezny" class="headerlink" title="android-butterknife-zelezny"></a>android-butterknife-zelezny</h1><h4 id="GitHub-ButterKnife"><a href="#GitHub-ButterKnife" class="headerlink" title="GitHub-ButterKnife"></a><a href="https://github.com/JakeWharton/butterknife">GitHub-ButterKnife</a></h4><ul>
<li>android-butterknife-zelezny是根据butterknife定制的一款插件，能够方便快速初始化布局控件，再也不用手动 findViewById 了。</li>
</ul>
<h5 id="安装"><a href="#安装" class="headerlink" title="安装 :"></a>安装 :</h5><ul>
<li><p>如何安装Android Studio的插件：<br>以下以安装 android-butterknife-zelezny 为例子，其他的插件也是一样的安装步骤。</p>
</li>
<li><p><strong>File Setting —&gt; Plugins  —&gt; Browse repositories</strong> ,然后在输入框输入要安装的插件名称，点击Install即可安装，<br>安装完之后按照提示重启AS便可使用。</p>
</li>
</ul>
<p><img src="https://github.com/pangrongxian/PhotoResour/blob/master/res/butterknife.png?raw=true.png" alt=""></p>
<p><img src="https://github.com/pangrongxian/PhotoResour/blob/master/res/butterknife.gif?raw=true.gif" alt=""></p>
<h5 id="使用"><a href="#使用" class="headerlink" title="使用 :"></a>使用 :</h5><p><img src="https://github.com/pangrongxian/PhotoResour/blob/master/res/butterknife02.gif?raw=true" alt=""></p>
]]></content>
    </entry>
    
  
  
</search>
